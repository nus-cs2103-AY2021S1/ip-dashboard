[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027duke.main.Launcher\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation \u0027org.testng:testng:6.9.6\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    mainClassName \u003d \"duke.main.Duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 24,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "T | ✓ | play dote | low"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "T | ✘ | plan for date  | high"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "D | ✘ | CS2100 assignment  | 2020-09-20 | low"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "T | ✘ | laundry | low"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Duke is a Task Manager application which helps you to organize and set up your tasks, events and deadlines."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Overview of available features:  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `list`  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `todo`  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `deadline`  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `event`  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `delete`  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `done`  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `find`  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `sort`  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    • `bye`  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Feature 1: View the task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "View all the tasks in your current task list: `list` "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `list`  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Example: `list`  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected example outcome:  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Quack! Your list is here:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    1.[T][✓] play dote (Priority: low)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    2.[T][✘] plan for date (Priority: high)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    3.[D][✘] CS2100 assignment (by: Sep 20 2020) (Priority: low)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    4.[T][✘] laundry (Priority: low)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Feature 2: Add a todo task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Add a todo task to the task list: `todo`  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `todo [description]`  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Example: `todo do CS2103T iP increment`  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected example outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Quack Quack Quack. I\u0027ve added this task: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    [T][✘] do CS2103T increment (Priority: low)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Master, you now have 5 items in the list! Quack! Quack!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "### Feature 2: Add a deadline task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Add a deadline task to the task list: `deadline`  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Format: `deadline [description] /by [date]` or `deadline [description] /by [date] [time]`  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Example: `deadline CS2100 assignment /by 2020-09-18 23:59`  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Remarks:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\t• "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Expected example outcome:  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Quack Quack Quack. I\u0027ve added this task: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    [D][✘] CS2100 assignment  (by: Sep 18 2020 23:59) (Priority: low)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "Master, you now have 6 items in the list! Quack! Quack!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Description of feature."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Describe action and its outcome."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "`keyword (optional arguments)`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "`outcome`"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 60,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DukeException() { }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 5
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class EmptyDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACK!!! Please specify the date\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class EmptyIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACKK!! The task index is empty :\u0027(.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACK!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACK!!! I\u0027m sorry master, but I don\u0027t know what that means :\u0027(\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InvalidDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE_NO_TIME \u003d \"QUACK QUACK!! Entered date is in the wrong format. Please \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"specify in this format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE_WITH_TIME \u003d \"QUACK QUACK!! Entered date is in the wrong format. Please \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \"specify in this format YYYY-MM-DD HH:MM\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private boolean hasTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public InvalidDateFormatException(boolean hasTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.hasTime \u003d hasTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return !hasTime ? MESSAGE_NO_TIME : MESSAGE_WITH_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACK!!! The task index is invalid :\u0027(\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidPriorityException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class InvalidPriorityException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String MESSAGE \u003d \"QUACK! Priority can be one of high, medium or low\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 10
    }
  },
  {
    "path": "src/main/java/duke/main/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a DialogBox object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param text Text to be inserted in the label."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param displayPicture Image to be inserted in the image view."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DialogBox(String text, Image displayPicture) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.dialog.setPadding(new Insets(0, 10, 0, 10));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.displayPicture.setImage(displayPicture);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Background setBackground(Color color, CornerRadii radius) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new Background(new BackgroundFill(color, radius, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String getText() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.dialog.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        CornerRadii corn \u003d new CornerRadii(10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Color backgroundColor \u003d Color.rgb(69, 238, 82);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Background background \u003d db.setBackground(backgroundColor, corn);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        db.dialog.setBackground(background);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert !db.getText().equals(\"\") : \"User input cannot be empty\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DialogBox dukeBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dukeBox.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        CornerRadii corn \u003d new CornerRadii(10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Color backgroundColor \u003d Color.rgb(53, 179, 255);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Background background \u003d dukeBox.setBackground(backgroundColor, corn);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dukeBox.dialog.setBackground(background);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert !dukeBox.getText().equals(\"\") : \"Duke\u0027s response cannot be empty\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return dukeBox;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 85
    }
  },
  {
    "path": "src/main/java/duke/main/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents the Duke object to start the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates a Duke object with an Ui object, storage object to the saved task list file in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * hard disk and a task list object being created after the saved task list file is saved."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * If the directory to the saved task list file is not found, an IOException error will be raised"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * and caught."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param fileName Name of the saved task list file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Duke(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.storage \u003d new Storage(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.tasks \u003d storage.formTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            System.out.println(error.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String greetingMessage \u003d ui.getGreetingMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ui.printToScreen(greetingMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.process(tasks, storage, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                ui.printError(dukeException);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the Duke\u0027s response with with respect to user\u0027s input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The input from the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return Duke\u0027s response to be displayed through the GUI."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getResponse(String userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String command \u003d Parser.getCommand(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleByeCommand(response, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleListCommand(response, ui, tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleDoneCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleDeleteCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleTodoCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleDeadlineCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleEventCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleFindCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"sort\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Processor.handleSortCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String errorMessage \u003d error.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            response.append(errorMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return response.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        new Duke(\"duke.txt\").run();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 89,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/main/Keyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents different available command to Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public enum Keyword {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    SORT(\"sort\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a value of keyword."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param keyword The keyword given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Keyword(String keyword) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Check whether a given command is a valid command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param inputKeyword Command input from the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if it is a valid command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidCommandException If the command is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValid(String inputKeyword) throws InvalidCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Keyword[] array \u003d Keyword.values();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Keyword keyword : array) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (keyword.keyword.equals(inputKeyword)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        throw new InvalidCommandException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 46
    }
  },
  {
    "path": "src/main/java/duke/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 8
    }
  },
  {
    "path": "src/main/java/duke/main/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Duke duke \u003d new Duke(\"duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 32
    }
  },
  {
    "path": "src/main/java/duke/main/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/cat.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ducky.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes the main window and prints out greeting message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.greeting();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void setStage(Stage s) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.stage \u003d s;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void greeting() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String greetLine \u003d \"Hi Master, Duke here\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        DialogBox greetDialog \u003d DialogBox.getDukeDialog(greetLine, dukeImage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dialogContainer.getChildren().addAll(greetDialog);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void exit(int duration) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(duration));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        delay.setOnFinished(event -\u003e this.stage.hide());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int secondToClose \u003d 2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.exit(secondToClose);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 80
    }
  },
  {
    "path": "src/main/java/duke/main/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.EmptyDateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.EmptyIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidDateFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidPriorityException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Reads and parses the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Reads next line of input from the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The next line that user inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String readNextLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether there is still input coming in."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if there is still next line and false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean hasNextLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the command keyword in the user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The string represents user\u0027s input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The keyword command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String getCommand(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return components[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the arguments of the user\u0027s input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The string represents the user\u0027s input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The arguments followed the command keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws EmptyTaskException when there is no task followed the command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String getArgs(String userInput) throws EmptyTaskException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new EmptyTaskException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return components[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the task index for done and delete command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The string represents the user\u0027s input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The task index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidIndexException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static int getIndexTask(String userInput) throws EmptyIndexException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (components.length \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new EmptyIndexException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return Integer.parseInt(components[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the task\u0027s description from the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The string represents the user\u0027s input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The task\u0027s description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws EmptyTaskException"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String findDescription(String userInput) throws EmptyTaskException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\"/\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (components[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new EmptyTaskException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return components[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the date and/or time for deadline and event tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The string represents user\u0027s input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param keyword Keyword to distinguish deadline and event tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The date and/or time for the task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws EmptyDateException"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String findTime(String userInput, String keyword) throws EmptyDateException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\"/\" + keyword + \" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (components.length \u003c 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new EmptyDateException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String timeAndPriority \u003d components[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String time \u003d timeAndPriority.split(\" /priority\")[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether the given date in the correct format of YYYY-MM-DD HH:mm (time is optional)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param time The input date time."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if the input date time is of correct format."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidDateFormatException when the date keyed in is in a wrong format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isValidDate(String time, boolean hasTime) throws InvalidDateFormatException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String correctFormatNoDate \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String correctFormatWithDate \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (hasTime) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                LocalDateTime.parse(time, DateTimeFormatter.ofPattern(correctFormatWithDate));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                LocalDate.parse(time, DateTimeFormatter.ofPattern(correctFormatNoDate));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (DateTimeException err) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new InvalidDateFormatException(false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether the user\u0027s input, other than containing date, contains time or not."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param time The input date time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if there is time included, false otherwise."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean hasTime(String time) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d time.split(\" \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return components.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether user input priority to the task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The input from the user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if user indicates the priority of the task, false otherwise."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean hasPriority(String userInput) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\"/priority \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return components.length \u003e 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static boolean isValidPriority(String priority) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return priority.equals(\"high\") || priority.equals(\"medium\") || priority.equals(\"low\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the string priority of the task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The input from the user."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The string representation of priority level."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidPriorityException When the input priority is not either high, medium or low."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static String getPriority(String userInput) throws InvalidPriorityException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\"/priority \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String priority \u003d components[1];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (isValidPriority(priority)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return priority;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new InvalidPriorityException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether the user wants to sort the task list based on the priority of the task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The input from the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if user wants to sort based on priority, false otherwise."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidCommandException When the command is invalid."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static boolean isSortedByPriority(String userInput) throws InvalidCommandException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (components.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (components[1].equals(\"priority\")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 203
    }
  },
  {
    "path": "src/main/java/duke/main/Processor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.DeadLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Handles the logic flow of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Processor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input bye command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleByeCommand(StringBuilder response, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String goodbyeMessage \u003d ui.getGoodByeMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(goodbyeMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        ui.printToScreen(goodbyeMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input list command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui       The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks    User\u0027s task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleListCommand(StringBuilder response, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String headerMessage \u003d \"Quack! Your list is here:\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String taskListInString \u003d ui.getFullList(headerMessage, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(taskListInString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static void checkIsValidIndex(int index, TaskList tasks) throws InvalidIndexException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.getSize()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new InvalidIndexException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input done command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException when the index is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleDoneCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int taskNumber \u003d Parser.getIndexTask(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkIsValidIndex(taskIndex, tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task task \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getMarkTaskAsDoneMessage(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input delete command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException when the index is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleDeleteCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int taskNumber \u003d Parser.getIndexTask(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        checkIsValidIndex(taskIndex, tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task deletedTask \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        tasks.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getDeleteTaskMessage(deletedTask, tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input todo command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException can be thrown when task description is empty."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleTodoCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String argument \u003d Parser.getArgs(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String taskDescription \u003d Parser.findDescription(argument);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasPriority \u003d Parser.hasPriority(userInput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String priority \u003d Parser.getPriority(userInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            task \u003d new ToDo(taskDescription, false, priority);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            task \u003d new ToDo(taskDescription, false, \"low\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getAddTaskMessage(task, tasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input deadline command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException can be thrown when the task description or the time is empty, or"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *                       date format is incorrect."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleDeadlineCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String argument \u003d Parser.getArgs(userInput);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String taskDescription \u003d Parser.findDescription(argument);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String deadLineTime \u003d Parser.findTime(argument, \"by\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // check whether time is included"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasTime \u003d Parser.hasTime(deadLineTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // check whether the date time format is correct"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Parser.isValidDate(deadLineTime, hasTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasPriority \u003d Parser.hasPriority(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task deadLine;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String priority \u003d Parser.getPriority(userInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            deadLine \u003d new DeadLine(taskDescription, deadLineTime, hasTime, false, priority);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            deadLine \u003d new DeadLine(taskDescription, deadLineTime, hasTime, false, \"low\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        tasks.addTask(deadLine);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getAddTaskMessage(deadLine, tasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input event command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException can be thrown when the task description or the time is empty, or"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *                       date format is incorrect."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleEventCommand("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String argument \u003d Parser.getArgs(userInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String taskDescription \u003d Parser.findDescription(argument);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String eventTime \u003d Parser.findTime(argument, \"at\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // check whether time is included"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasTime \u003d Parser.hasTime(eventTime);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        // check whether the date time format is correct"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Parser.isValidDate(eventTime, hasTime);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasPriority \u003d Parser.hasPriority(userInput);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task event;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String priority \u003d Parser.getPriority(userInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            event \u003d new Event(taskDescription, eventTime, hasTime, false, priority);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            event \u003d new Event(taskDescription, eventTime, hasTime, false, \"low\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getAddTaskMessage(event, tasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input find command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException can be thrown when the task description or the time is empty, or"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *                       date format is incorrect."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleFindCommand("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String keyword \u003d Parser.getArgs(userInput);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        TaskList correspondTaskList \u003d tasks.findTaskWithKeyword(keyword);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d ui.getMatchingList(correspondTaskList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        response.append(message);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Handles the case when user input sort command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param userInput Input from the user."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param response  Duke\u0027s response to user\u0027s input."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui        The UI that handles interaction between Duke and user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks     User\u0027s task list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws InvalidCommandException When the command given is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void handleSortCommand("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput, StringBuilder response, Ui ui, TaskList tasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (Parser.isSortedByPriority(userInput)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            TaskList sortedList \u003d tasks.sortPriority();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String headerMessage \u003d \"Quack! Here is your task list sorted based on priority:\\n\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String message \u003d ui.getFullList(headerMessage, sortedList);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            response.append(message);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            TaskList sortedList \u003d tasks.sortDescription();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String headerMessage \u003d \"Quack! Here is your task list sorted alphabetically:\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String message \u003d ui.getFullList(headerMessage, sortedList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            response.append(message);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static boolean isValidCommand(String command) throws InvalidCommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (Keyword.isValid(command)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Processes the run of the program."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks   The user\u0027s task list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param storage The storage storing the user\u0027s saved task list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param ui      UI that handles interaction with user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws DukeException Exception can be thrown due to multiple reasons, such as"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *                       invalid command, empty task description, empty date or"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *                       wrong date format."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public static void process(TaskList tasks, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        while (Parser.hasNextLine()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String userInput \u003d Parser.readNextLine();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String command \u003d Parser.getCommand(userInput);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            isValidCommand(command);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleByeCommand(response, ui);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleListCommand(response, ui, tasks);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleDoneCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleDeleteCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleTodoCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleDeadlineCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleEventCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleFindCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else if (command.equals(\"sort\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                handleSortCommand(userInput, response, ui, tasks);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            storage.writeTasks(tasks);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            ui.printToScreen(response.toString());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 275
    }
  },
  {
    "path": "src/main/java/duke/main/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.DeadLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Saves the tasks in the hard disk automatically whenever the task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * changes and loads the data from the hard disk when Duke starts up."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String FOLDER_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private final String storagePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a Storage object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param fileName Name of the saved file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.storagePath \u003d FOLDER_PATH + fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Writes text to the saved file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param textToAdd Text to be added into the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private void writeToFile(String textToAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(storagePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fileWriter.write(textToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            System.out.println(err);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Writes the content of the task list to the saved file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param taskList The task list such that its details are copied in the saved file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void writeTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String taskStorageString \u003d task.getStorageString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            data.append(taskStorageString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        writeToFile(data.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Reads the file and forms a list of individual string representations of tasks in the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return A list of string representation of tasks in the saved file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws IOException when the directory to the saved file is not found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public List\u003cString\u003e readStorageFile() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        File folder \u003d new File(this.FOLDER_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        File file \u003d new File(this.storagePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            folder.mkdirs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new IOException(\"Folder data does not exist\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (folder.exists() \u0026\u0026 !file.isFile()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new IOException(\"duke.txt does not exist\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Converts the string representation of task in the saved file to a task object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param savedTask String representation of task in the saved file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The corresponding task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws IOException when the folder or the saved file cannot be found."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private Task translateStringToTask(String savedTask) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert !savedTask.equals(\"\") : \"Saved task string cannot be empty\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] components \u003d savedTask.split(\" \\\\| \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String command \u003d components[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean isDone \u003d components[1].equals(\"\\u2713\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String description \u003d components[2];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String timeNotProcessed \u003d components.length \u003d\u003d 4 ? \"\" : components[3];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasTime \u003d timeNotProcessed.contains(\"T\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String timeProcessed \u003d timeNotProcessed.replace(\"T\", \" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String priority \u003d components.length \u003d\u003d 5 ? components[4] : components[3];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (command.equals(\"T\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new ToDo(description, isDone, priority);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (command.equals(\"E\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new Event(description, timeProcessed, hasTime, isDone, priority);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (command.equals(\"D\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return new DeadLine(description, timeProcessed, hasTime, isDone, priority);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            throw new IOException(\"Saved task is invalid\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Reads from the saved file and creates the task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return Task list that contains all the tasks in the saved file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @throws IOException when the directory to the saved file is not found."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskList formTaskList() throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cString\u003e taskListInString \u003d this.readStorageFile();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (String taskInString : taskListInString) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            // check whether the current line is the end of file\u0027s line"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (!taskInString.equals(\"\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Task task \u003d this.translateStringToTask(taskInString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                assert task !\u003d null : \"Task does not exist\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                tasks.addTask(task);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 135
    }
  },
  {
    "path": "src/main/java/duke/main/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Deals with the interaction and prints information to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private static final String INDENTATION \u003d \"    \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void printToScreen(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Prints greetings to users upon opening Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getGreetingMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d \"Quackkk! Duke reporting for duty\\nWhat can I do for you master?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return logo + message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets farewell message to the users when they exits Duke program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getGoodByeMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"Bye Master. Hope to see you again soon! QUACK QUACK!!!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Adds indentation to the message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param message The message to be indented."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The indented message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String indentMessage(String message) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return INDENTATION + message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Adds line break to the end of the message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param message The message string to be added a line break."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message with a line break at the end of the string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String addLineBreak(String message) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return message + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Builds a complete message from multiple small messages."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param strings String array contains all the small messages."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The final complete message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String buildMessage(String[] strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String message \u003d strings[i];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            result +\u003d addLineBreak(message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the response to users when they mark a task as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param task The task that is marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying user that the task is marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getMarkTaskAsDoneMessage(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String result \u003d \"QUACKK! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        result +\u003d indentMessage(task.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        result \u003d addLineBreak(result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the response to users when they modify the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param message Message to be included."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param task    The task that is being added/deleted from the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks   The task list of the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying the user of the current task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String taskListModify(String message, Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert task !\u003d null : \"task does not exist\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assert tasks !\u003d null : \"task list does not exist\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String newTaskListLength \u003d \"Master, you now have \" + tasks.getSize() + \" items in the list! Quack! Quack!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String taskDescription \u003d indentMessage(task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] strings \u003d {message, taskDescription, newTaskListLength};"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String finalMessage \u003d buildMessage(strings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return finalMessage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the messages to the user when they add a task to the task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param task  The task to be added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks The user\u0027s task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying the user that the task is successfully added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *         to the task list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getAddTaskMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return taskListModify(\"Quack Quack Quack. I\u0027ve added this task: \", task, tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the messages to the user when they delete a task from the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param task  The task to be deleted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks The user\u0027s task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying the user that a task is successfully deleted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *         from the task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getDeleteTaskMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return taskListModify(\"Quackkk. I\u0027ve removed this task for you: \", task, tasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the message which is the task list containing all the tasks having a certain keyword."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks Task list that contains all the tasks having a certain keyword."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying the user of the tasks that contain the particular keyword."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getMatchingList(TaskList tasks) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String messageWhenMatch \u003d \"Quack Quack! Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String messageNoMatch \u003d \"Quack :\u0027( There\u0027s no matching task in the list:\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int numOfTasks \u003d tasks.getSize();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        boolean hasMatch \u003d numOfTasks !\u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTasks; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int taskNumber \u003d i + 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String taskDetail \u003d tasks.getTask(i).toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String taskDetailWithLineBreak \u003d addLineBreak(taskDetail);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            messageWhenMatch \u003d messageWhenMatch + indentMessage(taskNumber + \".\" + taskDetailWithLineBreak);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return hasMatch ? messageWhenMatch : messageNoMatch;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Returns the message containing the full task list to the user."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param tasks The user\u0027s task list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The message notifying user of the current task list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getFullList(String header, TaskList tasks) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String message \u003d header;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        int numOfTasks \u003d tasks.getSize();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTasks; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int taskNumber \u003d i + 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String taskDetail \u003d tasks.getTask(i).toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String taskDetailWithLineBreak \u003d addLineBreak(taskDetail);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            message \u003d message + indentMessage(taskNumber + \".\" + taskDetailWithLineBreak);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Prints out error to the user when an error is met."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param error The error to be printed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void printError(DukeException error) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        printToScreen(error.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 173
    }
  },
  {
    "path": "src/main/java/duke/task/DeadLine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class DeadLine extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDate deadLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDateTime deadLineWithTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param time        Date/Time of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param hasTime     Whether there is a specified time for the deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param isDone      Whether the deadline is finished or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param priority    Priority level of the deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public DeadLine("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String description, String time, boolean hasTime, boolean isDone, String priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!hasTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.deadLine \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.deadLineWithTime \u003d LocalDateTime.parse(time, format);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the string representation of the event task to be stored in the data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return String representation of the event task in the data file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"D | \" + this.getStatusIcon() + \" | \" + this.description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \" | \" + this.deadLine + \" | \" + this.priority.toString() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String datePrintFormat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (deadLine !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            datePrintFormat \u003d deadLine.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            datePrintFormat \u003d deadLineWithTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"[D][\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + this.description + \" (by: \" + datePrintFormat + \")\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \" (Priority: \" + this.priority.toString() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDate eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes an event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param time        Date/Time that the event takes place."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param hasTime     Whether there is a specified time for the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param isDone      Whether the event is done or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param priority    Priority level of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Event("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            String description, String time, boolean hasTime, boolean isDone, String priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (!hasTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.eventTime \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.time \u003d LocalDateTime.parse(time, formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the string representation of the event task to be stored in the data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return String representation of the event task in the data file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"E | \" + this.getStatusIcon() + \" | \" + this.description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            + \" | \" + this.time + \" | \" + this.priority.toString() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String timeFormat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (eventTime !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            timeFormat \u003d eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            timeFormat \u003d time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int hour \u003d time.getHour();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int min \u003d time.getMinute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            timeFormat +\u003d \" \" + hour + \":\" + (min \u003c 10 ? \"0\" : \"\") + min;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"[E][\" + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + this.description + \" (at: \" + timeFormat + \")\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \" (Priority: \" + this.priority.toString() + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents the different level of priority of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    HIGH(\"high\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    MEDIUM(\"medium\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    LOW(\"low\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    Priority(String priority) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the integer equivalence of a priority for ease of comparision."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The number corresponds to the priority level of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int getEquivalentNumber() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (this.priority.equals(\"high\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (this.priority.equals(\"medium\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a task with a description, whether the task is done and the priority level."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a task with only description given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The task\u0027s finishing status and priority level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * will be set to false and low respectively by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a task with description and finishing status given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * The task\u0027s priority level will be set to low by default."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param isDone      Boolean to indicate whether the task is finished."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a task with description, finishing status and priority level given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param isDone      Boolean to indicate whether the task is finished."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param priority    Priority level of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task(String description, boolean isDone, String priority) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (priority.equals(\"high\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else if (priority.equals(\"medium\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the finishing status icon of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return ✗ if the task has not been finished."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *         ✓ if the task is finished."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        //return ✓ or ✗ symbols"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Checks whether the description of the task contains a certain keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param keyword The keyword to be found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return True if the task description contains that word and false otherwise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean hasKeyword(String keyword) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String[] strings \u003d this.description.split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (String word : strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (keyword.equals(word)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (obj instanceof Task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                Task otherTask \u003d (Task) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return otherTask.getDescription().equals(this.description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the string representation of the task to be stored in the data file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return String representation of the task in the data file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public abstract String getStorageString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 120
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents the task list contains the user\u0027s tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    private TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets a task corresponding to its index in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The corresponding task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the number of tasks in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The number of tasks in the user\u0027s task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The user\u0027s task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Forms a new task list object containing all the tasks with the given keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param keyword The keyword from the user\u0027s input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return A new task list object with all the tasks contaning that keyword."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskList findTaskWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e taskWithKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                taskWithKeyword.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new TaskList(taskWithKeyword);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Removes a task from the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param index Index of the task to be deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task taskToBeDeleted \u003d taskList.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        taskList.remove(taskToBeDeleted);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Get the task list that is sorted alphabetically."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The task list that is sorted based on the alphabetical order of the tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskList sortDescription() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e sortedList \u003d new ArrayList\u003c\u003e(this.taskList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        sortedList.sort((task1, task2) -\u003e task1.getDescription().compareTo(task2.getDescription()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new TaskList(sortedList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Get the task list that is sorted based on the priority level."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The task list that is sorted based on the priority level of the tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public TaskList sortPriority() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        List\u003cTask\u003e sortedList \u003d new ArrayList\u003c\u003e(this.taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        sortedList.sort((task1, task2) -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                task1.getPriority().getEquivalentNumber() - task2.getPriority().getEquivalentNumber());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return new TaskList(sortedList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String result \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            int taskNumber \u003d i + 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            result \u003d result + taskNumber + \".\" + taskList.get(i).toString()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                    + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 116
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Initializes a ToDo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param isDone      Whether the task is finished or not."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @param priority    Priority level of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public ToDo(String description, boolean isDone, String priority) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * Gets the string representation of the task to be stored in the data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     * @return The string representation of the task to be stored in the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"T | \" + this.getStatusIcon() + \" | \" + this.description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \" | \" + this.priority.toString() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                + \" (Priority: \" + this.priority.toString() + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 35
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"5\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" maxHeight\u003d\"Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"520.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"anchor\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.main.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"SEND\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        \u003cURL value\u003d\"@demo.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.main.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void hasTime_reallyHasTime_returnsTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertTrue(Parser.hasTime(\"2020-10-08 12:00\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void hasTime_doesNotHaveTime_returnsFalse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertFalse(Parser.hasTime(\"2020-10-08\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 18
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void markAsDone_markUnfinishedTaskAsDone_returnsTick() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task task \u003d new ToDo(\"test\", false, \"low\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2713\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    public void getDescription_getDescriptionOfLegitimateTask_correctDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        Task task \u003d new ToDo(\"return home\", false, \"high\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "        assertEquals(description, \"return home\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "todo play dota"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "todo reply CS2101 meeting email"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "event free flow BBQ dinner /at Monday 4-6pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "deadline finish CS2103 assignment /by Friday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "event /by Monday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "deadline read 2103 textbook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ducbinh2611"
        },
        "content": "java -classpath ../bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ducbinh2611": 3,
      "-": 37
    }
  }
]
