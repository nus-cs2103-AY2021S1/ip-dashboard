[
  {
    "path": "data/gel.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "D,1,asdfasdf,2020-07-30T23:41"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "D,0,asdfasdf,2020-03-03T11:43"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "T,0,asdfasdfa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "E,1,sdfasd;glkjs;dfl,2020-03-19T21:43"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "E,0,asdfasdf,1997-07-30T11:00"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 4
    }
  },
  {
    "path": "src/main/java/Gel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Gel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Gel (String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            taskList \u003d storage.load(ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // initialise list and scanner"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            storage.checkFileExistence();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.parseUserInput(sc, storage, ui, taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        new Gel(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 43
    }
  },
  {
    "path": "src/main/java/gel/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static LocalDateTime toDateTime(String dateTime) throws GelException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] dateTimeSplit \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (dateTimeSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your datetime has an invalid format... please use\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD HHMM\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] date \u003d dateTimeSplit[0].split(\"-\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your date has an invalid format... please use\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your time has an invalid format... please use\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:HHMM\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int dayOfMonth \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return LocalDateTime.of(year, month, dayOfMonth, hour, minute);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Please make sure that your date and time \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \"are numbers within the calendar and 24 hour clock\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static void parseUserInput(Scanner sc, Storage storage, Ui ui, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        label:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String keyword \u003d inputArr[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                switch (keyword) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"bye\": { //bye"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    storage.updateFile(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    ui.farewellMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"list\": { //list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.showListOfTask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"done\": { //done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.doneTask(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"delete\": { //delete"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yo tell me what you want to delete la\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        taskList.deleteTask(inputArr[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yoyoyo please input a valid number after delete\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"deadline\": {//deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String checkBy \u003d dateDetails[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        if (!checkBy.equals(\"/by\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you left out the deadline\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addDeadline(input, dateIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"event\": {//event"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String checkAt \u003d dateDetails[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        if (!checkAt.equals(\"/at\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you left out the event date\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addEvent(input, dateIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"todo\": {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yo tell me what you want todo\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addTodo(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } catch (GelException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 121
    }
  },
  {
    "path": "src/main/java/gel/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int fileIndex \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.directoryPath \u003d filePath.substring(0, fileIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void checkFileExistence() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File dataDir \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            boolean bool \u003d dataDir.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (bool) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(\"data directory successfully created\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(\"Failed to create data directory\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        boolean newFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void updateFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        List\u003cTask\u003e listOfTask \u003d taskList.getListOfTask();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (Task task : listOfTask) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                isDone \u003d \"1,\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                isDone \u003d \"0,\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"T,\" + isDone + task.getDescription());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"E,\" + isDone + task.getDescription() + \",\" + ((Event) task).getAt());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"D,\" + isDone + task.getDescription() + \",\" + ((Deadline) task).getBy());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public TaskList load(Ui ui) throws FileNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        TaskList taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String description \u003d sc.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String[] desArr \u003d description.split(\",\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            switch (desArr[0]){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addTodoFromFile(desArr[2], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addDeadlineFromFile(desArr[2], desArr[3], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addEventFromFile(desArr[2], desArr[3], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 84
    }
  },
  {
    "path": "src/main/java/gel/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private List\u003cTask\u003e listOfTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public TaskList(Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void showListOfTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.showListOfTask(this.listOfTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void doneTask(String input) throws GelException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int index \u003d Integer.parseInt(input.substring(5)) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (index \u003e\u003d listOfTask.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Please input a valid number from 1 - \" + listOfTask.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Task taskToBeDone \u003d listOfTask.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        taskToBeDone.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(index, taskToBeDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.markTaskAsDoneMsg(taskToBeDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void deleteTask(String deleteNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(deleteNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Task taskToBeDeleted \u003d listOfTask.remove(taskNo - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.taskRemoveMsg(taskToBeDeleted, listOfTask.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addDeadline(String input, int dateIndex) throws GelException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String by \u003d input.substring(dateIndex + 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(9, dateIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime byDateTime \u003d Parser.toDateTime(by);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, byDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.addTaskToListMsg(deadline, listOfTask.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addEvent(String input, int dateIndex) throws GelException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String at \u003d input.substring(dateIndex + 4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(6, dateIndex - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime atDateTime \u003d Parser.toDateTime(at);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Event event \u003d new Event(description, atDateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.addTaskToListMsg(event, listOfTask.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addTodo(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(todo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ui.addTaskToListMsg(todo, listOfTask.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addTodoFromFile(String description, int done) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(todo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addEventFromFile(String description, String at, int done) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(at);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Event event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addDeadlineFromFile(String description, String by, int done) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(by);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.add(deadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public List\u003cTask\u003e getListOfTask() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.listOfTask;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 97
    }
  },
  {
    "path": "src/main/java/gel/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    Lol... did not manage to load storage data...\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Gel\\n    What do you want from me?\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void farewellMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"\\n    Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addTaskToListMsg(Task task, int numberOfItems) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"\\n    Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"      \" + task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    Now you have \" + numberOfItems + \" task(s) in the list.\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void taskRemoveMsg(Task task, int numberOfItemsLeft) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"\\n    Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    \" + task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    Now you have \" + numberOfItemsLeft + \" task(s) in the list.\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void markTaskAsDoneMsg(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"\\n    Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"    \" + task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void showListOfTask(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(\"\\n    Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            System.out.println(\"    \" + i + \".\" + task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 47
    }
  },
  {
    "path": "src/main/java/gel/exception/GelException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class GelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public GelException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"\\n    LOL! Please use the bye tag if you wanna waste my time \");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public GelException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"\\n\" + msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 12
    }
  },
  {
    "path": "src/main/java/gel/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.byString \u003d by.format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HH:mm\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byString + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 25
    }
  },
  {
    "path": "src/main/java/gel/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String atString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.atString \u003d at.format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HH:mm\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + atString + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 25
    }
  },
  {
    "path": "src/main/java/gel/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return (done ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return this.getStatusIcon() + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + this.getDescription();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 33
    }
  },
  {
    "path": "src/main/java/gel/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Todo (String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 13
    }
  },
  {
    "path": "src/test/java/gel/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidDateTimeFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"20200307234\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your datetime has an invalid format... please use\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD HHMM\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidDateFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"2020-0307 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your date has an invalid format... please use\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidTimeFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"2020-03-07 235959\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your time has an invalid format... please use\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            + \" the format:HHMM\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 50
    }
  },
  {
    "path": "src/test/java/gel/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void doneTask_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).doneTask(\"done 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Please input a valid number from 1 - 0\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void deleteTask_nonNumberInput_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).deleteTask(\"a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"For input string: \\\"a\\\"\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addDeadline_invalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).addDeadline(\"deadline test /by 2020-30-58 2500\", 18);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n    Please make sure that your date and time \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \"are numbers within the calendar and 24 hour clock\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "deadline asdf /by sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 1,
      "-": 37
    }
  }
]
