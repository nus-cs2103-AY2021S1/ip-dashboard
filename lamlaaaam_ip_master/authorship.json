[
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates the different types of commands in an Enum."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Includes an invalid command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    INVALID"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 15
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates a deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Holds the date of the deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param name Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param by Deadline of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid date format is used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Deadline(String name, String by) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Invalid date format. Use yyyy-mm-dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses a split serialized string from saved data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param split Serialized string split by the \"|\" delimiter."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Deadline task, or null if save file is corrupted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Deadline parse(String[] split) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Deadline deadline \u003d new Deadline(split[2], split[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                deadline.markDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Serializes the task into a string to be saved."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Serialized string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"D|\" + super.serialize() + \"|\" + this.by;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the string representation of the deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 68
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates the main Duke program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Member variables that make up the main Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private DukeSaver saver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Starts Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructor for the Duke object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param savePath Directory path to the save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Duke(String savePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        saver \u003d new DukeSaver(savePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        parser \u003d new Parser(ui, taskList, saver);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Holds the main driver code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        saver.loadData(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            String response \u003d ui.prompt();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                parser.handleResponse(response);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                ui.print(ex.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "lamlaaaam": 46
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates a custom exception for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 8
    }
  },
  {
    "path": "src/main/java/DukeSaver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates the saving system for tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class DukeSaver {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Holds the path to the saved data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private String savePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructor for the save system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param savePath Path to the save file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public DukeSaver(String savePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.savePath \u003d savePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        initSaveDir();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Initializes the directory and save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * If already exists, does not do anything."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void initSaveDir() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            File saveFile \u003d new File(this.savePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            saveFile.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Serializes all the tasks in the list and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * saves them in the save file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void saveData(TaskList taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            FileWriter fw \u003d new FileWriter(savePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                fw.write(task.serialize() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses all the lines in the save file into tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Loads all the tasks into the task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param taskList The list of tasks (technically empty)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void loadData(TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            File saveFile \u003d new File(savePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Scanner sc \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                taskList.addTask(Task.parse(line));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 76
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates an event task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Holds the date of the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param name Name of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param at Date of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid date format is used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Event(String name, String at) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Invalid date format. Use yyyy-mm-dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses a split serialized string from saved data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param split Serialized string split by the \"|\" delimiter."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Event task, or null if save file is corrupted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Event parse(String[] split) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            Event event \u003d new Event(split[2], split[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                event.markDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Serializes the task into a string to be saved."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Serialized string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"E|\" + super.serialize() + \"|\" + this.at;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the string representation of the event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 68
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates the parsing system for user commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Duke components required when handling user commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private DukeSaver saver;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructor for parsing system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param ui Duke\u0027s UI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param saver Saving system."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Parser(UI ui, TaskList taskList, DukeSaver saver) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.saver \u003d saver;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles a user command and designates task to helper functions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param response User\u0027s command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid commands are invoked."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void handleResponse(String response) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] parsedResponse \u003d response.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            command \u003d Command.valueOf(parsedResponse[0].toUpperCase());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            command \u003d Command.INVALID;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String rest \u003d parsedResponse.length \u003d\u003d 1 ? null : parsedResponse[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            saver.saveData(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ui.exit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleDone(rest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleTodo(rest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleDeadline(rest);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleEvent(rest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleDelete(rest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            handleFind(rest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case INVALID:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Unrecognized command!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the \"list\" command by iterating through all"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * tasks in the list and building a string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Prints the final string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ui.print(\"You have no tasks!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); ++i) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            sb.append((i + 1) + \".\" + taskList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(sb.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the \"done\" command by looking for the task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * at the index and marking it as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest The remaining string after the key command \"done\"."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid format used."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleDone(String rest) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Specify a task!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        int taskDone;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            taskDone \u003d Integer.parseInt(rest) - 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Specify a valid task number!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (taskDone \u003c 0 || taskDone \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"No such task!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.markTaskDone(taskDone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskDone));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the creation of a Todo task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest The remaining string after the key command \"todo\"."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid format used."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleTodo(String rest) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Description of a todo cannot be empty!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Todo todo \u003d new Todo(rest);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\\n\" + todo + \"\\n\" + taskList.taskSizeString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the creation of a Deadline task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest The remaining string after the key command \"deadline\"."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid format used."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleDeadline(String rest) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Description of a deadline cannot be empty!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] deadlineParsed \u003d rest.split(\"/\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (deadlineParsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Prefix the keyword \u0027by\u0027 with a forward slash!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String deadlineName \u003d deadlineParsed[0].trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] byParsed \u003d deadlineParsed[1].split(\" \", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (byParsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Deadline due time cannot be empty!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String by \u003d byParsed[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineName, by);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\\n\" + deadline + \"\\n\" + taskList.taskSizeString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the creation of an Event task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest The remaining string after the key command \"event\"."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid format used."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleEvent(String rest) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Description of an event cannot be empty!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] eventParsed \u003d rest.split(\"/\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (eventParsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Prefix the keyword \u0027at\u0027 with a forward slash!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String eventName \u003d eventParsed[0].trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] atParsed \u003d eventParsed[1].split(\" \", 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (atParsed.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Event time cannot be empty!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String at \u003d atParsed[1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Event event \u003d new Event(eventName, at);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\\n\" + event + \"\\n\" + taskList.taskSizeString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the deletion of a task."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest The remaining string after the key command \"delete\", which is index of task."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when invalid format used."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleDelete(String rest) throws DukeException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Specify a task!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(rest) - 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Specify a valid task number!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (deleteIndex \u003c 0 || deleteIndex \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"No such task!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Task taskToDelete \u003d taskList.get(deleteIndex);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.deleteTask(deleteIndex);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(\"Noted. I\u0027ve removed this task:\\n\" + taskToDelete + \"\\n\" + taskList.taskSizeString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Handles the \"find\" command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param rest Remaining string after the \"find\" command, which is query term."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @throws DukeException Thrown when no search term is given."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private void handleFind(String rest) throws DukeException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (rest \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            throw new DukeException(\"Specify a search term!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cTask\u003e matches \u003d taskList.search(rest);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (matches.isEmpty()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            ui.print(\"No matching task.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (int i \u003d 0; i \u003c matches.size(); ++i) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            sb.append((i + 1) + \".\" + matches.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        sb.setLength(sb.length() - 1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        ui.print(sb.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 231
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates a task which other specific tasks extend from."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Member variables holding name and status of task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructor to create a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Serializes the task into a string to be saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Serialized string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return (this.isDone ? \"1\" : \"0\") + \"|\" + this.name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Retrieves name of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses a serialized string by checking the first letter for type."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Designates the parsing to the appropriate class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param serial The serialized string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return The task object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Task parse(String serial) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Character type \u003d serial.charAt(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String[] split \u003d serial.split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return Todo.parse(split);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return Event.parse(split);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            return Deadline.parse(split);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the string representation of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"[\" + (this.isDone ? \"✓\" : \"✘\") + \"] \" + this.name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 77
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates a task list to hold all current tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Implements using a Java List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Constructor to initialize the list using ArrayList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Gets the list object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return List object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Checks if task list is empty."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return True if list is empty, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return taskList.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns size of task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Size."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Retrieves task object at given index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param index Index of task to be retrieved."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return The corresponding task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Formats the list size to be used for display purposes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Formatted string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String taskSizeString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"Now you have \" + taskList.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Searches the list for tasks that contain search query."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param query Term to be searched."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return List of matching tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public List\u003cTask\u003e search(String query) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        List\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            if (task.getName().contains(query)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Marks a given task as completed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param taskNum Index of task to be marked."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void markTaskDone(int taskNum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Task task \u003d taskList.get(taskNum);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 110
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates a Todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Creates a todo task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Parses a split serialized string from saved data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param split Serialized string split by the \"|\" delimiter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Todo task, or null if save file is corrupted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public static Todo parse(String[] split) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Todo todo \u003d new Todo(split[2]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        if (split[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "            todo.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Serializes the task into a string to be saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return Serialized string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String serialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"T|\" + super.serialize();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Returns the string representation of the todo task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 47
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " * Encapsulates the user interface which user uses to interact with Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Duke\u0027s logo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                              + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                              + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                              + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "                              + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Input system using Java\u0027s scanner."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    private final String DIVIDER \u003d \"______________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Gives the user a prompt to input commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @return The user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public String prompt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.out.print(\"\u003e\u003e \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String response \u003d in.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Prints the given message between dividers."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String greeting \u003d \"Hi! I am\\n\" + LOGO + \"\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     * Exits the program with farewell message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String goodbye \u003d \"Bye! Hope to see you again!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        print(goodbye);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 61
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Task task \u003d new Task(\"test name\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(\"[✘] test name\", task.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void markDoneTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Task task \u003d new Task(\"sample task\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(\"[✓] sample task\", task.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void serializeTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        Task task \u003d new Task(\"another task\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(\"0|another task\", task.serialize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseValidTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String serial \u003d \"T|1|valid task\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(\"[T][✓] valid task\", Task.parse(serial).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    public void parseInvalidTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        String serial \u003d \"K|0|invalid task\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "        assertEquals(null, Task.parse(serial));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lamlaaaam": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "lamlaaaam": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamlaaaam"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "lamlaaaam": 1
    }
  }
]
