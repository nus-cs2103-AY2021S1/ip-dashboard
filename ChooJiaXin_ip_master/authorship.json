[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidIndexNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidUserCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a chatbot that maintains a task list for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Constructs a new Duke object which will create and access the saved task list at a pre-defined"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * filepath."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.storage \u003d new Storage(\"data/tasks\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            this.tasks \u003d storage.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns the response generated by the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Response generated depending on the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return Parser.parseCommands(input, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (InvalidUserCommandException | TaskDoesNotExistException | InvalidIndexNumberException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the saved task list and standard greeting message when the program starts up."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Currently saved task list and greetings from Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String getGreetings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String greetings \u003d ui.loadTaskList(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        greetings +\u003d ui.showGreetings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return greetings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Determines whether the user has entered the exit command to close the program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return True if user has entered the exit command, otherwise returns false."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean canExitProgram() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return ui.hasExited();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 65,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidIndexNumberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidUserCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Processes user commands to determine the appropriate course of action to display the correct"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * response by Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String DEADLINE_TASK_SEPARATOR \u003d \"/by \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String EVENT_TASK_SEPARATOR \u003d \"/at \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Processes user commands to determine the appropriate actions needed to display the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * appropriate output."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param userCommand User input command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which handles the printing the appropriate output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage which handles the loading and saving of task lists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws InvalidUserCommandException If a user command is not recognized by the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static String parseCommands(String userCommand, Ui ui, Storage storage) throws InvalidUserCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (UserCommands.EXIT.getCommandWord().equals(userCommand)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } else if (UserCommands.LIST.getCommandWord().equals(userCommand)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Load the saved TaskList from the storage and display it"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return ui.showTaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } catch (StorageException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Unable to load saved TaskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // For multi-word user commands"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Extract the first word of the user command to obtain the type of user command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] commandDetails \u003d userCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Contains type of user command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String command \u003d commandDetails[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                if (UserCommands.TODO.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return addTodo(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else if (UserCommands.DEADLINE.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return addDeadline(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else if (UserCommands.EVENT.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return addEvent(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else if (UserCommands.DELETE.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return deleteTask(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else if (UserCommands.DONE.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return markTaskAsDone(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else if (UserCommands.FIND.getCommandWord().equals(command)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return searchTaskListForKeyword(commandDetails[1], ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    // User commands is not recognized by the system"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    throw new InvalidUserCommandException(ui.showInvalidUserCommand(userCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // If user input only consists of the type of command but no other details"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new InvalidUserCommandException(ui.showInvalidUserCommand(userCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Adds a new todo task to the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param todo Description of new todo task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays a new todo has been added to the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage that loads the old task list and saves the updated task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String addTodo(String todo, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Todo newTodoTask \u003d new Todo(todo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            tasks.addNewTask(newTodoTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showAddedNewTaskMessage(newTodoTask, storage.load());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Unable to load or save task list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Adds a new task with a deadline to the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param deadline Description of new task with the deadline date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays a new deadline has been added to the task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage that loads the old task list and saves the updated task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String addDeadline(String deadline, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] deadlineInformation;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Retrieve deadline description and deadline date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            deadlineInformation \u003d deadline.split(DEADLINE_TASK_SEPARATOR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String description \u003d deadlineInformation[0];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String deadlineDate \u003d TaskDate.getDate(deadlineInformation[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Deadline newDeadlineTask \u003d new Deadline(description, deadlineDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            tasks.addNewTask(newDeadlineTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showAddedNewTaskMessage(newDeadlineTask, storage.load());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Unable to load or save task list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Adds a new event task to the task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param event Description of new event with event date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays a new event has been added to the task list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage that loads the old task list and saves the updated task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String addEvent(String event, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] eventInformation;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Retrieve event description and event date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            eventInformation \u003d event.split(EVENT_TASK_SEPARATOR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String description \u003d eventInformation[0];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String eventDate \u003d TaskDate.getDate(eventInformation[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Event newEventTask \u003d new Event(description, eventDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            tasks.addNewTask(newEventTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showAddedNewTaskMessage(newEventTask, storage.load());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Unable to load or save task list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Deletes the specified task from the task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param taskToDelete List index of the task to be deleted."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays that the task has been deleted to the task list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage that loads the old task list and saves the updated task list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String deleteTask(String taskToDelete, Ui ui, Storage storage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            int index \u003d parseTaskIndex(taskToDelete);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Checks if index is valid"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (index \u003e 0 \u0026\u0026 index \u003c\u003d tasks.getTotalNumberOfTasks()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Task deletedTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                tasks.deleteTask(index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                storage.save(tasks, ui);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return ui.showDeleteTaskMessage(deletedTask, storage.load());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // If task specified does not exist in the task list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new TaskDoesNotExistException(index);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // If index specified by users is not a number or task list fails to load or save"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (InvalidUserCommandException | StorageException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Processes the list index in the user command and returns the numerical value of the task"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * index as an integer. If a non-numerical number is found, an exception is thrown."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param inputIndex List index indicated in the user command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Integer value of list index."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws InvalidIndexNumberException If inputIndex is not an integer."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static int parseTaskIndex(String inputIndex) throws InvalidIndexNumberException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            int index \u003d Integer.parseInt(inputIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Unable to convert inputIndex from String to an int"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new InvalidIndexNumberException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param taskToMarkDone List index of the task to be marked as done."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays the specified task has been marked as done."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage Local storage that loads the old task list and saves the updated task list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String markTaskAsDone("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String taskToMarkDone, Ui ui, Storage storage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            int index \u003d parseTaskIndex(taskToMarkDone);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Checks if index is valid"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (index \u003e 0 \u0026\u0026 index \u003c\u003d tasks.getTotalNumberOfTasks()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Task doneTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Task has already been marked as done"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                if (doneTask.hasDoneStatus()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return ui.showAlreadyMarkDoneMessage(doneTask);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    doneTask.markAsDone();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    tasks.updateTaskList(doneTask, index);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    storage.save(tasks, ui);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    return ui.showMarkDoneMessage(doneTask);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // If task specified does not exist in the task list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new TaskDoesNotExistException(index);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // If index specified by users is not a number or task list fails to load or save"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (InvalidUserCommandException | StorageException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Finds all the tasks in the task list that contains the keyword."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param keyword Keyword found in the filtered tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface which displays the filtered tasks."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param storage ocal storage that loads the saved task list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String searchTaskListForKeyword(String keyword, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList tasks \u003d storage.load();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            List\u003cTask\u003e tasksContainingKeyword \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.getTotalNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                boolean containsKeyword \u003d task.toString().contains(keyword);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                if (containsKeyword) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    tasksContainingKeyword.add(task);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            TaskList filteredTaskList \u003d new TaskList(tasksContainingKeyword);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showFilteredByKeywordTaskList(filteredTaskList, keyword);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            return ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 264
    }
  },
  {
    "path": "src/main/java/duke/command/TaskDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidTaskDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class TaskDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Processes the date of and time indicated in user commands and converts it into another form."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Input date is of the form \"yyyy-MM-dd\" and is converted into \"dd MMM yyyy\" form."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Input time follows the 24-hour clock system and of the form \"HH:mm\". It is converted into"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * \"hh:mm aa\" form, which follows the 12-hour clock. The day of the week is returned along with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * the converted date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * For example, given input date and time \"2020-01-01 18:00\", \"1 Jan 2020, Wednesday 06:00 PM\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * would be returned."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param userInput Date and time of deadline or event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Date of form \"d MMM yyyy\", time of form \"hh:mm aa\" (12-hour clock) and day of the week."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws InvalidTaskDateException If input date and time do not match the format or are invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    protected static String getDate(String userInput) throws InvalidTaskDateException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, EEEE hh:mm a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String taskDateOutput \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            LocalDateTime taskDate \u003d LocalDateTime.parse(userInput, inputFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskDateOutput \u003d taskDate.format(outputFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // If input date and time do not match the format or are invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new InvalidTaskDateException(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return taskDateOutput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 40
    }
  },
  {
    "path": "src/main/java/duke/command/UserCommands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents the different types of user commands recognized by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "enum UserCommands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    DELETE(\"delete\"), LIST(\"list\"), DONE(\"done\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    FIND(\"find\"), EXIT(\"bye\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Represents a user command with the specified command word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param commandWord"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    UserCommands(String commandWord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.commandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates when a user specifies a task in the task list using a non-numerical number."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class InvalidIndexNumberException extends NumberFormatException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new InvalidIndexNumberException with no specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public InvalidIndexNumberException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"OOPS! Please enter a numerical number to mark tasks as done :)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidPathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates an invalid file path."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class InvalidPathException extends StorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new InvalidPathException with no detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public InvalidPathException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"Invalid path!! Closing program\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates when a user\u0027s input date is not recognized by the program due to a non-existent date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * or time or when the format of input date is not recognized by the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class InvalidTaskDateException extends InvalidUserCommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new InvalidTaskDateException with the specified invalid date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param invalidDate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public InvalidTaskDateException(String invalidDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"OOPS! \" + invalidDate + \" does not exist.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + \"\\nPlease check to ensure that the date and time are correct.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidUserCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates when a user command is not recognized by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class InvalidUserCommandException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates an new InvalidUserCommandException with the specified error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param message Error message to be displayed to the user via the user interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public InvalidUserCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/SaveToStorageErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates an error occurred when saving the task list due to an invalid file path"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class SaveToStorageErrorException extends StorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new SaveToStorageErrorException with no detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public SaveToStorageErrorException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"OOPS! Something went wrong when saving your tasklist :( \\n--Save unsuccessful--\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates when an error occurs in the local storage due to an invalid file path."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class StorageException extends IOException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new StorageException with the specified error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param message Error message to be displayed to the user via the user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    StorageException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageLoadErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates the saved task list is unable to load due to an invalid file path."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class StorageLoadErrorException extends StorageException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new StorageLoadErrorException with no specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public StorageLoadErrorException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"Sorry but I am unable to load the saved tasklist. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                + \"\\nAny changes to your tasklist will not be saved :(\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskDoesNotExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Indicates a user command contains an invalid task list index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class TaskDoesNotExistException extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new TaskDoesNotExistException with the specified index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param index Invalid task list index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public TaskDoesNotExistException(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(\"OOPS! Task \" + index + \" does not exist.\" + \"\\n\" + \"Please make sure task index is correct.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 15
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidPathException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.SaveToStorageErrorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.StorageLoadErrorException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents the local storage of the program and stores the user\u0027s task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Handles file processing of the saved task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String TEXT_DEADLINE_SEPARATOR \u003d \"by: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String TEXT_EVENT_SEPARATOR \u003d \"at: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new Storage object that handles file processing of the saved task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param filePath File path of where the saved task list will be stored."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.filePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Saves the task list in a file specified by the file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list to be saved as a file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param ui User interface to display if an error occurs when saving the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws SaveToStorageErrorException If file path is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void save(TaskList tasks, Ui ui) throws SaveToStorageErrorException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cString\u003e taskListText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Convert each task into a string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.getTotalNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskListText.add(task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Files.write(filePath, taskListText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            throw new SaveToStorageErrorException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Loads the saved task list from files specified by the file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Previously saved task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @throws StorageException If there is an invalid file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public TaskList load() throws StorageException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Task list file has not been created (when the user first runs the program)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (!Files.exists(filePath) || !Files.isRegularFile(filePath)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // If a a directory is specified in the file path"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                if (containsDirectory()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    // Creates the directory to store the task list file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    Files.createDirectories(filePath.getParent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Create a file to save the task list in the specified file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Invalid file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new InvalidPathException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Task list file already exists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                List\u003cTask\u003e savedTaskList \u003d readSavedTaskList(Files.readAllLines(filePath));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                return new TaskList(savedTaskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Unable to load saved task file"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                throw new StorageLoadErrorException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Reads the text stored in the task list file and returns a List of Tasks of the specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * tasks in the task list file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param savedTaskListText Text stored in the task list file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return List of Tasks containg the specified tasks in the task list file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private List\u003cTask\u003e readSavedTaskList(List\u003cString\u003e savedTaskListText) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        List\u003cTask\u003e savedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (String task: savedTaskListText) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // Split the description of each task to obtain the type of task indicator"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] taskDetails \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String taskIndicator \u003d taskDetails[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String taskDescription \u003d taskDetails[1];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            if (taskIndicator.contains(TaskList.TASK_TODO_INDICATOR)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Todo todo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Checks if the task stored in the file is marked as done."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                parseIsDoneStatus(todo, taskIndicator);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                savedTaskList.add(todo);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } else if (taskIndicator.contains(TaskList.TASK_DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String[] deadlineDetails \u003d parseTaskText(taskDescription, TaskList.TASK_DEADLINE_INDICATOR);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String deadlineDescription \u003d deadlineDetails[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String deadlineDate \u003d deadlineDetails[1];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Deadline deadline \u003d new Deadline(deadlineDescription, deadlineDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Checks if the task stored in the file is marked as done."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                parseIsDoneStatus(deadline, taskIndicator);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                savedTaskList.add(deadline);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            } else if (taskIndicator.contains(TaskList.TASK_EVENT_INDICATOR)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String[] eventDetails \u003d parseTaskText(taskDescription, TaskList.TASK_EVENT_INDICATOR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String eventDescription \u003d eventDetails[0];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                String eventDate \u003d eventDetails[1];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                Event event \u003d new Event(eventDescription, eventDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                // Checks if the task stored in the file is marked as done."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                parseIsDoneStatus(event, taskIndicator);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                savedTaskList.add(event);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return savedTaskList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Determines if the indicated file path contains a directory."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if the file path contains a directory and returns false otherwise."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean containsDirectory() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return filePath.toString().contains(\"\\\\\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Processes the text of either a deadline task or an event task stored in the task list file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * and returns just the description and date of the deadline or event."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param taskText Text of deadline/event task stored in the task list file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param typeOfTask Indicates if the task is either a deadline task or an event task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Description and date of the deadline or event."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static String[] parseTaskText(String taskText, String typeOfTask) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String[] taskDescriptionAndDate \u003d taskText.split(\" \\\\(\", 2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (TaskList.TASK_DEADLINE_INDICATOR.equals(typeOfTask)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] date \u003d taskDescriptionAndDate[1].split(TEXT_DEADLINE_SEPARATOR);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskDescriptionAndDate[1] \u003d date[1].substring(0, date[1].length() - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (TaskList.TASK_EVENT_INDICATOR.equals(typeOfTask)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String[] date \u003d taskDescriptionAndDate[1].split(TEXT_EVENT_SEPARATOR);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            taskDescriptionAndDate[1] \u003d date[1].substring(0, date[1].length() - 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return taskDescriptionAndDate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Processes the status of the task stored in the task list and returns a Task object with the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * appropriate status."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param task Task which status is to be processed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param taskIndicator A tick if the task is done or a cross if the task is not done."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static void parseIsDoneStatus(Task task, String taskIndicator) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (taskIndicator.contains(Task.STATUS_TICK)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Else the task is not done. Do nothing"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 199
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a customisable list of tasks to be completed by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    protected static final String TASK_TODO_INDICATOR \u003d \"[T]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    protected static final String TASK_DEADLINE_INDICATOR \u003d \"[D]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    protected static final String TASK_EVENT_INDICATOR \u003d \"[E]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private List\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new TaskList object to handle adding and deleting tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks List of tasks made by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.listOfTasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Adds a new task to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param newTask Task to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void addNewTask(Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.listOfTasks.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Replaces a task with a new task at the specified index in the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param newTask New task to replaced task at the specified index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param index Index of task in the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void updateTaskList(Task newTask, int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.deleteTask(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.listOfTasks.add(index - 1, newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns the total number of tasks currently in the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Total number of tasks currently in the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public int getTotalNumberOfTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.listOfTasks.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Retrieves the task of the specified list index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param index Index of task to be retrieved."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Task stored at the specified index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.listOfTasks.get(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Deletes the task at the specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param index Index of the task to be deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.listOfTasks.remove(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns the an ordered list of tasks stored in the task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return An ordered list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        StringBuilder allTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        for (Task task: this.listOfTasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            int listIndex \u003d this.listOfTasks.indexOf(task) + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            allTasks.append(listIndex + \".\" + task + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return allTasks.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 90
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a task with a description and deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new task with the specified description and deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns a String representation of a deadline task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return String representation of a deadline task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a task with a description and date of event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a task with the specified description and date of event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param description Decription of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param time Date of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns a String representation of an event task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return String representation of an event task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.time + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a task with a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    // Indicators"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String STATUS_TICK \u003d \"[\" + \"\\u2713\" + \"]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static final String STATUS_CROSS \u003d \"[\" + \"\\u2718\" + \"]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new task with the specified description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns a tick if the task is done. Otherwise, returns a cross."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return A tick if the task is done and a cross if the task is not done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return (isDone ? STATUS_TICK : STATUS_CROSS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns true if the task is done. Otherwise, returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return true if the task is done and returns false if the task is not done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean hasDoneStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns a String representation of a task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return String representation of a task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Represents a task with a description of what to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new task with the specified description of what to do."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param description Description of what to do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns a String representation of a todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return String representation of a todo task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        displayGreetings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (duke.canExitProgram()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            Runtime.getRuntime().halt(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a dialog box containing the Duke\u0027s greeting when the program first starts up. Duke\u0027s greeting"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * includes displaying the currently saved task list in the hard drive and a standard greeting message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private void displayGreetings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String greetings \u003d duke.getGreetings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetings, dukeImage));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 65
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * Displays the user interface and deals with interacting with the user by printing responding to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " * user commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String CHATBOT \u003d \"Bob: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private static final String SKIPLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    private boolean hasExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Creates a new user interface object to deal with user interactions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.hasExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the standard greetings \"Bob\" gives to users when the program starts up."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showGreetings() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return SKIPLINE + \"Hey there! I\u0027m Bob\" + SKIPLINE + \"What can I do for you today?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the standard goodbye message \"Bob\" gives to users when users exit the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showGoodbyeMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        this.hasExit \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return \"Goodbye! Have a nice day :D\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the task list saved in the local storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list saved in the local storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // If list is empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d SKIPLINE + \"List is empty :(\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d SKIPLINE + \"Your current task list is as follows:\" + SKIPLINE + tasks.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // System.out.println(USER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the task list containing tasks that match a keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list containing the tasks that match the keyword."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param keyword Keyword found in the filtered tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showFilteredByKeywordTaskList(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d SKIPLINE + \"No tasks matched with \u0027\" + keyword + \"\u0027 :(\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003e 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d SKIPLINE + \"Here are the tasks that matched with \u0027\" + keyword + \"\u0027:\" + SKIPLINE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    + tasks.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // System.out.println(USER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the saved task list when the program starts up."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list saved in the local storage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String loadTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE + \"Here is your current task list:\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // System.out.println(\"Here is your current task list:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d SKIPLINE + \"List is empty :(\" + SKIPLINE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // System.out.print(\"List is empty :(\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // System.out.println(SKIPLINE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        if (tasks.getTotalNumberOfTasks() \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            // System.out.println(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            output +\u003d tasks.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Returns the error message when there is an invalid user command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param userCommand Invalid user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return Error message to inform users that userCommand is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showInvalidUserCommand(String userCommand) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return \"Sorry but I don\u0027t understand what \u0027\" + userCommand + \"\u0027 means :(\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Informs user that a new task has been added to the task list and has successfully been added."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param newTask New task added to the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list saved in the local storage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showAddedNewTaskMessage(Task newTask, TaskList tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Bob\u0027s response"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"Noted! I have added the following task to your list:\" + SKIPLINE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d newTask.toString() + SKIPLINE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"You now have \" + tasks.getTotalNumberOfTasks() + \" task(s) in your list\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d SKIPLINE + showSuccessfullySavedMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // System.out.println(USER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Informs user that indicated task has been deleted from the task list and has successfully"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * been deleted from the task list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param deletedTask Task to be deleted from the task list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param tasks Task list saved in the local storage."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showDeleteTaskMessage(Task deletedTask, TaskList tasks) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Bob\u0027s response"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"Noted! I have deleted this task from your list:\" + SKIPLINE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d deletedTask.toString() + SKIPLINE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"You now have \" + tasks.getTotalNumberOfTasks() + \" task(s) in your list\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Informs user that indicated task has been successfully marked as done."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param doneTask Task to be marked done."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showMarkDoneMessage(Task doneTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Bob\u0027s response"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"Good job completing this task! I\u0027ve marked this task as done:\" + SKIPLINE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d doneTask.toString() + SKIPLINE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"Keep up the good work :)\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Informs user that indicated task is already marked as done."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param doneTask Task that is already marked done."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showAlreadyMarkDoneMessage(Task doneTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        // Bob\u0027s response"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d \"OOPS. It seems like this task has already been completed:\" + SKIPLINE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d doneTask.toString() + SKIPLINE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Displays the appropriate error message depending on the type of Exception is passed into the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * parameters."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @param e Exception caught."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String output \u003d CHATBOT + SKIPLINE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        output +\u003d e.getLocalizedMessage();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Informs user that the updated task list has been successfully saved to the file."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public String showSuccessfullySavedMessage() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return SKIPLINE + \"Successfully saved task list to file :)\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * Determines whether the user has exited the program."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     * @return True if user exits the program, otherwise false."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    public boolean hasExited() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        return this.hasExit;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 200
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" style\u003d\"-fx-spacing: 5px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" opacity\u003d\"0.75\" style\u003d\"-fx-border-color: black; -fx-background-color: blanchedalmond; -fx-border-radius: 10px; -fx-background-radius: 10px; -fx-min-height: 30px; -fx-min-width: 100px; -fx-padding: 5px; -fx-font-style: san-serif;\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #DDDDDD;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 19
    }
  },
  {
    "path": "src/test/java/duke/command/TaskDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import duke.exception.InvalidTaskDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "class TaskDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void getDate_validDatePattern() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String validDate \u003d \"2020-01-01 16:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expected \u003d \"1 Jan 2020, Wednesday 04:00 PM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String actual \u003d TaskDate.getDate(validDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void getDate_invalidDatePattern_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String invalidDate \u003d \"2020/01/01 4pm\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        String expected \u003d \"1 Jan 2020, Wednesday 04:00 PM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            assertEquals(expected, TaskDate.getDate(invalidDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        } catch (InvalidTaskDateException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            String expectedErrorMessage \u003d \"OOPS! \" + invalidDate + \" does not exist.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "                    + \"\\nPlease check to ensure that the date and time are correct.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "            assertEquals(expectedErrorMessage, e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 35
    }
  },
  {
    "path": "src/test/java/duke/command/UserCommandsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "class UserCommandsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetTodoCommandWord() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"todo\", UserCommands.TODO.getCommandWord());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetDeadlineCommandWord() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"deadline\", UserCommands.DEADLINE.getCommandWord());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetEventCommandWord() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"event\", UserCommands.EVENT.getCommandWord());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetDeleteCommandWord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"delete\", UserCommands.DELETE.getCommandWord());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetDoneCommandWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"done\", UserCommands.DONE.getCommandWord());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetExitCommandWord() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"bye\", UserCommands.EXIT.getCommandWord());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetListCommandWord() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(\"list\", UserCommands.LIST.getCommandWord());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 43
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testGetStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Task testTask \u003d new Task(\"This is a test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(Task.STATUS_CROSS, testTask.getStatusIcon());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testMarkAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Task testTask \u003d new Task(\"This is a test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(Task.STATUS_TICK, testTask.getStatusIcon());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    void testHasDoneStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        Task testTask \u003d new Task(\"This is a test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "        assertEquals(true, testTask.hasDoneStatus());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "todo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deadline independent project /bymonday"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "deadline independent project /by monday"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 17
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\TaskList.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChooJiaXin"
        },
        "content": "C:\\Uni Stuff\\Y2S1\\CS2103T\\Independent project\\ip\\src\\main\\java\\Todo.java"
      }
    ],
    "authorContributionMap": {
      "ChooJiaXin": 6
    }
  }
]
