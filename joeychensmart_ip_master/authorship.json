[
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    TODO (Todo::todoCommand,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.TODO_EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*)\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"todo\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DEADLINE (Deadline::deadlineCommand,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.DEADLINE_BAD_FORMAT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*?) /by (.*)\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"deadline\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    EVENT (Event::eventCommand,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.EVENT_BAD_FORMAT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*) /at (.*)\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"event\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    LIST (TaskList::listCommand,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"list\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO add more specific errors for these two below"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DONE (TaskList::doneCommand,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(\\\\d+)\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"done\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DELETE (TaskList::deleteCommand,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(\\\\d+)\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"delete\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private CommandExecutable exec;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private DukeException.Errors matchError;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Pattern format;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Command(CommandExecutable exec, DukeException.Errors matchError, String formatString, String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.exec \u003d exec;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.format \u003d Pattern.compile(formatString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.matchError \u003d matchError;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Optional\u003cMatcher\u003e matcher(String rawInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(!rawInput.startsWith(this.name)) return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Matcher matcher \u003d  this.format.matcher(rawInput.substring(this.name.length()).trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return Optional.of(matcher);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void dispatch(TaskList taskList, String[] args) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.exec.run(taskList, args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeException matchError(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new DukeException(this.matchError);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 56
    }
  },
  {
    "path": "src/main/java/CommandExecutable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public interface CommandExecutable {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void run(TaskList taskList, String[] arguments) throws DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 4
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Deadline(String description, String time) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + this.time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void deadlineCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0].trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(args.length!\u003d2 || description.equals(\"\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeException(DukeException.Errors.DEADLINE_BAD_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        taskList.add(new Deadline(description, time));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 26
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.parser \u003d new Parser(this.taskList);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(Util.logo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.parseAndRun(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                Util.systemMessage(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(\"bye sir thanks for using me sir hope to see you again sir\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 27,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public enum Errors {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        UNKNOWN_COMMAND(\"sorry sir i dont understand your command sir\\n\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"please enter again sir thank you sir\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        TODO_EMPTY_DESCRIPTION(\"v sorry sir you need to give todo description sir\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EVENT_BAD_FORMAT(\"apology mr sir, i dont not understand your input\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"the format for new event is \\\"event DESCRIPTION /at DATE\\\" sir\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DEADLINE_BAD_FORMAT(\"very sorry sir, i cannot understand your input\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"the format for new deadline is \\\"deadline DESCRIPTION /by DATE\\\" sir\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DONE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DELETE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final String message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Errors(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeException(Errors error) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(error.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 27
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + this.time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void eventCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0].trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(args.length!\u003d2 || description.equals(\"\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeException(DukeException.Errors.EVENT_BAD_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        taskList.add(new Event(description, time));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 26
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseAndRun(String input) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Command command : Command.values()) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Optional\u003cMatcher\u003e maybeMatcher \u003d command.matcher(input);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if(maybeMatcher.isEmpty()) continue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Matcher matcher \u003d maybeMatcher.get();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // Should we throw a more specific error here?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!matcher.find()) throw command.matchError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int count \u003d matcher.groupCount();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String[] args \u003d new String[count];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (int i\u003d1;i\u003c\u003dcount;i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                args[i-1] \u003d matcher.group(i);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            command.dispatch(this.taskList, args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // if we are here means no command has matched"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        throw new DukeException(DukeException.Errors.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 27
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected abstract String getTaskIdentifier();"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String checkMark \u003d this.isDone ? \"X\" : \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return squareBox(this.getTaskIdentifier())"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + squareBox(checkMark)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String squareBox(String str) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"[\"+str+\"]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 23
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cTask\u003e items;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.size();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items.add(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(\"morning sir i have added this to the list sir:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"\\ni counted all your number of tasks sir it is \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + this.items.size()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \" sir\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String numberedItems \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i\u003d0;i\u003cthis.items.size();i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            numberedItems +\u003d (i+1) + \". \" + this.items.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return numberedItems;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task markItem(int idx) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d this.items.get(idx);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        selected.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return  selected;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task deleteItem(int idx) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.remove(idx);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void deleteCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int idx \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(idx \u003e taskList.size())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeException(DukeException.Errors.DELETE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d taskList.deleteItem(idx-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(\"sir this task has been remove sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void doneCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int idx \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(idx \u003e taskList.size())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeException(DukeException.Errors.DONE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d taskList.markItem(idx-1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(\"afternoon sir i have mark this task done sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void listCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Util.systemMessage(taskList.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 52
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected String getTaskIdentifier(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void todoCommand(TaskList taskList, String[] args) throws  DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if(description.equals(\"\"))"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new DukeException(DukeException.Errors.TODO_EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        taskList.add(new Todo(description));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 15
    }
  },
  {
    "path": "src/main/java/Util.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String logo \u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"               /,   ,|   ,|     \\n\" +"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"           /| /(  ,\u0027 / ,//      \\n\" +"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"        \\\\`( |/ /,\u0027  (,/ |      \\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"         \\\\ \\\\ ` `   `  /--,    \\n\" +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"       _,_\\\\ `  ` `  ``  /__    \\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"        \u0027-.____________`  /     \\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"          [  \\\\@,    :] `--,-..-\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"          [__________]__,\u0027-._/  \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"           )\u0027o\\\\ \u0027 o) \\\\/ )       hello sir\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"           \\\\  /   __  ./        its me your assistant sir\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"            \\\\\u003d`   \u003d\u003d,\\\\..        how may i be of service sir\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"             \\\\ -. `,\u0027 (        \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    \"             \\\\`--\u0027\u0027    \\\\.     \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final String horizontalRule \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void systemMessage(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        System.out.println(horizontalRule+indent(input)+\"\\n\"+horizontalRule);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static String indent(String original) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"     \"+ original.replace(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "todo test1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline thisbreaks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline add tests /by now"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event commit changes /at later"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event thisalsobreaks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline do tasks /by now"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 36
    }
  }
]
