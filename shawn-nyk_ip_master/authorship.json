[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "shawn-nyk": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "shawn-nyk": 2
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[T]|0|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[E]|1|meeting|10pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|1|homework|2020-08-23T23:59:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|0|write essay|2020-08-27T13:30:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|0|send email|2020-09-21T09:30:00"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Represents the Duke chat bot. Duke can keep a record of user\u0027s inputs as a list of tasks, mark them as completed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * when they are done, and show the user the list of tasks upon request. This list of tasks will be written to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * user\u0027s hard disk such that it can be saved and loaded. Currently, Duke supports 3 types of tasks: to-do, deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * and event tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Deals with loading tasks from and saving tasks to the save file on the hard disk */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The user\u0027s list of tasks */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Deals with interactions with the user */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The relative path in which the save file is located */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes the Duke program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param filePath The relative path in which the save file is located."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (FileNotFoundException | WrongFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the Duke program by calling the run() method."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param args User input arguments (not used)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        new Duke(FILE_PATH).run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the Duke program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        while (!isExit) { // Duke takes in user input indefinitely until the user says \"bye\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                isExit \u003d c.isExit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "shawn-nyk": 69
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Parses user commands in the Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Parses user commands and returns the appropriate executable command for the program to then execute."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param fullCommand The user command to be parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The appropriate command to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] commandWords \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (fullCommand.equals(\"bye\")) { // Exit the program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) { // List out task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"done\")) { // Done with a task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DoneCommand(commandWords);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"delete\")) { // Delete a task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DeleteCommand(commandWords);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"todo\")) { // Add To-Do task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddTodoCommand(fullCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"event\")) { // Add duke.task.Event task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddEventCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"deadline\")) { // Add duke.task.Deadline task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddDeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (commandWords[0].equals(\"find\")) { // Find task(s) in task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else { // Unknown command entered"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Loads tasks from and saves tasks to the save file (a saved task list). Storage will attempt to load the save file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * upon start up of the program and will from thereon overwrite and save the file every time the task list changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The relative path in which the save file is located */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes the Storage object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param filePath The relative path in which the save file is located."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Storage (String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Loads the task list from the save file upon start up of the program. If no valid save file is found upon start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * up, a new save file will be created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return A list of strings that represents tasks, that the TaskList class can then convert into a list of"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws FileNotFoundException If from the path specified by filePath, a save file is not found or there is a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * missing directory / there are missing directories."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cString\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        File memoryFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!memoryFile.exists()) { // If file is non-existent, either the .txt file or a directory in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // filePath does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            boolean areExistentDirectories \u003d true; // Check if all directories specified in filePath exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] pathParts \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String testPath \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String nonExistentDirectory \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            for (int i \u003d 0; i \u003c pathParts.length - 1; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                testPath +\u003d pathParts[i] + \"/\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                if (!new File(testPath).exists()) { // A directory specified in filePath does not exist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    areExistentDirectories \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    nonExistentDirectory \u003d pathParts[i]; // The directory specified in filePath that does not"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // exist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (areExistentDirectories) { // All directories specified in memoryFilePath exists, only the .txt file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                // does not exist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createFile(Path.of(filePath)); // Create the .txt file with location as stated in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // filePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new FileNotFoundException(\"ERROR: Could not load last save.\\nThe save file \\\"\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        + pathParts[pathParts.length - 1] + \"\\\" does not exist.\\nNow loading a new, empty task list\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \".\\nA new save file \\\"\" + pathParts[pathParts.length - 1] + \"\\\" has been created with the\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"following path: \\\"\" + filePath + \"\\\".\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } else { // A directory specified in filePath does not exist so we should create it (and all its"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                // subdirectories if any)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    String fullPath \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    for (int i \u003d 0; i \u003c pathParts.length - 1; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        fullPath +\u003d pathParts[i] + \"/\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createDirectories(Path.of(fullPath)); // Create missing directory (and all its"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // subdirectories if any) as specified by filePath"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createFile(Path.of(filePath)); // Create .txt file in newly created path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new FileNotFoundException(\"ERROR: Could not load last save.\\nPath specified for save file: \" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"\\\"\" + filePath + \"\\\"\\nThe directory \\\"\" + nonExistentDirectory + \"\\\"\\n(and hence all \" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"subdirectories of it, if any)\\ndoes not exist.\\nNow loading a new, empty task list.\\nA new \" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"save file \\\"\" + pathParts[pathParts.length - 1] + \"\\\" has been created with the\\nfollowing \" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"path: \\\"\" + filePath + \"\\\".\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // If the save file exists, we load the task list with tasks as specified in the save file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Scanner sc \u003d new Scanner(memoryFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.add(sc.nextLine());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Writes to save file as specified by filePath. Writing to save occurs every time the task list changes."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws IOException If an error occurs during the process of trying to write to the save file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fw.write(task.toStringForMemory() + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 115
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Stores the user\u0027s list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The user\u0027s list of tasks */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a list of tasks that is empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a list of tasks and populates it with tasks specified by the listOfTasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param listOfTasks The list of tasks in String format, to populate the task list with."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If an error is present in the format of a task in the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskList(List\u003cString\u003e listOfTasks) throws WrongFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        initiateTaskList(listOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Populates the task list with tasks specified by the listOfTasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param listOfTasks The list of tasks in String format, to populate the task list with."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If an error is present in the format of a task in the save file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private void initiateTaskList(List\u003cString\u003e listOfTasks) throws WrongFormatException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (String s : listOfTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitLine \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            switch (splitLine[0]) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[T]\": // To-Do"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                tasks.add(new ToDo(splitLine[2], !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[E]\": // duke.task.Event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                tasks.add(new Event(splitLine[2], splitLine[3], !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[D]\": // duke.task.Deadline"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                tasks.add(new Deadline(splitLine[2], LocalDateTime.parse(splitLine[3]).format(DateTimeFormatter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        .ofPattern(\"yyyy-MM-dd HHmm\")), !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(\"Error in last save. Now loading a new, empty task list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the task in the task list that has the index specified by taskIndex."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param taskIndex The index of the task in the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The task with the specified index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param task The task to be added to the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Removes a task from the task list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param taskIndex The index of the task to be removed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The removed task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task removeTask(int taskIndex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The number of tasks in the task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Indicates if the task list is empty or not."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return true if the task list is empty; false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the String representation of the task list where all the tasks are represented in a top-down"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * sequential order based on their indexes in the list. Each task occupies one line."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The String representation of the task list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            result.append(\"\\n\").append(index++).append(\".\").append(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 135
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Handles all interactions with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Duke a.k.a. Star Bot\u0027s logo shown upon start up */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String LOGO \u003d \"     _______.___________.    ___     \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \" .______      \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    /       |           |   /   \\\\     |   _  \\\\     \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"   |   (----`---|  |----`  /  ^  \\\\    |  |_)  |    \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"    \\\\   \\\\       |  |      /  /_\\\\  \\\\   |      /     \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \".----)   |      |  |     /  _____  \\\\  |  |\\\\  \\\\----.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"|_______/       |__|    /__/     \\\\__\\\\ | _| `._____|\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"                                                   \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         .______     ______   .___________.        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         |   _  \\\\   /  __  \\\\  |           |        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         |  |_)  | |  |  |  | `---|  |----`        \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         |   _  \u003c  |  |  |  |     |  |             \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         |  |_)  | |  `--\u0027  |     |  |             \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"         |______/   \\\\______/      |__|             \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            + \"                                                   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Divider that delineates Duke\u0027s replies */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Scanner used to scan user\u0027s input */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Greets the user upon program start up."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        System.out.println(LOGO + \"\\nHello, I\u0027m Star Bot! What can I do for \" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you?\\nSay \\\"bye\\\" to exit.\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Says goodbye to the user before termination of the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Goodbye, see you again soon! :)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Informs the user that an error occurred."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param e The error that occurred in the program."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Reads the user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The user\u0027s input as a String."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return SCANNER.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Shows the program\u0027s response to the user\u0027s input. The look of these replies are standardised by wrapping them in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * dividers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param reply The text to present to the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReply(String reply) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        System.out.println(DIVIDER + reply + \"\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Shows a standardised reply for when the user adds a task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param newTask The task being added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks that the task is being added to."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForAddTask(Task newTask, TaskList tasks) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Got it. I\u0027ve added this task:\\n\" + newTask + \"\\nNow \" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you have \" + tasks.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Shows a standardised reply for when the user completes a task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param doneTask The task that has been completed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForDoneTask(Task doneTask) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Shows a standardised reply for when the user removes a task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param removedTask The task being removed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks that the task is being removed from."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForDeleteTask(Task removedTask, TaskList tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Noted. I\u0027ve removed this task:\\n\" + removedTask +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"\\nNow you have \" + tasks.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the task list to be shown to the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks to be shown."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            showReply(\"Your list is empty! Let\u0027s add some tasks!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            showReply(\"Here are the tasks in your list:\" + tasks.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the task list to be shown to the user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showFoundTaskList(TaskList tasks, String keyWords) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            showReply(\"Sorry! No tasks were found with the word(s)\\n\\\"\" + keyWords + \"\\\".\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            showReply(\"Here are the tasks in your list with the word(s)\\n\\\"\" + keyWords + \"\\\":\" + tasks.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 133
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an add command for the Duke program. These are commands that add tasks to the task list. There is an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * add command for each type of task, namely: to-do, deadline and event tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 8
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DeadlineWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an add command for deadline tasks. This command adds a deadline task to the task list. The format for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * this command is: \"deadline task /by YYYY-MM-DD hhmm\" where hh is hours and mm is minutes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The entire command entered by the user */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an AddDeadlineCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param fullCommand The entire command entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddDeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command. If successful, it will add a deadline task to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws DeadlineWrongFormatException If the add deadline command is in a wrong format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DeadlineWrongFormatException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] commandParts \u003d fullCommand.split(\"/by\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new Deadline(commandParts[0].substring(9).trim(), commandParts[1].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException | DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // add deadline command is in a wrong format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DeadlineWrongFormatException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 57
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.EventWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an add command for event tasks. This command adds an event task to the task list. The format for this"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command is: \"event task /at venue\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The entire command entered by the user */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an AddEventCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param fullCommand The entire command entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command. If successful, it will add an event task to the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws EventWrongFormatException If the add event command is in a wrong format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EventWrongFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] commandParts \u003d fullCommand.split(\"/at\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new Event(commandParts[0].substring(6).trim(), commandParts[1].trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException e) { // add event command is in a wrong format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new EventWrongFormatException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 55
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TodoWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an add command for to-do tasks. This command adds a to-do task to the task list. The format for this"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command is: \"to-do task\" (without the hyphen between \"to\" and \"do\")."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The entire command entered by the user */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an AddTodoCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param fullCommand The entire command entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddTodoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command. If successful, it will add a to-do task to the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws TodoWrongFormatException If the add to-do command is in a wrong format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws TodoWrongFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new ToDo(fullCommand.substring(5).trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException e) { // add to-do command is in a wrong format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TodoWrongFormatException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 54
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a command for the Duke program. These are commands that users can enter as input to interact with Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * There are several types of commands, namely: add, delete and done task commands, and exit, list and unknown commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Indicates if the command is telling the program to terminate */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws DukeException If the command cannot be executed properly (is an invalid or unknown command)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DeleteWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a delete command for the Duke program. This is the command that removes tasks from the task list. The"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * format for this command is: \"delete x\" where x is in the index of a task in the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The user\u0027s full command split into strings separated by whitespaces */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String[] commandParts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a DeleteCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param commandParts The user\u0027s full command split into strings separated by whitespaces."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteCommand(String[] commandParts) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.commandParts \u003d commandParts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command. If successful, it will remove a task from the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws DeleteWrongFormatException If the delete command is in a wrong format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DeleteWrongFormatException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (commandParts.length !\u003d 2) { // If command is in a wrong format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(commandParts[1]) - 1; // Index of task in the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task removedTask \u003d tasks.removeTask(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForDeleteTask(removedTask, tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (NumberFormatException e) { // Second argument of"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // command was not a number, e.g. \"delete X\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // User requests"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // for a task with an index not within the current"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TaskIndexOutOfBoundsException(commandParts[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 63
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DoneWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a done command for the Duke program. This is the command that marks tasks as completed in the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * The format for this command is: \"done x\" where x is in the index of a task in the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The user\u0027s full command split into strings separated by whitespaces */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String[] commandParts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a DoneCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param commandParts The user\u0027s full command split into strings separated by whitespaces."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DoneCommand(String[] commandParts) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.commandParts \u003d commandParts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command. If successful, it will mark a task as done in the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws DoneWrongFormatException If the done command is in a wrong format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DoneWrongFormatException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (commandParts.length !\u003d 2) { // If command is in a wrong format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(commandParts[1]) - 1; // Index of task in the task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task completedTask \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            completedTask.setDone(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForDoneTask(completedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (NumberFormatException e) { // Second argument of command was not a number, e.g. \"done X\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TaskIndexOutOfBoundsException(commandParts[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an exit command for the Duke program. This is the command that terminates the program. The format for"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * this command is: \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an ExitCommand object. Its isExit boolean flag is marked as true to indicate to the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * program that it should terminate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command and terminates the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.FindWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws FindWrongFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String keyWords \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            TaskList foundTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                if (task.getDescription().contains(keyWords)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    foundTasks.addTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (task instanceof Event \u0026\u0026 ((Event) task).getAt().contains(keyWords)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    foundTasks.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showFoundTaskList(foundTasks, keyWords);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new FindWrongFormatException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a list command for the Duke program. This is the command that lists out the tasks in the task list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * and presents them to the user. The format for this command is: \"list\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command and lists out the tasks in the task list and presents them to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showTaskList(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 24
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates unknown commands for the Duke program. These are invalid commands (in which the first word of the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command is not any of the valid commands)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Executes the command and informs the user that the command entered was invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param tasks The list of tasks in the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param ui The Ui object being used in the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param storage The Storage object being used in the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showError(new UnknownCommandException());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a deadline wrong format exception. These exceptions are thrown when the user enters a deadline command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * with an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeadlineWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a DeadlineWrongFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeadlineWrongFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"deadline\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\ntask /by YYYY-MM-DD hhmm\\nwhere hh is hours and mm is minutes.\\nPlease ensure \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"that the date and time are valid.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a delete wrong format exception. These exceptions are thrown when the user enters a delete command with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * an invalid format in which the first word of the command is \"delete\" but either no other text accompanies the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command, or the text after the word \"delete\" is not a single integer)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a DeleteWrongFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteWrongFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"delete\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a done wrong format exception. These exceptions are thrown when the user enters a done command with an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * invalid format in which the first word of the command is \"done\" but either no other text accompanies the command, or"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * the text after the word \"done\" is not a single integer)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DoneWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a DoneWrongFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DoneWrongFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"done\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an exception specific to the Duke program. There are several types of exceptions, namely: wrong"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * format, unknown command, and task index out of bounds exceptions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user what went wrong and how to avoid the error if appropriate."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return \"OOPS!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/EventWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates an event wrong format exception. These exceptions are thrown when the user enters an event command with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EventWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an EventWrongFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EventWrongFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"event\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\nevent /at time.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/FindWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class FindWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public FindWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"find\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"word / words that you would like to search for in\\nthe task list.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a task index out of bounds exception. These exceptions are thrown when the user enters a done or delete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command but specifies an index that is out of the range of the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The index specified by the user */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an TaskIndexOutOfBoundsException object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param index The index specified by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskIndexOutOfBoundsException(String index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user that there is no task with the specified index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" There is no task no. \" + index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a to-do wrong format exception. These exceptions are thrown when the user enters a to-do command with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * command)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TodoWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a TodoWrongFormatException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TodoWrongFormatException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"todo\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates unknown command exceptions. These exceptions are thrown when the user enters an invalid command in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * which the first word of the command is not a recognized command word."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user that the command entered is not recognized."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" I\u0027m sorry, but I \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"don\u0027t know what that means :(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates wrong format exceptions. These exceptions are thrown when the user enters a command with an invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * format (the first word of the command is a valid command word but an error lies elsewhere in the command)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class WrongFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The command type as specified by the first word of the command that the user entered */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    String commandName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a WrongFormatException object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param commandName The command type as specified by the first word of the command that the user entered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public WrongFormatException(String commandName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns an error message. Informs the user of the valid format of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" The \" + commandName + \" command has to be followed by a\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates the deadline task type. A deadline task has a description of the task and the date and time of when"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * the task should be completed by."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Date that the task should be completed by */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Date and time that the task should be completed by */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a deadline task that has not been completed by default."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param by The date and time that the task should be completed by."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Deadline(String description, String by) throws WrongFormatException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[D]\", \"deadline\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] dateAndTimeParts \u003d by.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byTime \u003d dateAndTimeParts[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.date \u003d LocalDate.parse(byDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.dateAndTime \u003d this.date.atTime(Integer.parseInt(byTime.substring(0,2)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Integer.parseInt(byTime.substring(2,4)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a deadline task that can be marked as completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param by The date and time that the task should be completed by."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isDone Marks whether the task has been completed or not."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[D]\", \"deadline\", isDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] dateAndTimeParts \u003d by.split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byDate \u003d dateAndTimeParts[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byTime \u003d dateAndTimeParts[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.date \u003d LocalDate.parse(byDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.dateAndTime \u003d this.date.atTime(Integer.parseInt(byTime.substring(0,2)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Integer.parseInt(byTime.substring(2,4)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the string that will be written in the save file to represent this particular deadline task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The string that will be written in the save file to represent this particular deadline task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toStringForMemory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toStringForMemory() + \"|\" + dateAndTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the way the deadline task is presented to the user as part of the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The String that represents the deadline task when it is presented to the user as part of the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (by: \" + dateAndTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy @ hh:mma\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates the event task type. An event task has a description of the task and the venue of where the task will"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * be done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The venue where the task is to be done */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an event task that has not been completed by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param at The venue where the task is to be done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Event(String description, String at) throws WrongFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[E]\", \"event\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes an event task that can be marked as completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param at The venue where the task is to be done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isDone Marks whether the task has been completed or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Event(String description, String at, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[E]\", \"event\", isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the venue where the task is to be done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The venue where the task is to be done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the string that will be written in the save file to represent this particular event task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The string that will be written in the save file to represent this particular event task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toStringForMemory() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toStringForMemory() + \"|\" + at;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the way the event task is presented to the user as part of the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The String that represents the event task when it is presented to the user as part of the task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a task for the Duke program. A task is inclusive of a textual description and a boolean flag to mark"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * whether it has been completed or not. There are several types of tasks, namely: to-do, event and deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Describes the task */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** Marks whether the task has been completed or not */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The symbol that represents the type of task */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeSymbol; // [T], [D] or [E]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /** The name of the task type */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeName; // to-do, deadline or event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param taskTypeSymbol The symbol that represents the type of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param taskTypeName The name of the task type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isDone Marks whether the task has been completed or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task(String description, String taskTypeSymbol, String taskTypeName, boolean isDone)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throws WrongFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new WrongFormatException(taskTypeName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeSymbol \u003d taskTypeSymbol;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeName \u003d taskTypeName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Indicates if the task is completed or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return \"✓\" if the task is completed; \"✘\" if it is not completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Changes the task\u0027s completion indicator to either completed or not completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isDone The user enters true to mark the task as complete and false for incomplete."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Returns the task\u0027s description."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The task\u0027s description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the string that will be written in the save file to represent this particular task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The string that will be written in the save file to represent this particular task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toStringForMemory() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskTypeSymbol + \"|\" + (isDone ? 1 : 0) + \"|\" + description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the way the task is presented to the user as part of the task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @return The String that represents the task when it is presented to the user as part of the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskTypeSymbol + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 89
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates the to-do task type. A to-do task only has a description of the task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a to-do task that has not been completed by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ToDo(String description) throws WrongFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Creates and initializes a to-do task that can be marked as completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @param isDone Marks whether the task has been completed or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws WrongFormatException If no description is provided."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ToDo(String description, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[T]\", \"todo\", isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 30
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validByeCommand_exitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidByeCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Bye\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validListCommand_listCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidListCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"LIST\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDoneCommand_doneCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done 2\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandWithExtraWhitespaces_doneCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done    4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandNoTaskIndex_doneCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Done 3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeleteCommand_deleteCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandWithExtraWhitespaces_deleteCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete    4\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandNoTaskIndex_deleteCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Delete 5\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validTodoCommand_addTodoCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo read book\") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validTodoCommandExtraWhitespaces_addTodoCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo     read book    \") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandNoDescription_addTodoCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo\") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandDescriptionIsWhitespace_addTodoCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo      \") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Todo read book\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todoread book\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommand_addEventCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /at there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommandExtraWhitespaces_addEventCommand() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event    this     /at    there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommandNoWhitespacesAroundAt_addEventCommand() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this/atthere\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandNoDescription_addEventCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoAt_addEventCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoAt2_addEventCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /by there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoVenue_addEventCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /at\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoTask_addEventCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event /at there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Event this /at there\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"eventthis /at there\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommand_addDeadlineCommand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /by then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommandExtraWhitespaces_addDeadlineCommand() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline    this     /by    then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommandNoWhitespacesAroundAt_addDeadlineCommand() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this/bythen\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandNoDescription_addDeadlineCommand() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoBy_addDeadlineCommand() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoBy2_addDeadlineCommand() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /at then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoVenue_addDeadlineCommand() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /by\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoTask_addDeadlineCommand() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline /by then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Deadline this /by then\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadlinethis /by then\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 215
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_validInput_deadlineObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"2020-09-10 2359\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongDateFormat_dateTimeExceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"10-09-2020 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof DateTimeException);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongTimeFormat_numberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"2020-09-10 11:59pm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof NumberFormatException);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongDateTimeFormat_dateTimeExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"tomorrow 9pm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof DateTimeException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDateTimeSpecified_arrayIndexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"then\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof ArrayIndexOutOfBoundsException);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"\", \"2020-09-10 11:59pm\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDateTime_arrayIndexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof ArrayIndexOutOfBoundsException);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDescriptionNorDateTime_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 92
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_validInput_eventObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"meeting\", \"NUS\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"\", \"NUS\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoVenue_eventObject() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"meeting\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoDescriptionNorVenue_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"\", \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 50
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newTask_validInput_taskObject() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newTask_invalidInputNoDescription_taskObject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Task(\"\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void getStatusIcon_taskNotDone_getCross() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✘\", task.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void getStatusIcon_taskDone_getTick() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testToStringForMemory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"[T]|0|do homework\", task.toStringForMemory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"[T][✘] do homework\", task.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 80
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newToDo_validInput_toDoObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ToDo(\"read book\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newToDo_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ToDo(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 30
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[T]|0|first task"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "blah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todooo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at Orchard Rd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at Orchard Rd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by tomorrow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by tomorrow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-8-23 2359"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-08-23 1370"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 23 Aug 2020 2359"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-08-23 2359"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 99"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 21"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline buy presents /by 2020-12-24 2359"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo deck the halls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo dress presentably"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event Christmas party /at home"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event give presents /at Christmas party"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-10-17 1330"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find mistletoe"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find present"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find presents"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find give presents"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "find home"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo first task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 63
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Command\\*.java ..\\src\\main\\java\\duke\\Exception\\*.java ..\\src\\main\\java\\duke\\Task\\*.java ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "shawn-nyk": 5
    }
  }
]
