[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"    mainClassName \u003d \"com.duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    archiveBaseName \u003d \"duke.Launcher\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sogggy":18,"-":43}},{"path":"com/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":7}},{"path":"com/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.parser;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    public static boolean isDone(String input) {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \");"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"        return inputArr.length \u003d\u003d 2"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 input.substring(0, 4).equals(\"done\")"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 isNumber(input.substring(5, 6));"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    public static boolean isDelete(String input) {"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \");"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        return inputArr.length \u003d\u003d 2"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 input.substring(0, 6).equals(\"delete\")"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 isNumber(input.substring(7, 8));"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    public static boolean isNumber(String input) {"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"            Integer.parseInt(input);"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"            return true;"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    public static boolean correctInputFormat(String input) {"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"        if (inputArr.length \u003d\u003d 1) {"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        //correct todo format"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        boolean todoBool \u003d inputArr.length \u003d\u003d 2 \u0026\u0026 inputArr[0].equals(\"todo\");"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String taskWithDate \u003d inputArr[1];"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        String[] taskAndDateArr \u003d taskWithDate.split(\" /\");"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        //correct deadline format"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        boolean deadlineBool \u003d taskAndDateArr.length \u003d\u003d 2 \u0026\u0026 inputArr[0].equals(\"deadline\");"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        //correct event format"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        boolean eventBool \u003d taskAndDateArr.length \u003d\u003d 2 \u0026\u0026 inputArr[0].equals(\"event\");"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        return todoBool || deadlineBool || eventBool;"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"    public static Task parseTask(String[] arr) {"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"            String taskCode \u003d arr[0];"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"            String isDoneStr \u003d arr[1];"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"            boolean isDone \u003d isDoneStr.equals(\"1\") ? true : false;"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"            String task \u003d arr[2];"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"            //if toDo item"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"            if (taskCode.equals(\"T\")) {"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"                ToDos todo \u003d new ToDos(task, isDone);"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"                return todo;"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"                //if deadline item"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"            } else if (taskCode.equals(\"D\")) {"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"                String date \u003d arr[3];"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"                date \u003d parseDate(date);"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"                Deadlines deadline \u003d new Deadlines(task, date, isDone);"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"                return deadline;"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"                //if events item"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"            } else {"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"                String date \u003d arr[3];"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"                date \u003d parseDate(date);"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"                Events event \u003d new Events(task, date, isDone);"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"                return event;"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"            System.exit(1);"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"            return null;"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"    public static String parseDate(String date) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"        //date input could be \"at 2/12/2019 1800\""},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"        //returns \"2019-12-02 1800\""},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"            String errMessage \u003d \"Sorry! Format of date is wrong. \" +"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"                    \"Example input should be \" +"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"                    \"deadline return book /by 2/12/2019 1800.\";"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"            String[] strArr \u003d date.split(\" \");"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"            if (strArr.length !\u003d 3 \u0026\u0026 strArr.length !\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"                throw new DukeException(errMessage);"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"            String[] dateArr \u003d new String[0];"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"            int dateIndex \u003d -1;"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"            int timeIndex \u003d -1;"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"            if (strArr.length \u003d\u003d 2) {"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"                dateArr \u003d strArr[0].split(\"/\");"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":"                dateIndex \u003d 0;"},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":"                timeIndex \u003d 1;"},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":"            } else if (strArr.length \u003d\u003d 3) {"},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"                dateArr \u003d strArr[1].split(\"/\");"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":"                dateIndex \u003d 1;"},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"                timeIndex \u003d 2;"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"            if (dateArr.length !\u003d 3) {"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"                throw new DukeException(errMessage);"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"            //if day \u003c 10, add 0 in front"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":"            if (Integer.parseInt(dateArr[0]) \u003c 10) {"},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":"                dateArr[0] \u003d \"0\" + dateArr[0];"},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"            //transform 2/12/2019 to 2019-12-02"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"            date \u003d dateArr[2] + \"-\" + dateArr[1] + \"-\" + dateArr[0];"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"            strArr[dateIndex] \u003d date;"},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"            String res \u003d strArr[dateIndex] + \" \" + strArr[timeIndex];"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":"            return res;"},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":"            throw e;"},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":"    public static String parseDateToSaveFormat(LocalDate date) {"},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"        int day \u003d date.getDayOfMonth();"},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"        int month \u003d date.getMonthValue();"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"        String monthStr \u003d Integer.toString(month);"},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"        int year \u003d date.getYear();"},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"        if (month \u003c 10) {"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"            monthStr \u003d \"0\" + monthStr;"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"        return day + \"/\" + monthStr + \"/\" + year;"},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":"    public static String[] splitTaskAndDate(String task) throws DukeException {"},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":"            // date \u003d \"at 2/12/2019 1800\""},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"            String date \u003d task.substring(task.indexOf(\"/\") + 1, task.length());"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":"            // date \u003d 2019-12-02 1800"},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"            // task \u003d project meeting"},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":"            task \u003d task.substring(0, task.indexOf(\"/\") - 1);"},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":"            String[] res \u003d new String[]{task, date};"},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"            return res;"},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"            throw e;"},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":151}},{"path":"com/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.storage;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    private static String FILE_PATH \u003d \"src/main/data/input.txt\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    private String filePath;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    public Storage(String filePath) {"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    public void printFileContents() {"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"            File f \u003d new File(this.filePath); // create a File for the given file path"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"            while (s.hasNext()) {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"                System.out.println(s.nextLine());"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"File not found\");"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"            File f \u003d new File(this.filePath);"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"            List\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"            while (s.hasNext()) {"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"                String taskString \u003d s.nextLine();"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"                String[] taskStringArr \u003d taskString.split(\" - \");"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"                Task task \u003d Parser.parseTask(taskStringArr);"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"                taskArr.add(task);"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"            return taskArr;"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(\"File failed to load. Initializing new File...\");"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    private static String parseTaskToString(Task task) {"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        return task.parseToSaveFormat();"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    public static void saveListToFile(TaskList taskList) throws IOException {"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        FileWriter fileWriter \u003d new FileWriter((FILE_PATH));"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"\";"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH, true); // create a FileWriter in append mode"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        for (int i \u003d 0; i \u003c taskList.getList().size(); i++) {"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"            List\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"            input +\u003d parseTaskToString(list.get(i)) + \"\\n\";"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"        fw.write(input);"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"        fw.close();"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":64}},{"path":"com/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    private List\u003cTask\u003e list;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    public TaskList(List\u003cTask\u003e taskArr) {"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"        this.list \u003d taskArr;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    public void addItem(Task item) {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        this.list.add(item);"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    public int size() {"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        return this.list.size();"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    public void setDone(int index) {"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        Task task \u003d this.list.get(index);"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        task.setDone(true);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    public Task getItem(int index) {"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        return this.list.get(index);"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    public List getList() {"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        return this.list;"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    public Task remove(int index) {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        return this.list.remove(index);"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    ;"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":43}},{"path":"com/duke/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"public class Deadlines extends Task {"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public Deadlines(String task, String dateAndTime) {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        //date \u003d 2019-12-02 1800"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"//        // date \u003d \u0027by Sunday\u0027"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"//        String date \u003d task.substring(task.indexOf(\"/\") + 1, task.length());"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"//        date \u003d com.duke.events.Task.reformatDate(date); // (by: Sunday)"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"//"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"//        // task \u003d return book"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"//        task \u003d task.substring(0, task.indexOf(\"/\") - 1);"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    public Deadlines(String task, String dateAndTime, boolean done) {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"        this.done \u003d done;"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d this.done ? \"[✓]\" : \"[✗]\";"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String date \u003d dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        String time \u003d \"\";"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"        return \"[D]\" + doneIndicator + \" \" + this.task + \" (by: \" + date + \", \" + time + \")\";"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.done ? \"1\" : \"0\";"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        res \u003d \"D - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":60}},{"path":"com/duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"public class Events extends Task {"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public Events(String task, String dateAndTime) {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"//        // date \u003d \u0027at Sunday 2-4pm\u0027"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"//        String time \u003d task.substring(task.indexOf(\"/\") + 1, task.length());"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"//        time \u003d com.duke.events.Task.reformatDate(time); // (by: Sunday)"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"//"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"//        // task \u003d project meeting"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"//        task \u003d task.substring(0, task.indexOf(\"/\") - 1);"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    public Events(String task, String dateAndTime, boolean done) {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        this.done \u003d done;"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d this.done ? \"[✓]\" : \"[✗]\";"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"        String date \u003d dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String time \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"        return \"[E]\" + doneIndicator + \" \" + this.task + \" (at: \" + date + \", \" + time + \")\";"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.done ? \"1\" : \"0\";"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        res \u003d \"E - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":59}},{"path":"com/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"    protected String task;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"    protected boolean done;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    public Task() {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"        this.task \u003d null;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"        this.done \u003d false;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    public Task(String task, boolean done) {"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"        this.done \u003d done;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    public Task(String task) {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        this.done \u003d false;"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    public void setDone(boolean bool) {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        this.done \u003d bool;"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    public String getTask() {"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        return this.task;"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    public boolean getDone() {"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        return this.done;"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    //format date from \u0027by Sunday\u0027 to \u0027(by: Sunday)\u0027"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"    public static String reformatDate(String input) {"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        return \"(\" + input.substring(0, input.indexOf(\" \"))"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"                + \":\""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"                + input.substring(input.indexOf(\" \"))"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"                + \")\";"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.done ? \"1\" : \"0\";"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        return \"com.duke.events.Task - \" + isDoneStr + \" - \" + this.task;"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":46}},{"path":"com/duke/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class ToDos extends Task {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"    public ToDos(String task) {"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"        super(task);"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public ToDos(String task, boolean isDone) {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        super(task, isDone);"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d this.done ? \"[✓]\" : \"[✗]\";"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        return \"[T]\" + doneIndicator + \" \" + this.task;"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.done ? \"1\" : \"0\";"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"T - \" + isDoneStr + \" - \" + this.task;"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":25}},{"path":"com/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.ui;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"    private TaskList taskList;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    private Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    private Ui(TaskList taskList) {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        this.taskList \u003d null;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    private static void sectionize() {"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\t____________________________________________________________\");"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    private static String errorMessage() {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    public static void initialize() {"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        Ui ui \u003d new Ui(new TaskList());"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        ui.showWelcome();"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"        ui.listen();"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    public static void initialize(TaskList taskList) {"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"        Ui ui \u003d new Ui(taskList);"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"        ui.showWelcome();"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        ui.listen();"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    private static void exit() {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        System.exit(0);"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    private void reply() {"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\tGot it. I\u0027ve added this task: \");"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\t\\t\" + this.taskList.getList().get(this.taskList.size() - 1).toString());"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\tNow you have \" + this.taskList.size() + \" tasks in the list.\");"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    private void listItems() {"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\tHere are the tasks in your list:\");"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        int counter \u003d 1;"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\t\" + counter + \".\" + this.taskList.getItem(i).toString());"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"            counter++;"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"    private void sayBye() {"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"            Storage.saveListToFile(taskList);"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\tBye. Hope to see you again soon!\");"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"Sorry! The file failed to save. Please try again.\");"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"    private void markDone(int index) {"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"        this.taskList.setDone(index);"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\tNice! I\u0027ve marked this task as done: \");"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"\\t\" + this.taskList.getItem(index).toString());"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"    private void remove(int index) {"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"            Task task \u003d this.taskList.remove(index);"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\tNoted. I\u0027ve removed this task: \");"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\t\\t\" + task.toString());"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\tNow you have \" + this.taskList.size() + \" tasks in the list.\");"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"\\t☹ OOPS!!! I\u0027m sorry, this task does not exist in your list!\");"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"    public void showWelcome() {"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"Hello! I\u0027m DukeBot\");"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":"    public void showLoadingError() {"},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"File failed to load. Initializing new File...\");"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":"        initialize();"},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":"    private void listen() {"},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"        String input \u003d scanner.nextLine();"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"        if (Parser.isDone(input)) {"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"            int index \u003d Integer.parseInt(input.substring(5, 6)) - 1;"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":"            this.markDone(index);"},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"        } else if (Parser.isDelete(input)) {"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":"            int index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":"            this.remove(index);"},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"        } else if (input.equals(\"bye\")) {"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"            this.sayBye();"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"            exit();"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":"            this.listItems();"},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":"            try {"},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"                if (!Parser.correctInputFormat(input)) {"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":"                    throw new DukeException(Ui.errorMessage());"},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"                //pull type of task and the task"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":"                String taskType \u003d input.substring(0, input.indexOf(\" \"));"},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"                String task \u003d input.substring(input.indexOf(\" \") + 1);"},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"                String[] taskAndDateArr;"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"                String date;"},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"                //System.out.println(task);"},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"                switch (taskType) {"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"                case (\"todo\"):"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"                    taskList.addItem(new ToDos(task));"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"                    this.reply();"},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":"                    break;"},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":"                case (\"deadline\"):"},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":"                    // date \u003d \u0027by Sunday\u0027"},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"                    taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":"                    task \u003d taskAndDateArr[0];"},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"                    date \u003d taskAndDateArr[1];"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":"                    taskList.addItem(new Deadlines(task, date));"},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"                    this.reply();"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":"                    break;"},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"                case (\"event\"):"},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":"                    taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":"                    task \u003d taskAndDateArr[0];"},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"                    date \u003d taskAndDateArr[1];"},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":"                    taskList.addItem(new Events(task, date));"},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"                    this.reply();"},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":"                    break;"},{"lineNumber":150,"author":{"gitId":"sogggy"},"content":"                default:"},{"lineNumber":151,"author":{"gitId":"sogggy"},"content":"                    throw new DukeException(Ui.errorMessage());"},{"lineNumber":152,"author":{"gitId":"sogggy"},"content":"                }"},{"lineNumber":153,"author":{"gitId":"sogggy"},"content":"            } catch (DukeException e) {"},{"lineNumber":154,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":155,"author":{"gitId":"sogggy"},"content":"                System.out.println(\"\\t\\t\" + e.getMessage());"},{"lineNumber":156,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":157,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"sogggy"},"content":"        this.listen();"},{"lineNumber":160,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":161}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"### List all Task entries"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"list"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"Lists all available task entries."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"`list`"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"Here are the tasks in your list:"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"1.[T][✓] read book"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"2.[D][✗] return book (by: 6 JUNE 2020, 800am)"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"### Delete Task entry"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"delete \u003cTASK INDEX\u003e"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"Deletes the task entry specified by its serial number."},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"`delete 4`"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"\t[T][✓] join sports club"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"Now you have 7 tasks in the list."},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"### Mark Task as Done"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"done \u003cTASK INDEX\u003e"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"Marks the task entry specified by its serial number as done."},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"`delete 4`"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"\t[T][✓] join sports club"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"Now you have 7 tasks in the list."},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"### Find Task"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"find \u003cWORD IN TASK DESCRIPTION\u003e"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"Finds all tasks that have the input keyword(s) in it\u0027s **description**."},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"`delete 4`"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"\t[T][✓] join sports club"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"Now you have 7 tasks in the list."},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"### Exit"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"bye"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"Exits from **Duke**."},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"`delete 4`"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"\t[T][✓] join sports club"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"Now you have 7 tasks in the list."},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"### Add Task"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"---"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"#### Deadline"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"deadline \u003cTASK\u003e /by \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":"Adds a *deadline*. Includes the date and time the *deadline* is due by."},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"`deadline Do CS2103T User Guide /by 14/09/2020 1200`"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"\t[D][✗] Do CS2103T User Guide (by: 14 SEPTEMBER 2020, 0pm)"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":"Now you have 9 tasks in the list."},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":"#### Event"},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"event \u003cTASK\u003e /by \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"Adds an *event*. Includes the date and time the *event* is due by."},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"`event Halloween Party /at 18/09/2020 1800`"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":"\t[E][✗] Halloween Party (at: 18 SEPTEMBER 2020, 600pm)"},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"Now you have 8 tasks in the list."},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"#### ToDo"},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"todo \u003cTASK\u003e"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"Adds a *todo*."},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"`todo Hang Laundry`"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":"\t[T][✗] Hang Laundry"},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"Now you have 10 tasks in the list."},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"### Add Recurring Task"},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"---"},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":150,"author":{"gitId":"sogggy"},"content":"#### Recurring Deadline"},{"lineNumber":151,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":152,"author":{"gitId":"sogggy"},"content":"recurring deadline \u003cTASK\u003e /by \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e"},{"lineNumber":153,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":154,"author":{"gitId":"sogggy"},"content":"Adds a *recurring deadline*. Includes the date and time the *recurring deadline* is due by."},{"lineNumber":155,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":156,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":157,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":158,"author":{"gitId":"sogggy"},"content":"`recurring deadline Watch CS2103T lecture /by 14/09/2020 1400 /weekly`"},{"lineNumber":159,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":160,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":161,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":162,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":163,"author":{"gitId":"sogggy"},"content":"\t[R] [D][✗] Watch CS2103T lecture (by: 14 SEPTEMBER 2020, 200pm)"},{"lineNumber":164,"author":{"gitId":"sogggy"},"content":"Now you have 12 tasks in the list."},{"lineNumber":165,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":166,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":167,"author":{"gitId":"sogggy"},"content":"#### Recurring Event"},{"lineNumber":168,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":169,"author":{"gitId":"sogggy"},"content":"recurring event \u003cTASK\u003e /by \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e"},{"lineNumber":170,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":171,"author":{"gitId":"sogggy"},"content":"Adds a *recurring event*. Includes the date and time the *recurring event* is due by."},{"lineNumber":172,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":173,"author":{"gitId":"sogggy"},"content":"Example of usage: "},{"lineNumber":174,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":175,"author":{"gitId":"sogggy"},"content":"`recurring event Stand-up Meeting /at 18/09/2020 1800 /daily`"},{"lineNumber":176,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":177,"author":{"gitId":"sogggy"},"content":"Expected outcome:"},{"lineNumber":178,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":179,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":180,"author":{"gitId":"sogggy"},"content":"\t[R] [E][✗] Stand-up Meeting (at: 18 SEPTEMBER 2020, 600pm)"},{"lineNumber":181,"author":{"gitId":"sogggy"},"content":"Now you have 13 tasks in the list."},{"lineNumber":182,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"sogggy"},"content":"#### ToDo"},{"lineNumber":185,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":186,"author":{"gitId":"sogggy"},"content":"recurring todo \u003cTASK\u003e"},{"lineNumber":187,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":188,"author":{"gitId":"sogggy"},"content":"Adds a *recurring todo*."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"sogggy"},"content":"`recurring todo Hang Laundry`"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":195,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":196,"author":{"gitId":"sogggy"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":197,"author":{"gitId":"sogggy"},"content":"\t[R] [T][✗] Hang Laundry"},{"lineNumber":198,"author":{"gitId":"sogggy"},"content":"Now you have 14 tasks in the list."},{"lineNumber":199,"author":{"gitId":"sogggy"},"content":"```"},{"lineNumber":200,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"sogggy":187,"-":13}},{"path":"src/main/data/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"T - 1 - read book"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":"D - 0 - return book - 6/06/2020 800"},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"E - 0 - project meeting - 6/08/2020 2130"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"T - 1 - join sports club"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"T - 0 - throw rubbish"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"E - 0 - halloween party - 22/10/2020 2000"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"R - E - 0 - wedding anniversary - 28/02/2020 0010 - yearly"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"R - E - 0 - exercise - 7/09/2020 0700 - daily"}],"authorContributionMap":{"sogggy":8}},{"path":"src/main/java/com/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import com.duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import com.duke.gui.controllers.DialogBox;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import com.duke.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import com.duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":" * Entry point to application."},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":" * Initializes all components needed to run program."},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"public class Duke extends Application {"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    private static String FILE_PATH \u003d \"src/main/data/input.txt\";"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    private Storage storage;"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    private Ui ui;"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    private TaskList tasks;"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     * Duke Default Constructor."},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    public Duke() {"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        this.storage \u003d new Storage(FILE_PATH);"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"            this.tasks \u003d new TaskList(storage.load());"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"            this.ui \u003d new Ui(tasks);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"            ui.initialize();"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"            this.ui \u003d new Ui(tasks);"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     * Duke Default Constructor. Includes filepath to persistent storage."},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    public Duke(String filePath) {"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        ui \u003d new Ui();"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"            ui.showLoadingError();"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"    public Ui getUi() {"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        return this.ui;"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"    public void start(Stage stage) {"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        //Step 1. Setting up required components"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"        ScrollPane scrollPane \u003d new ScrollPane();"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"        VBox dialogContainer \u003d new VBox();"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"        TextField userInput \u003d new TextField();"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        Button sendButton \u003d new Button(\"Send\");"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"        Scene scene \u003d new Scene(mainLayout);"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"        stage.setScene(scene);"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"        stage.show();"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"        //Step2. Format window to look as expected"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"        stage.setTitle(\"Duke Application\");"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"        stage.setResizable(false);"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"        //Step 3. Add functionality to handle user input."},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"            handleUserInput(userInput, dialogContainer);"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"        });"},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":"            handleUserInput(userInput, dialogContainer);"},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"        });"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"     * Iteration 2:"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"    private void handleUserInput(TextField userInput, VBox dialogContainer) {"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"        String userText \u003d userInput.getText();"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"        String dukeText \u003d getResponse(userText);"},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":"                DialogBox.getUserDialog(userText, user),"},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":"                DialogBox.getDukeDialog(dukeText, duke)"},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"        );"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":"        userInput.clear();"},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"     * Replace this stub with your completed method."},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":"    public String getResponse(String input) {"},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"        String res \u003d this.ui.listen(input);"},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sogggy":149,"-":1}},{"path":"src/main/java/com/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import com.duke.gui.Main;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"public class Launcher {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    public static void main(String[] args) {"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":14}},{"path":"src/main/java/com/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":" * Exception thrown when an unexpected event related to using the Duke application occurs."},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"     * Class constructor."},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"     * @param message Message attached to exception thrown."},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":17}},{"path":"src/main/java/com/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.gui;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.Duke;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import com.duke.gui.controllers.MainWindow;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":" * A GUI for Duke using FXML."},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"public class Main extends Application {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"            stage.setTitle(\"DukeBot\");"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":35}},{"path":"src/main/java/com/duke/gui/controllers/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.gui.controllers;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"public class DialogBox extends HBox {"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    private Label dialog;"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    private Circle imageCircle;"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"     * Constructor for DialogBox custom control."},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"     * @param text label text."},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"     * @param img profile picture."},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        HBox.setHgrow(dialog, Priority.ALWAYS);"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        dialog.setText(text);"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        dialog.setWrapText(true);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        imageCircle.setFill(new ImagePattern(img));"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    private void flip() {"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"        Collections.reverse(tmp);"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        db.setAlignment(Pos.CENTER_RIGHT);"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"        return db;"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        db.flip();"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"        db.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"        return db;"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"}"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":""}],"authorContributionMap":{"sogggy":69}},{"path":"src/main/java/com/duke/gui/controllers/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.gui.controllers;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import com.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        DialogBox user \u003d DialogBox.getUserDialog(input, userImage);"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"        DialogBox duke \u003d DialogBox.getDukeDialog(response, dukeImage);"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        dialogContainer.getChildren().addAll(user, duke);"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":54}},{"path":"src/main/java/com/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.parser;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import com.duke.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Deadlines;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Events;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringDeadlines;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringEvents;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringTask;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringToDos;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Task;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.ToDos;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":" * Parser which is responsible in parsing all instruction from user."},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    private static final String PARSE_DATE_ERROR_MESSAGE \u003d \"Sorry! Format of date is wrong. \""},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"            + \"Example input should be \""},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"            + \"deadline return book /by 2/12/2019 1800. \""},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"            + \"Please fix storage file before loading Duke again.\";"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether format is correct for a \u0027help command."},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    public static boolean isHelp(String input) {"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        return input.equals(\"help\");"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether format is correct for a \u0027done\u0027 command."},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"    public static boolean isDone(String input) {"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \");"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"        return inputArr.length \u003d\u003d 2"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 input.substring(0, 4).equals(\"done\")"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 isNumber(input.substring(5, 6));"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether format is correct for a \u0027delete\u0027 command."},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"    public static boolean isDelete(String input) {"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \");"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"        return inputArr.length \u003d\u003d 2"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 input.substring(0, 6).equals(\"delete\")"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"                \u0026\u0026 isNumber(input.substring(7, 8));"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether format is correct for a \u0027find\u0027 command."},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"    public static boolean isFind(String input) {"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        return inputArr[0].equals(\"find\") \u0026\u0026 inputArr.length \u003d\u003d 2;"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"    private static boolean isNumber(String input) {"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"            Integer.parseInt(input);"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"            return true;"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether command is to add tasks or not."},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"     * This includes checks for \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027 tasks."},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"    public static boolean isAddTask(String input) {"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"        if (inputArr.length \u003d\u003d 1) {"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":"        boolean isTodoBool \u003d isToDoFormat(inputArr);"},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"        boolean isDeadlineBool \u003d isDeadlineFormat(inputArr);"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":"        boolean isEventBool \u003d isEventFormat(inputArr);"},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"        return isTodoBool ^ isDeadlineBool ^ isEventBool;"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"    private static boolean isToDoFormat(String[] inputArr) {"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"        boolean doesTaskExists \u003d !inputArr[1].equals(\"\");"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"        boolean isLengthTwo \u003d inputArr.length \u003d\u003d 2;"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":"        boolean isToDo \u003d inputArr[0].equals(\"todo\");"},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"        return isLengthTwo \u0026\u0026 isToDo \u0026\u0026 doesTaskExists;"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"    private static boolean isDeadlineFormat(String[] inputArr) {"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"        return inputArr[0].equals(\"deadline\");"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":"    private static boolean isEventFormat(String[] inputArr) {"},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"        return inputArr[0].equals(\"event\");"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"     * Returns boolean on whether command is to add recurring tasks or not."},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring todo Do Laundry /weekly\u0027"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring deadline Pay Bills /by 9/07/2019 1800 /monthly\u0027"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring event Wedding Anniversary /at 30/10/2020 1800 /yearly\u0027"},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, returns false, else returns true."},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"     * @param input Input command to check format."},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"     * @return boolean."},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"    public static boolean isRecurringTask(String input) {"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"        if (inputArr.length !\u003d 2) {"},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":"        String taskAndInterval \u003d inputArr[1];"},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"        String[] taskAndIntervalArr \u003d taskAndInterval.split(\" /\");"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":"        System.out.println(Arrays.toString(taskAndIntervalArr));"},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"        boolean isCorrectTaskAndIntervalFormat \u003d taskAndIntervalArr.length \u003d\u003d 2 || taskAndIntervalArr.length \u003d\u003d 3;"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":"        boolean isRecurring \u003d inputArr[0].equals(\"recurring\");"},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"        if (!isRecurring \u0026\u0026 !isCorrectTaskAndIntervalFormat) {"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":"            return false;"},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":"        String taskType \u003d taskAndIntervalArr[0].split(\" \")[0];"},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"        boolean isValidInterval \u003d true;"},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":"        if (!taskType.equals(\"todo\")) {"},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"            isValidInterval \u003d checkRecurringInterval(taskAndIntervalArr[2]);"},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"sogggy"},"content":"        return isRecurring \u0026\u0026 isValidInterval;"},{"lineNumber":151,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":153,"author":{"gitId":"sogggy"},"content":"    private static boolean checkRecurringInterval(String timePeriod) {"},{"lineNumber":154,"author":{"gitId":"sogggy"},"content":"        String timePeriodLowerCase \u003d timePeriod.toLowerCase();"},{"lineNumber":155,"author":{"gitId":"sogggy"},"content":"        return timePeriodLowerCase.equals(\"daily\")"},{"lineNumber":156,"author":{"gitId":"sogggy"},"content":"                || timePeriodLowerCase.equals(\"weekly\")"},{"lineNumber":157,"author":{"gitId":"sogggy"},"content":"                || timePeriodLowerCase.equals(\"monthly\")"},{"lineNumber":158,"author":{"gitId":"sogggy"},"content":"                || timePeriodLowerCase.equals(\"yearly\");"},{"lineNumber":159,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":161,"author":{"gitId":"sogggy"},"content":"    public static String getTaskType(String input) {"},{"lineNumber":162,"author":{"gitId":"sogggy"},"content":"        return input.substring(0, input.indexOf(\" \"));"},{"lineNumber":163,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":165,"author":{"gitId":"sogggy"},"content":"    public static String getTask(String input) {"},{"lineNumber":166,"author":{"gitId":"sogggy"},"content":"        return input.substring(input.indexOf(\" \") + 1);"},{"lineNumber":167,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":169,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"sogggy"},"content":"     * Parses a string saved from Storage into a Task Object."},{"lineNumber":171,"author":{"gitId":"sogggy"},"content":"     * This includes \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027 and recurring tasks."},{"lineNumber":172,"author":{"gitId":"sogggy"},"content":"     * If format is wrong, throws DukeException."},{"lineNumber":173,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"sogggy"},"content":"     * @param taskString Input taskString to check format."},{"lineNumber":175,"author":{"gitId":"sogggy"},"content":"     * @return Task if taskString is in correct format."},{"lineNumber":176,"author":{"gitId":"sogggy"},"content":"     * @throws DukeException if format is wrong."},{"lineNumber":177,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"sogggy"},"content":"    public static Task parseTask(String taskString) throws DukeException {"},{"lineNumber":179,"author":{"gitId":"sogggy"},"content":"        String[] taskStringArr \u003d taskString.split(\" - \");"},{"lineNumber":180,"author":{"gitId":"sogggy"},"content":"        String taskCode \u003d taskStringArr[0];"},{"lineNumber":181,"author":{"gitId":"sogggy"},"content":"        if (taskCode.equals(\"R\")) {"},{"lineNumber":182,"author":{"gitId":"sogggy"},"content":"            return parseRecurringTask(taskString);"},{"lineNumber":183,"author":{"gitId":"sogggy"},"content":"        } else if (isNonRecurringTask(taskCode)) {"},{"lineNumber":184,"author":{"gitId":"sogggy"},"content":"            return parseNonRecurringTask(taskString);"},{"lineNumber":185,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":186,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(\"Task is of invalid input format!\");"},{"lineNumber":187,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":190,"author":{"gitId":"sogggy"},"content":"    private static RecurringTask parseRecurringTask(String taskString) throws DukeException {"},{"lineNumber":191,"author":{"gitId":"sogggy"},"content":"        String[] taskStringArr \u003d taskString.split(\" - \");"},{"lineNumber":192,"author":{"gitId":"sogggy"},"content":"        String taskCode \u003d taskStringArr[1];"},{"lineNumber":193,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d taskStringArr[2];"},{"lineNumber":194,"author":{"gitId":"sogggy"},"content":"        String task \u003d taskStringArr[3];"},{"lineNumber":195,"author":{"gitId":"sogggy"},"content":"        String interval \u003d taskStringArr[5];"},{"lineNumber":196,"author":{"gitId":"sogggy"},"content":"        boolean isDone \u003d isDoneStr.equals(\"1\");"},{"lineNumber":197,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":198,"author":{"gitId":"sogggy"},"content":"        String recurringCode \u003d taskStringArr[0];"},{"lineNumber":199,"author":{"gitId":"sogggy"},"content":"        assert recurringCode.equals(\"R\");"},{"lineNumber":200,"author":{"gitId":"sogggy"},"content":"        assert taskCode.equals(\"T\") ^ taskCode.equals(\"D\") ^ taskCode.equals(\"E\");"},{"lineNumber":201,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":202,"author":{"gitId":"sogggy"},"content":"        if (taskCode.equals(\"T\")) {"},{"lineNumber":203,"author":{"gitId":"sogggy"},"content":"            return new RecurringToDos(task, isDone, interval);"},{"lineNumber":204,"author":{"gitId":"sogggy"},"content":"        } else if (taskCode.equals(\"D\")) {"},{"lineNumber":205,"author":{"gitId":"sogggy"},"content":"            String date \u003d taskStringArr[4];"},{"lineNumber":206,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":207,"author":{"gitId":"sogggy"},"content":"            return new RecurringDeadlines(task, date, isDone, interval);"},{"lineNumber":208,"author":{"gitId":"sogggy"},"content":"        } else if (taskCode.equals(\"E\")) {"},{"lineNumber":209,"author":{"gitId":"sogggy"},"content":"            String date \u003d taskStringArr[4];"},{"lineNumber":210,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":211,"author":{"gitId":"sogggy"},"content":"            return new RecurringEvents(task, date, isDone, interval);"},{"lineNumber":212,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":213,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(\"Task is of invalid input format!\");"},{"lineNumber":214,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":217,"author":{"gitId":"sogggy"},"content":"    private static boolean isNonRecurringTask(String taskCode) {"},{"lineNumber":218,"author":{"gitId":"sogggy"},"content":"        return taskCode.equals(\"T\") || taskCode.equals(\"E\") || taskCode.equals(\"D\");"},{"lineNumber":219,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":221,"author":{"gitId":"sogggy"},"content":"    private static Task parseNonRecurringTask(String taskString) throws DukeException {"},{"lineNumber":222,"author":{"gitId":"sogggy"},"content":"        String[] taskStringArr \u003d taskString.split(\" - \");"},{"lineNumber":223,"author":{"gitId":"sogggy"},"content":"        String taskCode \u003d taskStringArr[0];"},{"lineNumber":224,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d taskStringArr[1];"},{"lineNumber":225,"author":{"gitId":"sogggy"},"content":"        String task \u003d taskStringArr[2];"},{"lineNumber":226,"author":{"gitId":"sogggy"},"content":"        boolean isDone \u003d isDoneStr.equals(\"1\");"},{"lineNumber":227,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":228,"author":{"gitId":"sogggy"},"content":"        assert taskCode.equals(\"T\") ^ taskCode.equals(\"D\") ^ taskCode.equals(\"E\");"},{"lineNumber":229,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":230,"author":{"gitId":"sogggy"},"content":"        if (taskCode.equals(\"T\")) {"},{"lineNumber":231,"author":{"gitId":"sogggy"},"content":"            return new ToDos(task, isDone);"},{"lineNumber":232,"author":{"gitId":"sogggy"},"content":"        } else if (taskCode.equals(\"D\")) {"},{"lineNumber":233,"author":{"gitId":"sogggy"},"content":"            String date \u003d taskStringArr[3];"},{"lineNumber":234,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":235,"author":{"gitId":"sogggy"},"content":"            return new Deadlines(task, date, isDone);"},{"lineNumber":236,"author":{"gitId":"sogggy"},"content":"        } else if (taskCode.equals(\"E\")) {"},{"lineNumber":237,"author":{"gitId":"sogggy"},"content":"            String date \u003d taskStringArr[3];"},{"lineNumber":238,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":239,"author":{"gitId":"sogggy"},"content":"            return new Events(task, date, isDone);"},{"lineNumber":240,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":241,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(\"Task is of invalid input format!\");"},{"lineNumber":242,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":245,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"sogggy"},"content":"     * Parses a date saved from a Storage file."},{"lineNumber":247,"author":{"gitId":"sogggy"},"content":"     * Parses into LocalDate format and time in 24-hour format (HHMM) concatenated in a string."},{"lineNumber":248,"author":{"gitId":"sogggy"},"content":"     * For example, transforms an input \"at 2/12/2019 1800\" to \"2019-12-02 1800\"."},{"lineNumber":249,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"sogggy"},"content":"     * @param date Input date to be parsed."},{"lineNumber":251,"author":{"gitId":"sogggy"},"content":"     * @return String date in LocalDate format and time in 24-hour format (HHMM)."},{"lineNumber":252,"author":{"gitId":"sogggy"},"content":"     * @throws DukeException if input format is incorrect."},{"lineNumber":253,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"sogggy"},"content":"    public static String parseDate(String date) throws DukeException {"},{"lineNumber":255,"author":{"gitId":"sogggy"},"content":"        //date input could be \"at 2/12/2019 1800\""},{"lineNumber":256,"author":{"gitId":"sogggy"},"content":"        //returns \"2019-12-02 1800\""},{"lineNumber":257,"author":{"gitId":"sogggy"},"content":"        String[] strArr \u003d date.split(\" \");"},{"lineNumber":258,"author":{"gitId":"sogggy"},"content":"        if (strArr.length !\u003d 3 \u0026\u0026 strArr.length !\u003d 2) {"},{"lineNumber":259,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(PARSE_DATE_ERROR_MESSAGE);"},{"lineNumber":260,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":262,"author":{"gitId":"sogggy"},"content":"        String[] dateArr \u003d getDateArr(strArr);"},{"lineNumber":263,"author":{"gitId":"sogggy"},"content":"        int dateIndex \u003d getDateIndex(strArr);"},{"lineNumber":264,"author":{"gitId":"sogggy"},"content":"        int timeIndex \u003d getTimeIndex(strArr);"},{"lineNumber":265,"author":{"gitId":"sogggy"},"content":"        if (dateArr.length !\u003d 3) {"},{"lineNumber":266,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(PARSE_DATE_ERROR_MESSAGE);"},{"lineNumber":267,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":269,"author":{"gitId":"sogggy"},"content":"        //transform 2/12/2019 to 2019-12-02"},{"lineNumber":270,"author":{"gitId":"sogggy"},"content":"        String finalDate \u003d reformatDate(dateArr);"},{"lineNumber":271,"author":{"gitId":"sogggy"},"content":"        strArr[dateIndex] \u003d finalDate;"},{"lineNumber":272,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":273,"author":{"gitId":"sogggy"},"content":"        return strArr[dateIndex] + \" \" + strArr[timeIndex];"},{"lineNumber":274,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":276,"author":{"gitId":"sogggy"},"content":"    private static String reformatDate(String[] dateArr) {"},{"lineNumber":277,"author":{"gitId":"sogggy"},"content":"        return dateArr[2] + \"-\" + dateArr[1] + \"-\" + dateArr[0];"},{"lineNumber":278,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":280,"author":{"gitId":"sogggy"},"content":"    private static int getDateIndex(String[] strArr) {"},{"lineNumber":281,"author":{"gitId":"sogggy"},"content":"        int dateIndex \u003d -1;"},{"lineNumber":282,"author":{"gitId":"sogggy"},"content":"        if (strArr.length \u003d\u003d 2) {"},{"lineNumber":283,"author":{"gitId":"sogggy"},"content":"            dateIndex \u003d 0;"},{"lineNumber":284,"author":{"gitId":"sogggy"},"content":"        } else if (strArr.length \u003d\u003d 3) {"},{"lineNumber":285,"author":{"gitId":"sogggy"},"content":"            dateIndex \u003d 1;"},{"lineNumber":286,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"sogggy"},"content":"        return dateIndex;"},{"lineNumber":288,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":290,"author":{"gitId":"sogggy"},"content":"    private static int getTimeIndex(String[] strArr) {"},{"lineNumber":291,"author":{"gitId":"sogggy"},"content":"        int timeIndex \u003d -1;"},{"lineNumber":292,"author":{"gitId":"sogggy"},"content":"        if (strArr.length \u003d\u003d 2) {"},{"lineNumber":293,"author":{"gitId":"sogggy"},"content":"            timeIndex \u003d 1;"},{"lineNumber":294,"author":{"gitId":"sogggy"},"content":"        } else if (strArr.length \u003d\u003d 3) {"},{"lineNumber":295,"author":{"gitId":"sogggy"},"content":"            timeIndex \u003d 2;"},{"lineNumber":296,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"sogggy"},"content":"        return timeIndex;"},{"lineNumber":298,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":300,"author":{"gitId":"sogggy"},"content":"    private static String[] getDateArr(String[] strArr) throws DukeException {"},{"lineNumber":301,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":302,"author":{"gitId":"sogggy"},"content":"            String[] dateArr \u003d new String[0];"},{"lineNumber":303,"author":{"gitId":"sogggy"},"content":"            if (strArr.length \u003d\u003d 2) {"},{"lineNumber":304,"author":{"gitId":"sogggy"},"content":"                dateArr \u003d strArr[0].split(\"/\");"},{"lineNumber":305,"author":{"gitId":"sogggy"},"content":"            } else if (strArr.length \u003d\u003d 3) {"},{"lineNumber":306,"author":{"gitId":"sogggy"},"content":"                dateArr \u003d strArr[1].split(\"/\");"},{"lineNumber":307,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":308,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":309,"author":{"gitId":"sogggy"},"content":"            //first index in dateArr is day of date"},{"lineNumber":310,"author":{"gitId":"sogggy"},"content":"            dateArr[0] \u003d parseDay(dateArr[0]);"},{"lineNumber":311,"author":{"gitId":"sogggy"},"content":"            return dateArr;"},{"lineNumber":312,"author":{"gitId":"sogggy"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":313,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(PARSE_DATE_ERROR_MESSAGE);"},{"lineNumber":314,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":317,"author":{"gitId":"sogggy"},"content":"    private static String parseDay(String day) {"},{"lineNumber":318,"author":{"gitId":"sogggy"},"content":"        if (Integer.parseInt(day) \u003c 10) {"},{"lineNumber":319,"author":{"gitId":"sogggy"},"content":"            return \"0\" + day;"},{"lineNumber":320,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":321,"author":{"gitId":"sogggy"},"content":"        return day;"},{"lineNumber":322,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":324,"author":{"gitId":"sogggy"},"content":"     * Parses a date into a format savable to Storage file."},{"lineNumber":325,"author":{"gitId":"sogggy"},"content":"     * Parses from LocalDate format to Storage file format."},{"lineNumber":326,"author":{"gitId":"sogggy"},"content":"     * For example, transforms an input \"2019-12-02\" to \"2/12/2019\"."},{"lineNumber":327,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":328,"author":{"gitId":"sogggy"},"content":"     * @param date Input LocalDate object to be parsed."},{"lineNumber":329,"author":{"gitId":"sogggy"},"content":"     * @return String date in Storage file format."},{"lineNumber":330,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":331,"author":{"gitId":"sogggy"},"content":"    public static String parseDateToSaveFormat(LocalDate date) {"},{"lineNumber":332,"author":{"gitId":"sogggy"},"content":"        int day \u003d date.getDayOfMonth();"},{"lineNumber":333,"author":{"gitId":"sogggy"},"content":"        int month \u003d date.getMonthValue();"},{"lineNumber":334,"author":{"gitId":"sogggy"},"content":"        String monthStr \u003d Integer.toString(month);"},{"lineNumber":335,"author":{"gitId":"sogggy"},"content":"        int year \u003d date.getYear();"},{"lineNumber":336,"author":{"gitId":"sogggy"},"content":"        if (month \u003c 10) {"},{"lineNumber":337,"author":{"gitId":"sogggy"},"content":"            monthStr \u003d \"0\" + monthStr;"},{"lineNumber":338,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":339,"author":{"gitId":"sogggy"},"content":"        return day + \"/\" + monthStr + \"/\" + year;"},{"lineNumber":340,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":342,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":343,"author":{"gitId":"sogggy"},"content":"     * Parses a task command into an array containing the task and date."},{"lineNumber":344,"author":{"gitId":"sogggy"},"content":"     * Transforms an input \"event halloween party /at 2/12/2019 1800\" to \"[event halloween party, at 2/12/2019 1800]\"."},{"lineNumber":345,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":346,"author":{"gitId":"sogggy"},"content":"     * @param task Input task to be parsed."},{"lineNumber":347,"author":{"gitId":"sogggy"},"content":"     * @return String[] Array of strings containing task and date."},{"lineNumber":348,"author":{"gitId":"sogggy"},"content":"     * @throws DukeException throws DukeException if format of input command is wrong."},{"lineNumber":349,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"sogggy"},"content":"    public static String[] splitTaskAndDate(String task) throws DukeException {"},{"lineNumber":351,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":352,"author":{"gitId":"sogggy"},"content":"            // date \u003d \"at 2/12/2019 1800\""},{"lineNumber":353,"author":{"gitId":"sogggy"},"content":"            String date \u003d task.substring(task.indexOf(\"/\") + 1, task.length());"},{"lineNumber":354,"author":{"gitId":"sogggy"},"content":"            // date \u003d 2019-12-02 1800"},{"lineNumber":355,"author":{"gitId":"sogggy"},"content":"            date \u003d parseDate(date);"},{"lineNumber":356,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":357,"author":{"gitId":"sogggy"},"content":"            // task \u003d project meeting"},{"lineNumber":358,"author":{"gitId":"sogggy"},"content":"            task \u003d task.substring(0, task.indexOf(\"/\") - 1);"},{"lineNumber":359,"author":{"gitId":"sogggy"},"content":"            String[] res \u003d new String[]{task, date};"},{"lineNumber":360,"author":{"gitId":"sogggy"},"content":"            return res;"},{"lineNumber":361,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":362,"author":{"gitId":"sogggy"},"content":"            throw dukeException;"},{"lineNumber":363,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":365}},{"path":"src/main/java/com/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.storage;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import com.duke.exceptions.DukeException;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"import com.duke.tasklist.TaskList;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Task;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":" * Represents a Storage."},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":" * Pulls data from a persistent file upon initialisation of application."},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":" * Saves data to persistent file upon termination of session."},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    private static String FILE_PATH \u003d \"src/main/data/input.txt\";"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    public Storage(String filePath) {"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * Prints contents from persistent file."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    public void printFileContents() {"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"            File f \u003d new File(this.filePath); // create a File for the given file path"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"            while (s.hasNext()) {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"                System.out.println(s.nextLine());"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"            System.out.println(\"File not found\");"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     * Loads tasks saved in storage file into List when program starts."},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     * @return List returns list with tasks saved as entries."},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     * @throws DukeException throws DukeException if file fails to load."},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"     * @throws DukeException throws DukeException if entry in file has incorrectly saved format."},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"            File f \u003d new File(this.filePath);"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"            List\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"            while (s.hasNext()) {"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"                String taskString \u003d s.nextLine();"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"                Task task \u003d Parser.parseTask(taskString);"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"                taskArr.add(task);"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"            return taskArr;"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(\"File failed to load. Initializing new File...\");"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"            throw e;"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"    private static String parseTaskToString(Task task) {"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"        return task.parseToSaveFormat();"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"     * Saves tasks from List into a persistent file."},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"     * @throws IOException throws IOException if file saving fails."},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"    public static void saveListToFile(TaskList taskList) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"            String input \u003d \"\";"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"            FileWriter fw \u003d new FileWriter(FILE_PATH, true); // create a FileWriter in append mode"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"            for (int i \u003d 0; i \u003c taskList.getList().size(); i++) {"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"                List\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"                input +\u003d parseTaskToString(list.get(i)) + \"\\n\";"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"            fw.write(input);"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"            fw.close();"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"        } catch (IOException ioException) {"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"            String errMessage \u003d \"Sorry! The file failed to save.\";"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(errMessage);"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":97}},{"path":"src/main/java/com/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":" * Represents a Tasklist holding tasks."},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    private List\u003cTask\u003e list;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    public TaskList(List\u003cTask\u003e taskArr) {"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"        this.list \u003d taskArr;"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"     * Adds entry into TaskList."},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"     * @param item task to add into TaskList."},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    public void addItem(Task item) {"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"        this.list.add(item);"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * Returns number of entries in TaskList."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     * @return int returns number of entries in TaskList."},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    public int size() {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        return this.list.size();"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"     * Marks specified entry in TaskList as done."},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"     * @param index index of task in TaskList."},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"    public void setDone(int index) {"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"        Task task \u003d this.list.get(index);"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        task.setDone(true);"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"     * Returns specified task in TaskList."},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"     * @param index index of task in TaskList."},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"     * @return List returns list with tasks saved as entries."},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"    public Task getItem(int index) {"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"        return this.list.get(index);"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"     * returns list under the TaskList object."},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"     * @return List returns list under TaskList object."},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"    public List getList() {"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"        return this.list;"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"     * Removes entry from TaskList."},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"     * @param index Index of entry to be removed."},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    public Task remove(int index) {"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        return this.list.remove(index);"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":79}},{"path":"src/main/java/com/duke/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":" * Represents a Deadline task item."},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"public class Deadlines extends Task {"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    public static final String DEADLINE_SYMBOL \u003d \"[D]\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"     * Constructor for Deadlines."},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    public Deadlines(String task, String dateAndTime) {"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        //date \u003d 2019-12-02 1800"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"     * Constructor for Deadlines."},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     * @param isDone Whether task is done or not."},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    public Deadlines(String task, String dateAndTime, boolean isDone) {"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String date \u003d generateDateString();"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String time \u003d generateTimeString();"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        assert !time.equals(\"\");"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        return DEADLINE_SYMBOL + doneIndicator + \" \" + this.task + \" (by: \" + date + \", \" + time + \")\";"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"    private String generateDateString() {"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        return dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"    private String generateTimeString() {"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"        String time;"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"        return time;"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        res \u003d \"D - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":93}},{"path":"src/main/java/com/duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":" * Represents a Event task item."},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"public class Events extends Task {"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    public static final String EVENT_SYMBOL \u003d \"[E]\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"     * Constructor for Events."},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    public Events(String task, String dateAndTime) {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        // date \u003d \u00272018-10-23 6pm\u0027"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * Constructor for Events."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"     * @param isDone Whether task is done or not."},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"    public Events(String task, String dateAndTime, boolean isDone) {"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        String date \u003d generateDateString();"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        String time \u003d generateTimeString();"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"        assert !time.equals(\"\");"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"        return EVENT_SYMBOL + doneIndicator + \" \" + this.task + \" (at: \" + date + \", \" + time + \")\";"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"    private String generateDateString() {"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        return dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"    private String generateTimeString() {"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"        String time;"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"        return time;"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the Events object to be saved in persistent file."},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"\";"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"        res \u003d \"E - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":96}},{"path":"src/main/java/com/duke/tasks/RecurringDeadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class RecurringDeadlines extends RecurringTask {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    public static final String DEADLINE_SYMBOL \u003d \"[D]\";"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringDeadlines."},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    public RecurringDeadlines(String task, String dateAndTime, String recurringPeriod) {"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringDeadlines."},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     * @param isDone Whether task is done or not."},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    public RecurringDeadlines(String task, String dateAndTime, boolean isDone, String recurringPeriod) {"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the RecurringDeadline object to be saved in persistent file."},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the RecurringDeadline object to be saved in persistent file."},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"D - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        String date \u003d generateDateString();"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"        String time \u003d generateTimeString();"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        assert !time.equals(\"\");"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"        return RECURRING_SYMBOL + \" \" + DEADLINE_SYMBOL"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"                + doneIndicator + \" \" + this.task + \" (by: \" + date + \", \" + time + \")\";"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"    private String generateDateString() {"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        return dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"    private String generateTimeString() {"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"        String time;"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"        return time;"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":92}},{"path":"src/main/java/com/duke/tasks/RecurringEvents.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class RecurringEvents extends RecurringTask {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    public static final String EVENT_SYMBOL \u003d \"[E]\";"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    protected LocalDate date;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    protected int time;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringEvents."},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    public RecurringEvents(String task, String dateAndTime, String recurringPeriod) {"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringEvents."},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     * @param dateAndTime date and time of deadline."},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * @param isDone Whether task is done or not."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    public RecurringEvents(String task, String dateAndTime, boolean isDone, String recurringPeriod) {"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String[] dateAndTimeArr \u003d dateAndTime.split(\" \");"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        this.date \u003d LocalDate.parse(dateAndTimeArr[0]);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"        this.time \u003d Integer.parseInt(dateAndTimeArr[1]);"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the Events object to be saved in persistent file."},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String dateSaveFormatStr \u003d Parser.parseDateToSaveFormat(this.date);"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"E - \" + isDoneStr + \" - \" + this.task + \" - \" + dateSaveFormatStr + \" \" + this.time;"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"        String date \u003d generateDateString();"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"        String time \u003d generateTimeString();"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"        assert !time.equals(\"\");"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"        return RECURRING_SYMBOL + \" \" + EVENT_SYMBOL"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"                + doneIndicator + \" \" + this.task + \" (at: \" + date + \", \" + time + \")\";"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    private String generateDateString() {"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        int dayOfMonth \u003d this.date.getDayOfMonth();"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        String month \u003d this.date.getMonth().toString();"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"        int year \u003d this.date.getYear();"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"        return dayOfMonth + \" \" + month + \" \" + year;"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"    private String generateTimeString() {"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"        String time;"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"        if (this.time \u003c 100) {"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"            time \u003d \"12\" + this.time + \"am\";"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"        } else if (this.time \u003c 1200) {"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"            time \u003d this.time + \"am\";"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"            time \u003d (this.time - 1200) + \"pm\";"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"        return time;"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":94}},{"path":"src/main/java/com/duke/tasks/RecurringTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public abstract class RecurringTask extends Task {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"    public static final String RECURRING_SYMBOL \u003d \"[R]\";"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"    protected String recurringPeriod;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"     * Default Constructor for Deadlines."},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"     * Nothing is initialized in this constructor."},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public RecurringTask() {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        super();"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d \"none\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    public RecurringTask(String task) {"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        super(task);"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"    public RecurringTask(String task, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        super(task, isDone);"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":22}},{"path":"src/main/java/com/duke/tasks/RecurringToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class RecurringToDos extends RecurringTask {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"    public static final String TODO_SYMBOL \u003d \"[T]\";"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringToDos."},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    public RecurringToDos(String task, String recurringPeriod) {"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"        super(task);"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"     * Constructor for RecurringToDos."},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"     * dateAndTime is of YYYY-MM-DD 10pm format."},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"     * @param isDone Whether task is done or not."},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"     * @param recurringPeriod the period of recurrence in days."},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    public RecurringToDos(String task, boolean isDone, String recurringPeriod) {"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"        super(task, isDone);"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"        this.recurringPeriod \u003d recurringPeriod;"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the RecurringToDos object to be saved in persistent file."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the RecurringToDos object to be saved in persistent file."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"T - \" + isDoneStr + \" - \" + this.task;"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"        return RECURRING_SYMBOL + \" \" + TODO_SYMBOL + doneIndicator + \" \" + this.task;"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":53}},{"path":"src/main/java/com/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":" * Represents a task item."},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    protected static final String COMPLETED_INDICATOR \u003d \"[\\u2713]\";"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    protected static final String INCOMPLETE_INDICATOR \u003d \"[\\u2718]\";"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    protected String task;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"     * Constructor for Tasks."},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    public Task() {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        this.task \u003d null;"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"     * Constructor for Tasks."},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"     * @param isDone whether task is done."},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    public Task(String task, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"     * Constructor for Tasks."},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"     * @param task Task description."},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    public Task(String task) {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        this.task \u003d task;"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d false;"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"     * Sets a task as done."},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"     * @param bool boolean on whether task is done or not."},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    public void setDone(boolean bool) {"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        this.isDone \u003d bool;"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"     * Getter for details of task."},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"     * @return String returns task attribute of Task object."},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"    public String getTask() {"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"        return this.task;"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"     * Getter for whether task is done."},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"     * @return boolean returns done attribute of Task object."},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"    public boolean getDone() {"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"        return this.isDone;"},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"     * Reformats date into format displayable."},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"     * Transform an example input \"by Sunday\" to \"(by: Sunday)\"."},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"     * @return String returns String in displayable format."},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    //format date from \u0027by Sunday\u0027 to \u0027(by: Sunday)\u0027"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"    public static String reformatDate(String input) {"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        return \"(\" + input.substring(0, input.indexOf(\" \"))"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"                + \":\""},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"                + input.substring(input.indexOf(\" \"))"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"                + \")\";"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"    protected String getDoneIndicator() {"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"        return this.isDone ? COMPLETED_INDICATOR : INCOMPLETE_INDICATOR;"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the Task object to be saved in persistent file."},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"    // Task - 1 - read book"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"    public abstract String parseToSaveFormat();"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"    public abstract String toString();"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":97}},{"path":"src/main/java/com/duke/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":" * Represents a todo task item."},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class ToDos extends Task {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    public static final String TODO_SYMBOL \u003d \"[T]\";"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public ToDos(String task) {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        super(task);"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    public ToDos(String task, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        super(task, isDone);"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the contents of the specified array."},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the contents of the specified array."},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        String doneIndicator \u003d getDoneIndicator();"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"        return TODO_SYMBOL + doneIndicator + \" \" + this.task;"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"     * Returns a string representation of the Deadline object to be saved in persistent file."},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"     * @return String Returns a string representation of the ToDos object to be saved in persistent file."},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"    public String parseToSaveFormat() {"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"        String isDoneStr \u003d this.isDone ? \"1\" : \"0\";"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"T - \" + isDoneStr + \" - \" + this.task;"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":40}},{"path":"src/main/java/com/duke/ui/Logo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.ui;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class Logo {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"     * Returns Duke logo."},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    public static String logo() {"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"        return \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sogggy":9,"-":6}},{"path":"src/main/java/com/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.ui;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"import com.duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import com.duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"import com.duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"import com.duke.tasklist.TaskList;"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Deadlines;"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Events;"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringDeadlines;"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringEvents;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.RecurringToDos;"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"import com.duke.tasks.ToDos;"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":" * Deals with responding to the user."},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":" * Calls methods of other classes to save/pull entries into/from session-based storage."},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":" */"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"public class Ui {"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"    private final String ERROR_MESSAGE \u003d \"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"    private final String DUKE_SECTION \u003d \"\\t____________________________________________________________\";"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":"    private TaskList taskList;"},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    private Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"    public Ui(TaskList taskList) {"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    public Ui() {"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":"        this.taskList \u003d null;"},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"    private void generateCliReply(String reply) {"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        System.out.println(DUKE_SECTION);"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        System.out.println(reply);"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        System.out.println(DUKE_SECTION);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"    private String replyEmptyList() {"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"        return \"The tasklist is currently empty.\";"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"     * Prints all the instructions available for DukeBot."},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":"    private String handleHelpCommand() {"},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"        return \"The list of commands are of below:\\n\""},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"                + \"list - List all available entries in the tasklist.\\n\""},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"                + \"Delete Task: delete \u003cTASK INDEX\u003e\\n\""},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"                + \"Mark Task as Done: done \u003cTASK INDEX\u003e\\n\""},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"                + \"Find Task: find \u003cWORD IN TASK DESCRIPTION\u003e\\n\""},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"                + \"\\n\""},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"                + \"Add Tasks: \\n\""},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":"                + \"Deadline: deadline \u003cTASK\u003e /by \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e\\n\""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"                + \"Event: event \u003cTASK\u003e /at \u003cDATE IN D/MM/YYYY\u003e \u003c24H TIME FORMAT\u003e\\n\""},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"                + \"ToDo : todo \u003cTASK\u003e\\n\""},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"                + \"\\n\""},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"                + \"Add Recurring Tasks:\\n\""},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"                + \"Recurring Deadline: recurring deadline \u003cTASK\u003e /by \u003cD/MM/YYYY\u003e \u003cTIME\u003e /\u003cPERIOD\u003e\\n\""},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"                + \"Recurring Event: recurring event \u003cTASK\u003e /at \u003cD/MM/YYYY\u003e \u003cTIME\u003e /\u003cPERIOD\u003e\\n\""},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"                + \"Recurring ToDo: recurring todo \u003cTASK\u003e\\n\""},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":"                + \"\\n\""},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"                + \"Exit: bye\";"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"     * Prints entries stored in Duke."},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"    private String handleListCommand() {"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":"        assert this.taskList !\u003d null;"},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"            String reply \u003d this.replyEmptyList();"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":"        String reply \u003d generateTaskList();"},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"    private String generateTaskList() {"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tHere are the tasks in your list:\";"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"        int counter \u003d 1;"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"            reply +\u003d \"\\n\";"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"            reply +\u003d \"\\t\" + counter + \".\" + this.taskList.getItem(i).toString();"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"            counter++;"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":"     * Prints entries that match input keyword."},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":"     * @param input input keyword to match."},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":"    private String handleFindCommand(String input) {"},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":"        if (input.isBlank()) {"},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"            return this.replyNoEmptyString(input);"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":"        assert input !\u003d null;"},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"        assert !input.isBlank();"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":"        List\u003cTask\u003e matchingTaskList \u003d generateMatchingTaskList(input);"},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"        if (matchingTaskList.size() \u003d\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"            return this.replyNoTaskFound(input);"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"            return this.replyTasksFound(matchingTaskList);"},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"    private List\u003cTask\u003e generateMatchingTaskList(String input) {"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":"        int len \u003d this.taskList.size();"},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"        ArrayList\u003cTask\u003e matchingTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"        for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"            Task task \u003d this.taskList.getItem(i);"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":"            String taskDescription \u003d task.getTask();"},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"            if (taskDescription.contains(input)) {"},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"                matchingTaskList.add(task);"},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":"        return matchingTaskList;"},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"    private String replyNoEmptyString(String input) {"},{"lineNumber":134,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tI\u0027m sorry, please specify what you want to find!\";"},{"lineNumber":135,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":136,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":137,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":139,"author":{"gitId":"sogggy"},"content":"    private String replyNoTaskFound(String input) {"},{"lineNumber":140,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tI\u0027m sorry, there are no tasks found with keyword \" + input + \".\";"},{"lineNumber":141,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":142,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":143,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":145,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"sogggy"},"content":"     * Lists entries that match input keyword."},{"lineNumber":147,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"sogggy"},"content":"     * @param taskList list of tasks that match input keyword."},{"lineNumber":149,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"sogggy"},"content":"    private String replyTasksFound(List\u003cTask\u003e taskList) {"},{"lineNumber":151,"author":{"gitId":"sogggy"},"content":"        assert taskList !\u003d null;"},{"lineNumber":152,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":153,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tHere are the matching tasks in your list:\";"},{"lineNumber":154,"author":{"gitId":"sogggy"},"content":"        for (Task task : taskList) {"},{"lineNumber":155,"author":{"gitId":"sogggy"},"content":"            reply +\u003d \"\\n\\t\";"},{"lineNumber":156,"author":{"gitId":"sogggy"},"content":"            reply +\u003d task.toString();"},{"lineNumber":157,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":159,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":160,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":162,"author":{"gitId":"sogggy"},"content":"    private String handleByeCommand() {"},{"lineNumber":163,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"sogggy"},"content":"            Storage.saveListToFile(this.taskList);"},{"lineNumber":165,"author":{"gitId":"sogggy"},"content":"            String reply \u003d replyBye();"},{"lineNumber":166,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":167,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":168,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":169,"author":{"gitId":"sogggy"},"content":"            String reply \u003d dukeException.getMessage();"},{"lineNumber":170,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":171,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":172,"author":{"gitId":"sogggy"},"content":"        } finally {"},{"lineNumber":173,"author":{"gitId":"sogggy"},"content":"            exit();"},{"lineNumber":174,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":177,"author":{"gitId":"sogggy"},"content":"    private String replyBye() {"},{"lineNumber":178,"author":{"gitId":"sogggy"},"content":"        return \"\\tBye. Hope to see you again soon!\";"},{"lineNumber":179,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":181,"author":{"gitId":"sogggy"},"content":"    private String handleDoneCommand(int index) {"},{"lineNumber":182,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":183,"author":{"gitId":"sogggy"},"content":"            this.taskList.setDone(index);"},{"lineNumber":184,"author":{"gitId":"sogggy"},"content":"            String reply \u003d replyDone(index);"},{"lineNumber":185,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":186,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":187,"author":{"gitId":"sogggy"},"content":"        } catch (IndexOutOfBoundsException exception) {"},{"lineNumber":188,"author":{"gitId":"sogggy"},"content":"            String reply \u003d \"\\t\\u2639 OOPS!!! I\u0027m sorry, this task does not exist in your list!\";"},{"lineNumber":189,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":190,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":191,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":194,"author":{"gitId":"sogggy"},"content":"    private String replyDone(int index) {"},{"lineNumber":195,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tNice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":196,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"\\t\" + this.taskList.getItem(index).toString();"},{"lineNumber":197,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":198,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":200,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"sogggy"},"content":"     * Removes specified entry from Duke and prints reply."},{"lineNumber":202,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"sogggy"},"content":"     * @param index index of entry to be removed."},{"lineNumber":204,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"sogggy"},"content":"    private String handleRemoveCommand(int index) {"},{"lineNumber":206,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":207,"author":{"gitId":"sogggy"},"content":"            Task task \u003d this.taskList.remove(index);"},{"lineNumber":208,"author":{"gitId":"sogggy"},"content":"            String reply \u003d replyRemove(task);"},{"lineNumber":209,"author":{"gitId":"sogggy"},"content":"            generateCliReply(reply);"},{"lineNumber":210,"author":{"gitId":"sogggy"},"content":"            return reply;"},{"lineNumber":211,"author":{"gitId":"sogggy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":212,"author":{"gitId":"sogggy"},"content":"            String errorMessage \u003d \"\\t\\u2639 OOPS!!! I\u0027m sorry, this task does not exist in your list!\";"},{"lineNumber":213,"author":{"gitId":"sogggy"},"content":"            generateCliReply(errorMessage);"},{"lineNumber":214,"author":{"gitId":"sogggy"},"content":"            return errorMessage;"},{"lineNumber":215,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":218,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"sogggy"},"content":"     * Adds Recurring task to Duke and give reply."},{"lineNumber":220,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring todo Do Laundry /weekly\u0027"},{"lineNumber":221,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring deadline Pay Bills /by 9/07/2019 1800 /monthly\u0027"},{"lineNumber":222,"author":{"gitId":"sogggy"},"content":"     * Example command is \u0027recurring event Wedding Anniversary /at 30/10/2020 1800 /yearly\u0027"},{"lineNumber":223,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"sogggy"},"content":"     * @param input The input string for recurring task instruction."},{"lineNumber":225,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"sogggy"},"content":"    private String handleRecurringTaskCommand(String input) {"},{"lineNumber":227,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":228,"author":{"gitId":"sogggy"},"content":"            String instruction \u003d input.split(\" \", 2)[1];"},{"lineNumber":229,"author":{"gitId":"sogggy"},"content":"            String taskType \u003d instruction.split(\" \", 2)[0];"},{"lineNumber":230,"author":{"gitId":"sogggy"},"content":"            String task \u003d instruction.split(\" \", 2)[1].split(\" /\")[0];"},{"lineNumber":231,"author":{"gitId":"sogggy"},"content":"            String intervalString \u003d \"\";"},{"lineNumber":232,"author":{"gitId":"sogggy"},"content":"            if (!taskType.equals(\"todo\")) {"},{"lineNumber":233,"author":{"gitId":"sogggy"},"content":"                task +\u003d \" /\" + instruction.split(\" \", 2)[1].split(\" /\")[1];"},{"lineNumber":234,"author":{"gitId":"sogggy"},"content":"                intervalString \u003d instruction.split(\" \", 2)[1].split(\" /\")[2];"},{"lineNumber":235,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":236,"author":{"gitId":"sogggy"},"content":"            return this.addRecurringTask(taskType, task, intervalString);"},{"lineNumber":237,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":238,"author":{"gitId":"sogggy"},"content":"            String errorMessage \u003d \"\\t\\t\" + dukeException.getMessage();"},{"lineNumber":239,"author":{"gitId":"sogggy"},"content":"            generateCliReply(errorMessage);"},{"lineNumber":240,"author":{"gitId":"sogggy"},"content":"            return errorMessage;"},{"lineNumber":241,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":244,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"sogggy"},"content":"     * Adds Recurring Task entry into Duke and replies with response."},{"lineNumber":246,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":247,"author":{"gitId":"sogggy"},"content":"     * @param taskType type of Task: event, todo, deadline."},{"lineNumber":248,"author":{"gitId":"sogggy"},"content":"     * @param task Description of task."},{"lineNumber":249,"author":{"gitId":"sogggy"},"content":"     * @param interval time interval. Examples include: weekly, monthly, yearly."},{"lineNumber":250,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"sogggy"},"content":"    private String addRecurringTask(String taskType, String task, String interval) throws DukeException {"},{"lineNumber":252,"author":{"gitId":"sogggy"},"content":"        assert this.taskList !\u003d null;"},{"lineNumber":253,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":254,"author":{"gitId":"sogggy"},"content":"        String date \u003d \"\";"},{"lineNumber":255,"author":{"gitId":"sogggy"},"content":"        switch (taskType) {"},{"lineNumber":256,"author":{"gitId":"sogggy"},"content":"        case (\"todo\"):"},{"lineNumber":257,"author":{"gitId":"sogggy"},"content":"            this.taskList.addItem(new RecurringToDos(task, interval));"},{"lineNumber":258,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":259,"author":{"gitId":"sogggy"},"content":"        case (\"event\"):"},{"lineNumber":260,"author":{"gitId":"sogggy"},"content":"            String[] taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":261,"author":{"gitId":"sogggy"},"content":"            task \u003d taskAndDateArr[0];"},{"lineNumber":262,"author":{"gitId":"sogggy"},"content":"            date \u003d taskAndDateArr[1];"},{"lineNumber":263,"author":{"gitId":"sogggy"},"content":"            taskList.addItem(new RecurringEvents(task, date, interval));"},{"lineNumber":264,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":265,"author":{"gitId":"sogggy"},"content":"        case (\"deadline\"):"},{"lineNumber":266,"author":{"gitId":"sogggy"},"content":"            taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":267,"author":{"gitId":"sogggy"},"content":"            task \u003d taskAndDateArr[0];"},{"lineNumber":268,"author":{"gitId":"sogggy"},"content":"            date \u003d taskAndDateArr[1];"},{"lineNumber":269,"author":{"gitId":"sogggy"},"content":"            taskList.addItem(new RecurringDeadlines(task, date, interval));"},{"lineNumber":270,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":271,"author":{"gitId":"sogggy"},"content":"        default:"},{"lineNumber":272,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":273,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"sogggy"},"content":"        String reply \u003d generateAddListReply();"},{"lineNumber":275,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":276,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":277,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":279,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":280,"author":{"gitId":"sogggy"},"content":"     * Adds task to Duke and give reply."},{"lineNumber":281,"author":{"gitId":"sogggy"},"content":"     *"},{"lineNumber":282,"author":{"gitId":"sogggy"},"content":"     * @param taskType type of task."},{"lineNumber":283,"author":{"gitId":"sogggy"},"content":"     * @param task details of the task."},{"lineNumber":284,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"sogggy"},"content":"    private String handleTaskCommand(String taskType, String task) {"},{"lineNumber":286,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":287,"author":{"gitId":"sogggy"},"content":"            switch (taskType) {"},{"lineNumber":288,"author":{"gitId":"sogggy"},"content":"            case (\"todo\"):"},{"lineNumber":289,"author":{"gitId":"sogggy"},"content":"            case (\"deadline\"):"},{"lineNumber":290,"author":{"gitId":"sogggy"},"content":"            case (\"event\"):"},{"lineNumber":291,"author":{"gitId":"sogggy"},"content":"                return this.addTask(taskType, task);"},{"lineNumber":292,"author":{"gitId":"sogggy"},"content":"            default:"},{"lineNumber":293,"author":{"gitId":"sogggy"},"content":"                throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":294,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":296,"author":{"gitId":"sogggy"},"content":"            String errorMessage \u003d \"\\t\\t\" + dukeException.getMessage();"},{"lineNumber":297,"author":{"gitId":"sogggy"},"content":"            generateCliReply(errorMessage);"},{"lineNumber":298,"author":{"gitId":"sogggy"},"content":"            return errorMessage;"},{"lineNumber":299,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":300,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":302,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"sogggy"},"content":"     * Adds entry into Duke and replies with response."},{"lineNumber":304,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":305,"author":{"gitId":"sogggy"},"content":"    private String addTask(String taskType, String task) throws DukeException {"},{"lineNumber":306,"author":{"gitId":"sogggy"},"content":"        assert this.taskList !\u003d null;"},{"lineNumber":307,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":308,"author":{"gitId":"sogggy"},"content":"        String date \u003d \"\";"},{"lineNumber":309,"author":{"gitId":"sogggy"},"content":"        switch (taskType) {"},{"lineNumber":310,"author":{"gitId":"sogggy"},"content":"        case (\"todo\"):"},{"lineNumber":311,"author":{"gitId":"sogggy"},"content":"            this.taskList.addItem(new ToDos(task));"},{"lineNumber":312,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":313,"author":{"gitId":"sogggy"},"content":"        case (\"event\"):"},{"lineNumber":314,"author":{"gitId":"sogggy"},"content":"            String[] taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":315,"author":{"gitId":"sogggy"},"content":"            task \u003d taskAndDateArr[0];"},{"lineNumber":316,"author":{"gitId":"sogggy"},"content":"            date \u003d taskAndDateArr[1];"},{"lineNumber":317,"author":{"gitId":"sogggy"},"content":"            taskList.addItem(new Events(task, date));"},{"lineNumber":318,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":319,"author":{"gitId":"sogggy"},"content":"        case (\"deadline\"):"},{"lineNumber":320,"author":{"gitId":"sogggy"},"content":"            taskAndDateArr \u003d Parser.splitTaskAndDate(task);"},{"lineNumber":321,"author":{"gitId":"sogggy"},"content":"            task \u003d taskAndDateArr[0];"},{"lineNumber":322,"author":{"gitId":"sogggy"},"content":"            date \u003d taskAndDateArr[1];"},{"lineNumber":323,"author":{"gitId":"sogggy"},"content":"            taskList.addItem(new Deadlines(task, date));"},{"lineNumber":324,"author":{"gitId":"sogggy"},"content":"            break;"},{"lineNumber":325,"author":{"gitId":"sogggy"},"content":"        default:"},{"lineNumber":326,"author":{"gitId":"sogggy"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":327,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":329,"author":{"gitId":"sogggy"},"content":"        String reply \u003d generateAddListReply();"},{"lineNumber":330,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":331,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":332,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":333,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":334,"author":{"gitId":"sogggy"},"content":"    private String generateAddListReply() {"},{"lineNumber":335,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tGot it. I\u0027ve added this task:\\n\";"},{"lineNumber":336,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"\\t\\t\" + this.taskList.getList().get(this.taskList.size() - 1).toString() + \"\\n\";"},{"lineNumber":337,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"\\tNow you have \" + this.taskList.size() + \" tasks in the list.\";"},{"lineNumber":338,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":339,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":341,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":342,"author":{"gitId":"sogggy"},"content":"    private String replyRemove(Task task) {"},{"lineNumber":343,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\\tNoted. I\u0027ve removed this task:\\n\";"},{"lineNumber":344,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"\\t\\t\" + task.toString() + \"\\n\";"},{"lineNumber":345,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"\\tNow you have \" + this.taskList.size() + \" tasks in the list.\";"},{"lineNumber":346,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":347,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":349,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":350,"author":{"gitId":"sogggy"},"content":"     * Prints welcome message for Duke."},{"lineNumber":351,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":352,"author":{"gitId":"sogggy"},"content":"    public String showWelcome() {"},{"lineNumber":353,"author":{"gitId":"sogggy"},"content":"        String reply \u003d \"\";"},{"lineNumber":354,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"Hello! I\u0027m DukeBot\\n\";"},{"lineNumber":355,"author":{"gitId":"sogggy"},"content":"        reply +\u003d \"What can I do for you?\";"},{"lineNumber":356,"author":{"gitId":"sogggy"},"content":"        generateCliReply(reply);"},{"lineNumber":357,"author":{"gitId":"sogggy"},"content":"        return reply;"},{"lineNumber":358,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":359,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":360,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":361,"author":{"gitId":"sogggy"},"content":"     * Initializes Duke with welcome message."},{"lineNumber":362,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":363,"author":{"gitId":"sogggy"},"content":"    public String initialize() {"},{"lineNumber":364,"author":{"gitId":"sogggy"},"content":"        return showWelcome();"},{"lineNumber":365,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":366,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":367,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":368,"author":{"gitId":"sogggy"},"content":"     * Tells user that persistent file failed to load."},{"lineNumber":369,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":370,"author":{"gitId":"sogggy"},"content":"    public void showLoadingError() {"},{"lineNumber":371,"author":{"gitId":"sogggy"},"content":"        System.out.println(\"File failed to load. Initializing new File...\");"},{"lineNumber":372,"author":{"gitId":"sogggy"},"content":"        initialize();"},{"lineNumber":373,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":375,"author":{"gitId":"sogggy"},"content":"    private static void exit() {"},{"lineNumber":376,"author":{"gitId":"sogggy"},"content":"        System.exit(0);"},{"lineNumber":377,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":379,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":380,"author":{"gitId":"sogggy"},"content":"     * Listens from commands from user."},{"lineNumber":381,"author":{"gitId":"sogggy"},"content":"     * Possible commands include: \"done 1\", \"delete 2\", \"bye\", \"list\"."},{"lineNumber":382,"author":{"gitId":"sogggy"},"content":"     * Possible event command: \"event halloween party /at 2/12/2019 1800\"."},{"lineNumber":383,"author":{"gitId":"sogggy"},"content":"     * Possible deadline command: \"deadline add comments /by 2/12/2019 1800\"."},{"lineNumber":384,"author":{"gitId":"sogggy"},"content":"     * Possible todo command: \"todo read book\"."},{"lineNumber":385,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":386,"author":{"gitId":"sogggy"},"content":"    public void listen() {"},{"lineNumber":387,"author":{"gitId":"sogggy"},"content":"        String input \u003d scanner.nextLine();"},{"lineNumber":388,"author":{"gitId":"sogggy"},"content":"        handleCommand(input);"},{"lineNumber":389,"author":{"gitId":"sogggy"},"content":"        this.listen();"},{"lineNumber":390,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":391,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":392,"author":{"gitId":"sogggy"},"content":"    /**"},{"lineNumber":393,"author":{"gitId":"sogggy"},"content":"     * Listens from commands from user."},{"lineNumber":394,"author":{"gitId":"sogggy"},"content":"     * Possible commands include: \"done 1\", \"delete 2\", \"bye\", \"list\"."},{"lineNumber":395,"author":{"gitId":"sogggy"},"content":"     * Possible event command: \"event halloween party /at 2/12/2019 1800\"."},{"lineNumber":396,"author":{"gitId":"sogggy"},"content":"     * Possible deadline command: \"deadline add comments /by 2/12/2019 1800\"."},{"lineNumber":397,"author":{"gitId":"sogggy"},"content":"     * Possible todo command: \"todo read book\"."},{"lineNumber":398,"author":{"gitId":"sogggy"},"content":"     */"},{"lineNumber":399,"author":{"gitId":"sogggy"},"content":"    public String listen(String input) {"},{"lineNumber":400,"author":{"gitId":"sogggy"},"content":"        String res \u003d handleCommand(input);"},{"lineNumber":401,"author":{"gitId":"sogggy"},"content":"        return res;"},{"lineNumber":402,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":403,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":404,"author":{"gitId":"sogggy"},"content":"    private String handleCommand(String input) {"},{"lineNumber":405,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":406,"author":{"gitId":"sogggy"},"content":"            if (Parser.isHelp(input)) {"},{"lineNumber":407,"author":{"gitId":"sogggy"},"content":"                return handleHelpCommand();"},{"lineNumber":408,"author":{"gitId":"sogggy"},"content":"            } else if (Parser.isDone(input)) {"},{"lineNumber":409,"author":{"gitId":"sogggy"},"content":"                int index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":410,"author":{"gitId":"sogggy"},"content":"                return handleDoneCommand(index);"},{"lineNumber":411,"author":{"gitId":"sogggy"},"content":"            } else if (Parser.isDelete(input)) {"},{"lineNumber":412,"author":{"gitId":"sogggy"},"content":"                int index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":413,"author":{"gitId":"sogggy"},"content":"                return handleRemoveCommand(index);"},{"lineNumber":414,"author":{"gitId":"sogggy"},"content":"            } else if (input.equals(\"bye\")) {"},{"lineNumber":415,"author":{"gitId":"sogggy"},"content":"                return handleByeCommand();"},{"lineNumber":416,"author":{"gitId":"sogggy"},"content":"            } else if (input.equals(\"list\")) {"},{"lineNumber":417,"author":{"gitId":"sogggy"},"content":"                return handleListCommand();"},{"lineNumber":418,"author":{"gitId":"sogggy"},"content":"            } else if (Parser.isFind(input)) {"},{"lineNumber":419,"author":{"gitId":"sogggy"},"content":"                String item \u003d input.split(\" \", 2)[1];"},{"lineNumber":420,"author":{"gitId":"sogggy"},"content":"                return handleFindCommand(item);"},{"lineNumber":421,"author":{"gitId":"sogggy"},"content":"            } else if (Parser.isAddTask(input)) {"},{"lineNumber":422,"author":{"gitId":"sogggy"},"content":"                //pull type of task and the task"},{"lineNumber":423,"author":{"gitId":"sogggy"},"content":"                String taskType \u003d Parser.getTaskType(input);"},{"lineNumber":424,"author":{"gitId":"sogggy"},"content":"                String task \u003d Parser.getTask(input);"},{"lineNumber":425,"author":{"gitId":"sogggy"},"content":"                return this.handleTaskCommand(taskType, task);"},{"lineNumber":426,"author":{"gitId":"sogggy"},"content":"            } else if (Parser.isRecurringTask(input)) {"},{"lineNumber":427,"author":{"gitId":"sogggy"},"content":"                return handleRecurringTaskCommand(input);"},{"lineNumber":428,"author":{"gitId":"sogggy"},"content":"            } else {"},{"lineNumber":429,"author":{"gitId":"sogggy"},"content":"                throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":430,"author":{"gitId":"sogggy"},"content":"            }"},{"lineNumber":431,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":432,"author":{"gitId":"sogggy"},"content":"            String errorMessage \u003d \"\\t\\t\" + dukeException.getMessage();"},{"lineNumber":433,"author":{"gitId":"sogggy"},"content":"            generateCliReply(errorMessage);"},{"lineNumber":434,"author":{"gitId":"sogggy"},"content":"            return errorMessage;"},{"lineNumber":435,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":436,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":437}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"\u003cfx:root minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"116.0\" style\u003d\"-fx-background-radius: 30; -fx-background-color: #FFFFFF;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"      \u003cCircle fx:id\u003d\"imageCircle\" fill\u003d\"DODGERBLUE\" radius\u003d\"31.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"      \u003cInsets /\u003e"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"sogggy":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"com.duke.gui.controllers.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" spacing\u003d\"20.0\" style\u003d\"-fx-background-image: url(\u0026quot;/images/background.jpg\u0026quot;);\"\u003e"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"               \u003copaqueInsets\u003e"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"                  \u003cInsets /\u003e"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"               \u003c/opaqueInsets\u003e\u003c/VBox\u003e"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"sogggy":23}},{"path":"src/test/data/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"T - 1 - read book"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":"D - 0 - return book - 6/06/2020 800"},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"E - 0 - project meeting - 6/08/2020 2130"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"T - 1 - join sports club"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"T - 0 - throw rubbish"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"E - 0 - halloween party - 22/10/2020 2000"}],"authorContributionMap":{"sogggy":6}},{"path":"src/test/java/com/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":12}},{"path":"src/test/java/com/duke/exceptions/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class DukeExceptionTest {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":4}},{"path":"src/test/java/com/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.parser;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"import com.duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    public void isDoneTest_inputLetters_returnFalse() {"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"done abc\";"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDone(input);"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    public void isDoneTest_inputThreeWords_returnFalse() {"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":23,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"done 1 abc\";"},{"lineNumber":24,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDone(input);"},{"lineNumber":25,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":26,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":28,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"sogggy"},"content":"    public void isDoneTest_normalInput_returnTrue() {"},{"lineNumber":30,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d true;"},{"lineNumber":31,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"done 1\";"},{"lineNumber":32,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDone(input);"},{"lineNumber":33,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":34,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":36,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"sogggy"},"content":"    public void isDeleteTest_inputLetters_returnFalse() {"},{"lineNumber":38,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":39,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"delete abc\";"},{"lineNumber":40,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDelete(input);"},{"lineNumber":41,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":42,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":44,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"sogggy"},"content":"    public void isDeleteTest_inputThreeWords_returnFalse() {"},{"lineNumber":46,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":47,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"delete 1 abc\";"},{"lineNumber":48,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDelete(input);"},{"lineNumber":49,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":50,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":52,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"sogggy"},"content":"    public void isDeleteTest_normalInput_returnTrue() {"},{"lineNumber":54,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d true;"},{"lineNumber":55,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"delete 1\";"},{"lineNumber":56,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isDelete(input);"},{"lineNumber":57,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":58,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":60,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_incorrectToDoInput_returnFalse() {"},{"lineNumber":62,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"todoeatfood\";"},{"lineNumber":63,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":64,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":65,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":66,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":68,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_correctToDoInput_returnTrue() {"},{"lineNumber":70,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"todo eat food\";"},{"lineNumber":71,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":72,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d true;"},{"lineNumber":73,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":74,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":76,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_incorrectDeadlineInput_returnFalse() {"},{"lineNumber":78,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"deadlines finishwritingJUnittests/by2/12/20191800\";"},{"lineNumber":79,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":80,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":81,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":82,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":84,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_correctDeadlineInput_returnTrue() {"},{"lineNumber":86,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"deadline finish writing JUnit tests /by 2/12/2019 1800\";"},{"lineNumber":87,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":88,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d true;"},{"lineNumber":89,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":90,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":92,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_incorrectEventsInput_returnFalse() {"},{"lineNumber":94,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"eventcs2103Tfinals/at2/12/20191800\";"},{"lineNumber":95,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":96,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d false;"},{"lineNumber":97,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":98,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":100,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"sogggy"},"content":"    public void correctInputFormatTest_correctEventsInput_returnTrue() {"},{"lineNumber":102,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"event CS2103T finals /at 2/12/2019 1800\";"},{"lineNumber":103,"author":{"gitId":"sogggy"},"content":"        boolean actualOutput \u003d Parser.isAddTask(input);"},{"lineNumber":104,"author":{"gitId":"sogggy"},"content":"        boolean expectedOutput \u003d true;"},{"lineNumber":105,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":106,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":108,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"sogggy"},"content":"    public void parseDateTest_correctDateInput() {"},{"lineNumber":110,"author":{"gitId":"sogggy"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"sogggy"},"content":"            String input \u003d \"at 2/12/2019 1800\";"},{"lineNumber":112,"author":{"gitId":"sogggy"},"content":"            String actualOutput \u003d Parser.parseDate(input);"},{"lineNumber":113,"author":{"gitId":"sogggy"},"content":"            String expectedOutput \u003d \"2019-12-02 1800\";"},{"lineNumber":114,"author":{"gitId":"sogggy"},"content":"            assertEquals(expectedOutput, actualOutput);"},{"lineNumber":115,"author":{"gitId":"sogggy"},"content":"        } catch (DukeException e) {"},{"lineNumber":116,"author":{"gitId":"sogggy"},"content":"            //Assert.fail(\"Exception \" + e);"},{"lineNumber":117,"author":{"gitId":"sogggy"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":120,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"sogggy"},"content":"    public void parseDateTest_incorrectDateInput() {"},{"lineNumber":122,"author":{"gitId":"sogggy"},"content":"        DukeException e \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":123,"author":{"gitId":"sogggy"},"content":"            Parser.parseDate(\"at 2/12/20191800\");"},{"lineNumber":124,"author":{"gitId":"sogggy"},"content":"        });"},{"lineNumber":125,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":126,"author":{"gitId":"sogggy"},"content":"        String expectedMessage \u003d \"Sorry! Format of date is wrong. \""},{"lineNumber":127,"author":{"gitId":"sogggy"},"content":"                + \"Example input should be deadline return book /by 2/12/2019 1800. \""},{"lineNumber":128,"author":{"gitId":"sogggy"},"content":"                + \"Please fix storage file before loading Duke again.\";"},{"lineNumber":129,"author":{"gitId":"sogggy"},"content":"        String actualMessage \u003d e.getMessage();"},{"lineNumber":130,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":131,"author":{"gitId":"sogggy"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":132,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":133}},{"path":"src/test/java/com/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.storage;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"public class StorageTest {"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    public void printFileContentsTest() throws Exception {"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"        Storage storage \u003d new Storage(\"data/test.txt\");"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        String output \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        storage.printFileContents();"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":14}},{"path":"src/test/java/com/duke/tasklist/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"//import com.duke.tasks.Events;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"//"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"public class TaskListTest {"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":9}},{"path":"src/test/java/com/duke/tasks/DeadlinesTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class DeadlinesTest {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public void parseToSaveFormatTest() {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        Deadlines deadline \u003d new Deadlines(\"Clear trash\", \"2020-06-06 800\", true);"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"D - 1 - Clear trash - 6/06/2020 800\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, deadline.parseToSaveFormat());"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    public void toStringTest() {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        Deadlines deadline \u003d new Deadlines(\"project meeting\", \"2020-08-06 2130\", false);"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"[D][\\u2718] project meeting (by: 6 AUGUST 2020, 930pm)\";"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, deadline.toString());"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":22}},{"path":"src/test/java/com/duke/tasks/EventsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class EventsTest {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public void parseToSaveFormatTest() {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        Events event \u003d new Events(\"Clear trash\", \"2020-06-06 800\", true);"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"E - 1 - Clear trash - 6/06/2020 800\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, event.parseToSaveFormat());"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"    public void toStringTest() {"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"        Events event \u003d new Events(\"project meeting\", \"2020-08-06 2130\", false);"},{"lineNumber":19,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"[E][\\u2718] project meeting (at: 6 AUGUST 2020, 930pm)\";"},{"lineNumber":20,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, event.toString());"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":22}},{"path":"src/test/java/com/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class TaskTest {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public void reformatDateTest() {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"(by: Sunday)\";"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        String input \u003d \"by Sunday\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, Task.reformatDate(input));"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":15}},{"path":"src/test/java/com/duke/tasks/ToDosTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.tasks;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"public class ToDosTest {"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"    public void parseToSaveFormatTest() {"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"        ToDos todo \u003d new ToDos(\"Clear trash\", true);"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"        String res \u003d \"T - 1 - Clear trash\";"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"        assertEquals(res, todo.parseToSaveFormat());"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":15}},{"path":"src/test/java/com/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"package com.duke.ui;"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":""},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"public class UiTest {"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"}"}],"authorContributionMap":{"sogggy":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sogggy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"sogggy"},"content":"done 1"},{"lineNumber":3,"author":{"gitId":"sogggy"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"sogggy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"sogggy"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"sogggy"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"sogggy"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"sogggy"},"content":"list"},{"lineNumber":9,"author":{"gitId":"sogggy"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"sogggy"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"sogggy"},"content":"delete 7"},{"lineNumber":13,"author":{"gitId":"sogggy"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"sogggy"},"content":"event 1"},{"lineNumber":15,"author":{"gitId":"sogggy"},"content":"deadline b"},{"lineNumber":16,"author":{"gitId":"sogggy"},"content":"delete a"},{"lineNumber":17,"author":{"gitId":"sogggy"},"content":"delete 10"},{"lineNumber":18,"author":{"gitId":"sogggy"},"content":"bye"}],"authorContributionMap":{"sogggy":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"sogggy"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"sogggy"},"content":"FC /W ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"sogggy":2,"-":19}}]
