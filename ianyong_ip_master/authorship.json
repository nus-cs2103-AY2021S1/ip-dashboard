[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "   \u003cimg width\u003d\"350\" src\u003d\"docs/Ui.png\" alt\u003d\"User Interface of Duke\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke is a *Personal Assistant Chatbot* with task management functionality that caters to fast typists."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Keep track of all your tasks with ease!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Manage Your Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "To best cater to your task management needs, Duke supports the creation of three different types of tasks:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Deadlines"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Events"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Todos"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Deadlines"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deadlines are tasks that have to be completed by a specific date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Events are tasks that occur at a specific date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Todos"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Todos are tasks that do not have a specific date and time attached to them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "All of the above tasks track whether they have been completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "In addition, for deadline and event tasks, Duke is able to filter by overdue and upcoming tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Theming"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke sports a dark theme that is gentle on the eyes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "This allows for prolonged usage of Duke without having to worry about eye strain."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg width\u003d\"90%\" src\u003d\"docs/assets/media/fullscreen.png\" alt\u003d\"Resizable window\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "It is also possible to resize Duke if you wish to make better use of your screen real estate."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Command History"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003cimg width\u003d\"350\" src\u003d\"docs/assets/media/command_history.gif\" alt\u003d\"Cycling of command history\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "The Duke graphical user interface has an in-built command history which remembers the last 50 commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Just like in any other terminal, you can navigate through your previous inputs by pressing the `up` and `down` key."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Command Line Support"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg width\u003d\"90%\" src\u003d\"docs/assets/media/command_line_interface.png\" alt\u003d\"Command line interface mode\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "For users who have a strong preference for command line interfaces (CLI) over graphical user interfaces, Duke is able to run in CLI mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Simply launch the `.jar` file with the `-c` or `--console` flag:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "java -jar duke.jar --console"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Mandarin Chinese Support"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003cimg width\u003d\"350\" class\u003d\"image\" src\u003d\"docs/assets/media/mandarin_support.png\" alt\u003d\"Mandarin support\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke has been designed from the ground up for i18n."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "All user-facing strings are set in a resource file, making the task of supporting a new language simply a matter of adding the translated strings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "In addition, Duke utilises UTF-8 encoding, allowing non-latin characters to be stored without issue."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Currently, Duke supports the following languages:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- English (en)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Chinese (zh)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Switching between languages is as easy as calling the `language` command:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "language chinese"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Note that the language names can be substituted with the ISO 639-1 language codes as well:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "language zh"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `alias` - Defines an alias for a command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Associates an alias with a command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`alias bye b`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Alias \u0027b\u0027 successfully added for command \u0027bye\u0027."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `bye` - Terminates the program"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Exits the program gracefully."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Program exits"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `deadline` - Adds a deadline task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new deadline task to the task manager."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "A deadline task is a task with a description and a due date."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`deadline User Guide /by 15/9/2020 2359`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✘] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `delete` - Deletes a task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deletes the task at the specified index from the task manager."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✘] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `done` - Marks a task as done"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Marks the task at the specified index in the task manager as done."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `event` - Adds an event task"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new event task to the task manager."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "An event task is a task with a description and a date/time."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`event CS2103T Lecture /at 18/9/2020 1600`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `find` - Finds tasks based on keywords"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Searches for tasks in the task manager which match the provided keywords."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`find 2103 guide`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "2. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `help` - Displays the list of commands"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Displays the list of available commands along with a brief description."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Commands:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- alias"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Defines an alias for a command"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- bye"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Terminates the program"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- deadline"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a deadline task to the task manager"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- delete"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deletes a task from the task manager"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- done"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Marks a task as done"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- event"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds an event task to the task manager"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- find"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Searches for tasks in the task manager which match the provided keywords"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- help"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Displays a list of all commands along with a brief description"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all tasks in the task manager"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- overdue"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all overdue tasks in the task manager"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- todo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a todo task to the task manager"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- upcoming"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all upcoming tasks in the task manager"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `language` - Sets the language of Duke"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Sets the language which Duke will respond in."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Currently, the following languages are supported:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- English (en)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Chinese (zh)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`language zh`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "语言切换为中文！"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `list` - Lists all tasks"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all tasks in the task manager."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✘] Add GUI to iP (by: Sep 1 2020, 11:59 PM)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "2. [E][✓] Project meeting (at: Sep 5 2020, 10:00 PM)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "3. [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "4. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `overdue` - Lists all overdue tasks"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all overdue tasks in the task manager."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`overdue`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are your overdue tasks:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✘] Add GUI to iP (by: Sep 1 2020, 11:59 PM)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `todo` - Adds a todo task"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new todo task to the task manager."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "A todo task is a task with only a description."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`todo CS2103T Quiz 6`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [T][✘] CS2103T Quiz 6"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `upcoming` - Lists all upcoming tasks"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all upcoming tasks in the task manager."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`upcoming`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are your upcoming tasks:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "ianyong": 319
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    implementation \u0027org.danilopianini:gson-extras:0.2.2\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        exceptionFormat \u0027full\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    mainClassName \u003d \u0027duke.Duke\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    toolVersion \u003d \u00278.36\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    archiveBaseName \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    version \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    modules \u003d [ \u0027javafx.base\u0027, \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "run{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 55
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# Duke | User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cdiv class\u003d\"portrait-image-container\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg class\u003d\"image\" src\u003d\"Ui.png\" alt\u003d\"User Interface of Duke\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke is a *Personal Assistant Chatbot* with task management functionality that caters to fast typists."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Keep track of all your tasks with ease!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Manage Your Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "To best cater to your task management needs, Duke supports the creation of three different types of tasks:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Deadlines"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Events"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Todos"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Deadlines"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deadlines are tasks that have to be completed by a specific date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Events are tasks that occur at a specific date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "#### Todos"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Todos are tasks that do not have a specific date and time attached to them."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "All of the above tasks track whether they have been completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "In addition, for deadline and event tasks, Duke is able to filter by overdue and upcoming tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Theming"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke sports a dark theme that is gentle on the eyes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "This allows for prolonged usage of Duke without having to worry about eye strain."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cdiv class\u003d\"landscape-image-container\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg class\u003d\"image\" src\u003d\"assets/media/fullscreen.png\" alt\u003d\"Resizable window\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "It is also possible to resize Duke if you wish to make better use of your screen real estate."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Command History"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cdiv class\u003d\"portrait-image-container\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg class\u003d\"image\" src\u003d\"assets/media/command_history.gif\" alt\u003d\"Cycling of command history\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "The Duke graphical user interface has an in-built command history which remembers the last 50 commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Just like in any other terminal, you can navigate through your previous inputs by pressing the `up` and `down` key."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Command Line Support"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cdiv class\u003d\"landscape-image-container\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg class\u003d\"image\" src\u003d\"assets/media/command_line_interface.png\" alt\u003d\"Command line interface mode\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "For users who have a strong preference for command line interfaces (CLI) over graphical user interfaces, Duke is able to run in CLI mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Simply launch the `.jar` file with the `-c` or `--console` flag:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "java -jar duke.jar --console"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### Mandarin Chinese Support"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cdiv class\u003d\"portrait-image-container\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  \u003cimg class\u003d\"image\" src\u003d\"assets/media/mandarin_support.png\" alt\u003d\"Mandarin support\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Duke has been designed from the ground up for i18n."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "All user-facing strings are set in a resource file, making the task of supporting a new language simply a matter of adding the translated strings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "In addition, Duke utilises UTF-8 encoding, allowing non-latin characters to be stored without issue."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Currently, Duke supports the following languages:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- English (en)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Chinese (zh)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Switching between languages is as easy as calling the `language` command:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "language chinese"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Note that the language names can be substituted with the ISO 639-1 language codes as well:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "language zh"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `alias` - Defines an alias for a command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Associates an alias with a command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`alias bye b`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Alias \u0027b\u0027 successfully added for command \u0027bye\u0027."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `bye` - Terminates the program"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Exits the program gracefully."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Program exits"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `deadline` - Adds a deadline task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new deadline task to the task manager."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "A deadline task is a task with a description and a due date."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`deadline User Guide /by 15/9/2020 2359`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✘] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `delete` - Deletes a task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deletes the task at the specified index from the task manager."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✘] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `done` - Marks a task as done"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Marks the task at the specified index in the task manager as done."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `event` - Adds an event task"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new event task to the task manager."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "An event task is a task with a description and a date/time."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`event CS2103T Lecture /at 18/9/2020 1600`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `find` - Finds tasks based on keywords"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Searches for tasks in the task manager which match the provided keywords."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`find 2103 guide`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "2. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `help` - Displays the list of commands"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Displays the list of available commands along with a brief description."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Commands:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- alias"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Defines an alias for a command"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- bye"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Terminates the program"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- deadline"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a deadline task to the task manager"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- delete"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Deletes a task from the task manager"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- done"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Marks a task as done"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- event"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds an event task to the task manager"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- find"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Searches for tasks in the task manager which match the provided keywords"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- help"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Displays a list of all commands along with a brief description"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all tasks in the task manager"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- overdue"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all overdue tasks in the task manager"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- todo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a todo task to the task manager"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- upcoming"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all upcoming tasks in the task manager"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `language` - Sets the language of Duke"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Sets the language which Duke will respond in."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Currently, the following languages are supported:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- English (en)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "- Chinese (zh)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`language zh`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "语言切换为中文！"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `list` - Lists all tasks"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all tasks in the task manager."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✘] Add GUI to iP (by: Sep 1 2020, 11:59 PM)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "2. [E][✓] Project meeting (at: Sep 5 2020, 10:00 PM)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "3. [D][✓] User Guide (by: Sep 15 2020, 11:59 PM)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "4. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `overdue` - Lists all overdue tasks"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all overdue tasks in the task manager."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`overdue`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are your overdue tasks:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [D][✘] Add GUI to iP (by: Sep 1 2020, 11:59 PM)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `todo` - Adds a todo task"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Adds a new todo task to the task manager."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "A todo task is a task with only a description."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`todo CS2103T Quiz 6`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  [T][✘] CS2103T Quiz 6"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "### `upcoming` - Lists all upcoming tasks"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Lists all upcoming tasks in the task manager."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "`upcoming`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "Here are your upcoming tasks:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "1. [E][✘] CS2103T Lecture (at: Sep 18 2020, 04:00 PM)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "ianyong": 306
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ianyong": 103
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Entrypoint for the Duke chatbot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Starts the Duke chatbot with the specified command line parameters if applicable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param args the command line parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set the locale on startup."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String language \u003d Store.getConfigManager().getProperty(\"language\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String country \u003d Store.getConfigManager().getProperty(\"country\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Locale locale \u003d new Locale(language, country);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Store.getResourceHandler().setLocale(locale);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Parse command line parameters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (args.length \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            switch (args[0].toLowerCase()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"-h\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"--help\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                System.out.println(Store.getResourceHandler().getString(\"duke.help\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"-c\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"--console\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                launchCli();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"-g\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"--graphical\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                launchGui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                System.out.println(MessageFormat.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"duke.invalidCommand\"), args[0]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            launchGui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Launches the command line interface version of the Duke chatbot."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static void launchCli() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set the encoding of `System.out` to UTF-8."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out), true, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Repl.run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Launches the graphical user interface version of the Duke chatbot."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static void launchGui() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Application.launch(Gui.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ianyong": 64
    }
  },
  {
    "path": "src/main/java/duke/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A graphical user interface for the Duke chatbot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Starts the graphical user interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param stage the top-level JavaFX container"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/views/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/Dog Emoji.png\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.setMinWidth(stage.getWidth());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.setMinHeight(stage.getHeight());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 37
    }
  },
  {
    "path": "src/main/java/duke/Repl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.enums.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.messages.DukeResponse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.PrettyPrinter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A read-eval-print loop (REPL) that reads in a command from the user, executes it, and prints out the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Repl {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // Formatting"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of spaces to prefix each line with. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final int LEFT_PADDING_SIZE \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of underscores each divider should be made up of. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final int DIVIDER_LENGTH \u003d 60;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Scanner} object which reads in user input. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code PrettyPrinter} object for formatting the REPL output. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final PrettyPrinter prettyPrinter \u003d new PrettyPrinter(LEFT_PADDING_SIZE, DIVIDER_LENGTH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Runs the REPL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        prettyPrinter.print(Store.getResourceHandler().getString(\"repl.greeting\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            DukeResponse dukeResponse \u003d getResponse(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            prettyPrinter.print(dukeResponse.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (dukeResponse.shouldExit()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Processes the user\u0027s input and returns a {@code DukeResponse}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code DukeResponse}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static DukeResponse getResponse(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String firstToken \u003d input.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String inputWithoutCommand \u003d input.replaceFirst(firstToken, \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DukeResponse dukeResponse;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Command command \u003d Store.getAliasManager().getCommand(firstToken);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Check that the user input is of the correct format for the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            command.validate(firstToken, inputWithoutCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Execute the command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            dukeResponse \u003d command.execute(inputWithoutCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            dukeResponse \u003d new DukeResponse(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            dukeResponse \u003d new DukeResponse(Store.getResourceHandler().getString(\"repl.unknownCommand\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dukeResponse;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 64
    }
  },
  {
    "path": "src/main/java/duke/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Controller for DialogBox. This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private HBox speechBubble;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code DialogBox} object with the specified text and image."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param text the text to be printed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param image the image to be displayed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/views/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        displayPicture.setClip(generateClip(displayPicture, 50));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Generates a clip for the {@code ImageView} with the specified corner radius."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param imageView the {@code ImageView} to inherit the width and height from."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param cornerRadius the corner radius value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a clip for the {@code ImageView}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static Rectangle generateClip(ImageView imageView, int cornerRadius) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Rectangle clip \u003d new Rectangle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        clip.setWidth(imageView.getFitWidth());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        clip.setHeight(imageView.getFitHeight());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        clip.setArcWidth(cornerRadius);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        clip.setArcHeight(cornerRadius);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return clip;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Flips the dialog box such that the {@code ImageView} is on the left and text on the right."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ObservableList\u003cNode\u003e tempList \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Collections.reverse(tempList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        getChildren().setAll(tempList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a {@code DialogBox} with the {@code ImageView} on the right and text on the left."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param text the text to be printed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param image the image to be displayed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code DialogBox} for the user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialogBox.speechBubble.getStyleClass().add(\"user-speech-bubble\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a {@code DialogBox} with the {@code ImageView} on the left and text on the right."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param text the text to be printed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param image the image to be displayed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code DialogBox} for the chatbot"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 102
    }
  },
  {
    "path": "src/main/java/duke/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.Repl;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.messages.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.beans.binding.BooleanBinding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Image that is shown alongside the user\u0027s messages. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Image userImage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Image(this.getClass().getResourceAsStream(\"/images/Pomeranian with Mask.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Image that is shown alongside the chatbot\u0027s messages. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Image dukeImage \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new Image(this.getClass().getResourceAsStream(\"/images/Pomeranian with Sunglasses.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code CommandHistory} object to keep track of the user input history. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory(50);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Disable the send button when the user input is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        BooleanBinding isUserInputEmpty \u003d Bindings.isEmpty(userInput.textProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        sendButton.disableProperty().bind(isUserInputEmpty);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set up cycling through command history."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput.setOnKeyPressed(event -\u003e handleKeyPress(event.getCode()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Display greetings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                DialogBox.getDukeDialog(Store.getResourceHandler().getString(\"repl.greeting\"), dukeImage));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Scroll to bottom of scroll pane on update."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable, oldValue, newValue) -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                scrollPane.setVvalue(1.0d));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the dialog container. Clears the user input after processing. Responsible for closing the {@code stage} once the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * user inputs a command to exit the chatbot."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Do nothing if user input is empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Push user input into command history."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        commandHistory.addCommand(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Execute the inputted command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        DukeResponse dukeResponse \u003d Repl.getResponse(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Display the response from command execution."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                DialogBox.getDukeDialog(dukeResponse.toString(), dukeImage)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Terminate the application if the signal to exit is received."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (dukeResponse.shouldExit()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Stage stage \u003d (Stage) userInput.getScene().getWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Clear the user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Handles key presses for `userInput`, displaying the command history on"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code KeyCode.UP} and {@code KeyCode.DOWN}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param keyCode the key that was pressed by the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void handleKeyPress(KeyCode keyCode) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        switch (keyCode) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            userInput.setText(commandHistory.navigateUp());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            userInput.setText(commandHistory.navigateDown());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set the caret position to the end of the string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        userInput.positionCaret(userInput.getLength());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 118
    }
  },
  {
    "path": "src/main/java/duke/enums/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.messages.DukeResponse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Commands that can be used in \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Defines an alias for a command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    ALIAS {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027alias\u0027 command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*\\\\S+\\\\s+\\\\S+\\\\s*$|^\\\\s*-l\\\\s*$|^\\\\s*-rm\\\\s+\\\\S+\\\\s*$\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.aliasFormat\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027alias\u0027 command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027alias\u0027 command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String listRegex \u003d \"^\\\\s*-l\\\\s*$\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String removeRegex \u003d \"^\\\\s*-rm\\\\s+\\\\S+\\\\s*$\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (Pattern.matches(listRegex, inputArgs)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                // Display list of aliases."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getAliasManager().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } else if (Pattern.matches(removeRegex, inputArgs)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                // Remove specified alias"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String alias \u003d inputArgs.replaceFirst(\"-rm\", \"\").trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getAliasManager().removeAlias(alias);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                // Add a new alias."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String[] argTokens \u003d inputArgs.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String command \u003d argTokens[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String alias \u003d argTokens[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getAliasManager().addAlias(alias, command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Terminates the running of \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027bye\u0027 command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*$\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027bye\u0027 command."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027bye\u0027 command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getResourceHandler().getString(\"repl.farewell\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Return a `DukeResponse` with the exit flag enabled."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a {@code Deadline} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*.*\\\\S+.*\\\\s+/by\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.deadlineFormat\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if an error occurs while running the \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String[] argTokens \u003d inputArgs.split(\"/by\", 2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String deadlineName \u003d argTokens[0].trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String dueDateString \u003d argTokens[1].trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            LocalDateTime dueDate \u003d DateTimeParser.parseDateTime(dueDateString);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().addTask(new Deadline(deadlineName, dueDate));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Deletes a {@code Task} from the {@code TaskManager}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027delete\u0027 command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.deleteFormat\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027delete\u0027 command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027delete\u0027 command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String listIndexString \u003d inputArgs.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // `listIndexString` is guaranteed to be a string made up of only digit characters after validation."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            int listIndex \u003d Integer.parseInt(listIndexString) - 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getTaskManager().removeTask(listIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getResourceHandler().getString(\"repl.invalidTaskIndex\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            assert response !\u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks a {@code Task} as done."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027done\u0027 command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.doneFormat\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027done\u0027 command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027done\u0027 command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String listIndexString \u003d inputArgs.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // `listIndexString` is guaranteed to be a string made up of only digit characters after validation."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            int listIndex \u003d Integer.parseInt(listIndexString) - 1;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getTaskManager().markAsDone(listIndex);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d Store.getResourceHandler().getString(\"repl.invalidTaskIndex\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            assert response !\u003d null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds an {@code Event} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027event\u0027 command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*.*\\\\S+.*\\\\s+/at\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.eventFormat\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027event\u0027 command."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027event\u0027 command."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if an error occurs while running the \u0027event\u0027 command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String[] argTokens \u003d inputArgs.split(\"/at\", 2);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String eventName \u003d argTokens[0].trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String dateTimeString \u003d argTokens[1].trim();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            LocalDateTime dateTime \u003d DateTimeParser.parseDateTime(dateTimeString);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().addTask(new Event(eventName, dateTime));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Searches for {@code Task}s in the {@code TaskManager} which match the provided keywords."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027find\u0027 command."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.findFormat\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027find\u0027 command."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027find\u0027 command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String[] searchKeywords \u003d inputArgs.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().getMatchingTasks(searchKeywords);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Displays a list of all commands along with a brief description."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    HELP {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027help\u0027 command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*$\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027help\u0027 command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027help\u0027 command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getResourceHandler().getString(\"command.help\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the language of \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    LANGUAGE {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027language\u0027 command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*(?i)(english|chinese|en|zh)\\\\s*$\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.languageFormat\"));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027language\u0027 command."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027language\u0027 command."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String language \u003d inputArgs.trim().toLowerCase();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            switch (language) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"english\":"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"en\":"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Store.getResourceHandler().setLocale(new Locale(\"en\", \"SG\"));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"chinese\":"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            case \"zh\":"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Store.getResourceHandler().setLocale(new Locale(\"zh\", \"SG\"));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getResourceHandler().getString(\"command.switchLanguage\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027list\u0027 command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*$\";"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027list\u0027 command."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027list\u0027 command."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().toString();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all overdue {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    OVERDUE {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027overdue\u0027 command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*$\";"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027overdue\u0027 command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027overdue\u0027 command."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().getOverdueTasks();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a {@code ToDo} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027todo\u0027 command."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\","
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        Store.getResourceHandler().getString(\"command.toDoFormat\"));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027todo\u0027 command."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027todo\u0027 command."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String toDoName \u003d inputArgs.trim();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().addTask(new ToDo(toDoName));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all upcoming {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    UPCOMING {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027upcoming\u0027 command."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String alias, String inputArgs) throws DukeException {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^\\\\s*$\";"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, inputArgs)) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Executes the \u0027upcoming\u0027 command."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @return the output of running the \u0027upcoming\u0027 command."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public DukeResponse execute(String inputArgs) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String response \u003d Store.getTaskManager().getUpcomingTasks();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return new DukeResponse(response);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Validates whether the user input is of the correct format."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param alias the name used in invoking the command; can be either the command name or an alias."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public abstract void validate(String alias, String inputArgs) throws DukeException;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param inputArgs the user inputted arguments."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code DukeResponse}."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws DukeException if an error occurs while running the command."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public abstract DukeResponse execute(String inputArgs) throws DukeException;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 555
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents an {@code Exception} that is related to \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code DukeException} with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 15
    }
  },
  {
    "path": "src/main/java/duke/messages/DukeResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents a response to user input in the Duke chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DukeResponse {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The message to be displayed to the user. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Whether the chatbot should exit. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final boolean shouldExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code DukeResponse} with the specified message and whether the chatbot should exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the message to be displayed to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param shouldExit whether the chatbot should exit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public DukeResponse(String message, boolean shouldExit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.shouldExit \u003d shouldExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code DukeResponse} with the specified message while continuing the execution of the chatbot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the message to be displayed to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public DukeResponse(String message) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this(message, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the chatbot should exit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return true if the chatbot should exit; otherwise false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code DukeResponse}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of this {@code DukeResponse}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 50
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeStringFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Deadline extends Task implements Schedulable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final LocalDateTime dueDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Deadline} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Deadline}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dueDate a {@code LocalDueDate} object representing the due date of the {@code Deadline}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Deadline(String name, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Deadline} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Deadline}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dueDate a {@code LocalDueDate} object representing the due date of the {@code Deadline}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Deadline} has been completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Deadline(String name, LocalDateTime dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Deadline} as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Deadline} object with the same {@code name} as this {@code Deadline}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Deadline markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Deadline(name, dueDate, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the due date of this {@code Deadline} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the due date of this {@code Deadline} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the due date of this {@code Deadline} object has elapsed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the due date of this {@code Deadline} object has elapsed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean hasDateTimeElapsed() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Deadline} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Deadline}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(Store.getResourceHandler().getString(\"deadline.toString\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                super.toString(), DateTimeStringFormatter.formatDateTime(dueDate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Compares this {@code Schedulable} object with another {@code Schedulable Object}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param schedulable the {@code Schedulable} object to be compared."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as this object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is less than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified object is null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the specified object\u0027s type prevents it"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              from being compared to this object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int compareTo(Schedulable schedulable) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate.compareTo(schedulable.getDateTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 94
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeStringFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that starts and ends at a specific time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Event extends Task implements Schedulable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Event} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Event}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTime a {@code LocalDueDate} object representing the date and time of the {@code Event}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event(String name, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Event} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Event}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTime a {@code LocalDueDate} object representing the date and time of the {@code Event}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Event} has been completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event(String name, LocalDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Event} as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Event} object with the same {@code name} as this {@code Event}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Event(name, dateTime, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the datetime of this {@code Event} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the datetime of this {@code Event} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the datetime of this {@code Event} object has elapsed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the datetime of this {@code Event} object has elapsed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean hasDateTimeElapsed() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Event}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(Store.getResourceHandler().getString(\"event.toString\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                super.toString(), DateTimeStringFormatter.formatDateTime(dateTime));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Compares this {@code Schedulable} object with another {@code Schedulable Object}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param schedulable the {@code Schedulable} object to be compared."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as this object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is less than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified object is null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the specified object\u0027s type prevents it"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              from being compared to this object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int compareTo(Schedulable schedulable) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime.compareTo(schedulable.getDateTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 94
    }
  },
  {
    "path": "src/main/java/duke/tasks/Schedulable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public interface Schedulable extends Comparable\u003cSchedulable\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Returns the datetime of the {@code Schedulable} object. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Returns whether the datetime has elapsed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    boolean hasDateTimeElapsed();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 10
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents a task within \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Name of the {@code Task}. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Whether the {@code Task} has been completed. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Task} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Task(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Task} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Task}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Task} has been completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Task} as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Task} object with the same {@code name} as this {@code Task}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public abstract Task markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the {@code Task} is done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the {@code Task} is done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Checks whether the {@code Task} contains any of the keywords in its name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param keywords the keywords that are being searched."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the {@code Task} contains any of the keywords in its name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean matchesKeywords(String... keywords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Arrays.stream(keywords).anyMatch(keyword -\u003e name.toLowerCase().contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Task} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Task}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String key \u003d isDone ? \"task.toString.done\" : \"task.toString.notDone\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(Store.getResourceHandler().getString(key), name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 73
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.typeadapters.RuntimeTypeAdapterFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.PersistentList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Manages {@code Task} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** List of {@code Task} objects. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final List\u003cTask\u003e tasks \u003d new PersistentList\u003c\u003e(\"./data/tasks.txt\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new TypeToken\u003cList\u003cTask\u003e\u003e(){}.getType(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            RuntimeTypeAdapterFactory.of(Task.class)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(Deadline.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(Event.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(ToDo.class));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Constructs a {@code TaskManager} object. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskManager}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param task the {@code Task} object to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of adding a {@code Task}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String taskCountKey \u003d \"taskManager.taskCount.\" + (tasks.size() \u003d\u003d 1 ? \"singular\" : \"plural\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String template \u003d String.format(\"%s\\n%s\", Store.getResourceHandler().getString(\"taskManager.addTask\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Store.getResourceHandler().getString(taskCountKey));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(template, task, tasks.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes a {@code Task} from the {@code TaskManager}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listIndex the index of the {@code Task} in the {@code TaskManager} list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of removing a {@code Task}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String removeTask(int listIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Task removedTask \u003d tasks.remove(listIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String taskCountKey \u003d \"taskManager.taskCount.\" + (tasks.size() \u003d\u003d 1 ? \"singular\" : \"plural\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String template \u003d String.format(\"%s\\n%s\", Store.getResourceHandler().getString(\"taskManager.removeTask\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Store.getResourceHandler().getString(taskCountKey));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(template, removedTask, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks a {@code Task} as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listIndex the index of the {@code Task} in the {@code TaskManager} list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of marking a {@code Task} as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String markAsDone(int listIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Task updatedTask \u003d tasks.get(listIndex).markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        tasks.set(listIndex, updatedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return String.format(\"%s\\n  %s\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Store.getResourceHandler().getString(\"taskManager.markTaskDone\"), updatedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of upcoming {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of upcoming {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getUpcomingTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e sortedUpcomingTasks \u003d tasks.stream().filter(task -\u003e task instanceof Schedulable)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .filter(task -\u003e !((Schedulable) task).hasDateTimeElapsed()).filter(task -\u003e !task.isDone())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(Store.getResourceHandler().getString(\"taskManager.upcomingTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        IntStream.range(0, sortedUpcomingTasks.size())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", i + 1, sortedUpcomingTasks.get(i)))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .forEach(formattedList::append);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of overdue {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of overdue {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getOverdueTasks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e sortedOverdueTasks \u003d tasks.stream().filter(task -\u003e task instanceof Schedulable)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .filter(task -\u003e ((Schedulable) task).hasDateTimeElapsed()).filter(task -\u003e !task.isDone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(Store.getResourceHandler().getString(\"taskManager.overdueTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        IntStream.range(0, sortedOverdueTasks.size())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", i + 1, sortedOverdueTasks.get(i)))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .forEach(formattedList::append);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of {@code Task}s under the {@code TaskManager} that contain any of the specified keywords."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param keywords the keywords that are being searched."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of {@code Task}s under the {@code TaskManager} that contain any of the specified keywords."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getMatchingTasks(String... keywords) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d tasks.stream().filter(task -\u003e task.matchesKeywords(keywords))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(Store.getResourceHandler().getString(\"taskManager.matchingTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        IntStream.range(0, matchingTasks.size())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", i + 1, matchingTasks.get(i)))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .forEach(formattedList::append);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(Store.getResourceHandler().getString(\"taskManager.listTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", i + 1, tasks.get(i)))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .forEach(formattedList::append);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 135
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that does not have any date/time attached to it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code ToDo} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code ToDo}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code ToDo} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code ToDo}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code ToDo} has been completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private ToDo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code ToDo} as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code ToDo} object with the same {@code name} as this {@code ToDo}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ToDo markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ToDo(name, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code ToDo} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code ToDo}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(Store.getResourceHandler().getString(\"toDo.toString\"), super.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 49
    }
  },
  {
    "path": "src/main/java/duke/utils/AliasManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.enums.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Keeps track of aliases."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class AliasManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Map of aliases. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Map\u003cString, Command\u003e aliases \u003d new PersistentMap\u003c\u003e(\"./data/aliases.txt\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new TypeToken\u003cHashMap\u003cString, Command\u003e\u003e(){}.getType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Constructs a {@code AliasManager} object. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public AliasManager() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Associates an alias with a command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param alias the alias for the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param commandString the command to be aliased in string representation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of adding an alias."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String addAlias(String alias, String commandString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Check that alias is not an existing command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (Command command : Command.values()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (command.name().equalsIgnoreCase(alias)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"aliasManager.aliasConflict\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d MessageFormat.format(template, alias);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Command command \u003d Command.valueOf(commandString.toUpperCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Command previousCommand \u003d aliases.putIfAbsent(alias.toLowerCase(), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // If `previousCommand` is not `null`, then the alias is already in use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (previousCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"aliasManager.addAlias\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d MessageFormat.format(template, alias.toLowerCase(), commandString.toLowerCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d Store.getResourceHandler().getString(\"aliasManager.aliasInUse\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                response \u003d MessageFormat.format(template, alias.toLowerCase(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        previousCommand.toString().toLowerCase());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // `commandString` does not correspond to a command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String template \u003d Store.getResourceHandler().getString(\"aliasManager.invalidCommand\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            response \u003d MessageFormat.format(template, commandString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes an association between an alias and a command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param alias the alias to be removed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of removing an alias."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String removeAlias(String alias) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Command previousCommand \u003d aliases.remove(alias.toLowerCase());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (previousCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String template \u003d Store.getResourceHandler().getString(\"aliasManager.aliasNotFound\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            response \u003d MessageFormat.format(template, alias.toLowerCase());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String template \u003d Store.getResourceHandler().getString(\"aliasManager.removeAlias\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            response \u003d MessageFormat.format(template, alias.toLowerCase());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code Command} that corresponds to the alias. Note that every command is an alias for"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * itself."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param alias the alias that is being looked up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the corresponding {@code Command}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Command getCommand(String alias) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            command \u003d Command.valueOf(alias.toUpperCase());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            command \u003d aliases.get(alias);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Throw an `IllegalArgumentException` to signify that no commands match."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of aliases under the {@code AliasManager}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of aliases under the {@code AliasManager}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(Store.getResourceHandler().getString(\"aliasManager.listAliasesPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cString\u003e keys \u003d new ArrayList\u003c\u003e(aliases.keySet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        IntStream.range(0, aliases.size())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s -\u003e %s\\n\", i + 1,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        keys.get(i).toLowerCase(), aliases.get(keys.get(i)).toString().toLowerCase()))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .forEach(formattedList::append);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 123
    }
  },
  {
    "path": "src/main/java/duke/utils/CommandHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Tracks the user input history along with the command history navigation state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** An {@code EvictingStack} object to keep track of the command history. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final EvictingStack\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** A reference to the current {@code LinkedListNode} in the current navigation state. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private LinkedListNode\u003cString\u003e currentNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code CommandHistory} object which holds up to the maximum amount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * of commands specified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param maxCommands the maximum number of commands to keep track of."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public CommandHistory(int maxCommands) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        commandHistory \u003d new EvictingStack\u003c\u003e(maxCommands);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a command to the command history and resets the state of the command navigation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param command the command to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void addCommand(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        commandHistory.push(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        currentNode \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the previous command. If the current command is already the earliest command,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * then the current command is returned. If the command history is empty, returns {@code null}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String navigateUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (currentNode \u003d\u003d null \u0026\u0026 commandHistory.getTopNode() \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } else if (currentNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            currentNode \u003d commandHistory.getTopNode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } else if (currentNode.getPreviousNode() !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            currentNode \u003d currentNode.getPreviousNode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return currentNode.getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the next command. If the current command is already the latest command, then the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * current command is returned. If the command history is empty, returns {@code null}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the next command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String navigateDown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (currentNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } else if (currentNode.getNextNode() !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            currentNode \u003d currentNode.getNextNode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return currentNode.getValue();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 63
    }
  },
  {
    "path": "src/main/java/duke/utils/ConfigManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Responsible for saving and loading the configuration of the application from a file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ConfigManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code StorageManager} object for writing the application config to the specified file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Properties} object for manipulating the application properties. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Properties properties;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code ConfigManager} object with the specified config file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the config file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ConfigManager(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        properties \u003d readStateFromFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes the current state of the application properties to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void syncStateToFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            properties.store(stringWriter, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String data \u003d stringWriter.getBuffer().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            storageManager.saveToFile(data);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retrieves the current state of the application properties from the specified file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the current state of the application properties."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Properties readStateFromFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set default properties."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Properties defaultProperties \u003d new Properties();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        defaultProperties.setProperty(\"language\", \"en\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        defaultProperties.setProperty(\"country\", \"SG\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Properties properties \u003d new Properties(defaultProperties);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Initialise properties with the values in the config file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            properties.load(new StringReader(storageManager.readFromFile()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return properties;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Searches for the property with the specified key in this property list. If the key is not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in this property list, the default property list, and its defaults, recursively, are then checked."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The method returns {@code null} if the property is not found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the property key."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the value in the property list with the specified key value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getProperty(String key) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return properties.getProperty(key);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Calls the {@code Hashtable} method {@code put}. Provided for parallelism with the {@code getProperty}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * method. Enforces use of strings for property keys and values. The value returned is the result of the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Hashtable} call to put."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the key to be placed into the property list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value the value corresponding to the key."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous value of the specified key in the property list, or {@code null} if it did not"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         have one."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Object setProperty(String key, String value) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Object previousValue \u003d properties.setProperty(key, value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousValue;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 89
    }
  },
  {
    "path": "src/main/java/duke/utils/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Utility class for converting strings into {@code LocalDateTime} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for date and time. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for date only. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses a string into a {@code LocalDateTime} object if possible."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTimeString the string to be passed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code LocalDateTime} object describing the parsed datetime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws DukeException if the string is of an invalid datetime format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTimeString, dateTimeFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (DateTimeParseException e1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                localDateTime \u003d LocalDate.parse(dateTimeString, dateFormatter).atStartOfDay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(Store.getResourceHandler().getString(\"exception.invalidDateTime\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 39
    }
  },
  {
    "path": "src/main/java/duke/utils/DateTimeStringFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Utility class for formatting {@code LocalDateTime} objects as strings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DateTimeStringFormatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for displaying datetime */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Formats the {@code LocalDateTime} as a human-readable string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param localDateTime a {@code LocalDateTime} object describing the datetime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a formatted string representation of the datetime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String formatDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return localDateTime.format(displayFormatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 22
    }
  },
  {
    "path": "src/main/java/duke/utils/EvictingStack.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A stack with a fixed size. The bottom-most element is removed when pushing a new element onto"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * an already full {@code EvictingStack}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EvictingStack\u003cE\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The maximum size of this {@code EvictingStack}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final int maxSize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The current size of this {@code EvictingStack}. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** A reference to the top-most {@code LinkedListNode} of this {@code EvictingStack}. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private LinkedListNode\u003cE\u003e topNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** A reference to the bottom-most {@code LinkedListNode} of this {@code EvictingStack}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private LinkedListNode\u003cE\u003e bottomNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code EvictingStack} object with the specified maximum size."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param maxSize the maximum size."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public EvictingStack(int maxSize) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.maxSize \u003d maxSize;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        size \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Pushes an element onto the top of this stack."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param element the element to be pushed onto this stack."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code element} argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E push(E element) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (size \u003d\u003d maxSize) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Remove the bottom-most element if the stack is full."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            removeBottomElement();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Add a new node."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LinkedListNode\u003cE\u003e newNode \u003d new LinkedListNode\u003c\u003e(element);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LinkedListNode.linkNodes(topNode, newNode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        topNode \u003d newNode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        size++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set bottom node if the node that is being added is the only node."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            bottomNode \u003d topNode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return element;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Looks at the object at the top of this stack without removing it from the stack."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the object at the top of this stack."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws EmptyStackException if this stack is empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E peek() throws EmptyStackException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return topNode.getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the object at the top of this stack and returns that object as the value of this function."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the object at the top of this stack."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws EmptyStackException if this stack is empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E pop() throws EmptyStackException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Remove the top-most node."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        E value \u003d topNode.getValue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LinkedListNode\u003cE\u003e previousNode \u003d topNode.getPreviousNode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        topNode.removeLinks();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        topNode \u003d previousNode;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        size--;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Tests if this stack is empty."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if and only if this stack contains no elements; {@code false} otherwise."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return size \u003d\u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code LinkedListNode} representation of the top-most element in this stack."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code LinkedListNode} representation of the top-most element in this stack."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LinkedListNode\u003cE\u003e getTopNode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return topNode;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the bottom-most element in this stack."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void removeBottomElement() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LinkedListNode\u003cE\u003e nextNode \u003d bottomNode.getNextNode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        bottomNode.removeLinks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        bottomNode \u003d nextNode;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        size--;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 116
    }
  },
  {
    "path": "src/main/java/duke/utils/LinkedListNode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A node in a doubly-linked list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class LinkedListNode\u003cE\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** The value of this {@code LinkedListNode}. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final E value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** A reference to the next {@code LinkedListNode}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private LinkedListNode\u003cE\u003e nextNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** A reference to the previous {@code LinkedListNode}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private LinkedListNode\u003cE\u003e previousNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code LinkedListNode} object with the specified value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value the value to be contained."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LinkedListNode(E value) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the value contained within this {@code LinkedListNode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the value contained within this {@code LinkedListNode}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E getValue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the next {@code LinkedListNode} to point to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param nextNode the next {@code LinkedListNode}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setNextNode(LinkedListNode\u003cE\u003e nextNode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.nextNode \u003d nextNode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the next {@code LinkedListNode}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the next {@code LinkedListNode}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LinkedListNode\u003cE\u003e getNextNode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return nextNode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the previous {@code LinkedListNode} to point to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param previousNode the previous {@code LinkedListNode}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setPreviousNode(LinkedListNode\u003cE\u003e previousNode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.previousNode \u003d previousNode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the previous {@code LinkedListNode}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous {@code LinkedListNode}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LinkedListNode\u003cE\u003e getPreviousNode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousNode;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Deletes all incoming and outgoing links for this {@code LinkedListNode}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void removeLinks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (nextNode !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            nextNode.setPreviousNode(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            nextNode \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (previousNode !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            previousNode.setNextNode(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            previousNode \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Creates a link between {@code previousNode} and {@code nextNode}. If there are already existing links,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * returns {@code false} without creating the new link."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param previousNode the previous node to be linked."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param nextNode the next node to be linked."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param \u003cE\u003e the type of the {@code LinkedListNode}s."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if the links were successfully created; {@code false} otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static \u003cE\u003e boolean linkNodes(LinkedListNode\u003cE\u003e previousNode, LinkedListNode\u003cE\u003e nextNode) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (previousNode \u003d\u003d null || nextNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Unable to link non-existent node(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (previousNode.getNextNode() !\u003d null || nextNode.getPreviousNode() !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Do not override existing links."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        previousNode.setNextNode(nextNode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        nextNode.setPreviousNode(previousNode);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 107
    }
  },
  {
    "path": "src/main/java/duke/utils/LocalDateTimeAdapter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonDeserializationContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonSerializationContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Custom serializer and de-serializer for {@code LocalDateTime} objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class LocalDateTimeAdapter implements JsonSerializer\u003cLocalDateTime\u003e, JsonDeserializer\u003cLocalDateTime\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Gson invokes this call-back method during serialization when it encounters a field of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIn the implementation of this call-back method, you should consider invoking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@link JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * non-trivial field of the {@code src} object. However, you should never invoke it on the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code src} object itself since that will cause an infinite loop (Gson will call your"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * call-back method again).\u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param src the object that needs to be converted to Json."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeOfSrc the actual type (fully genericized version) of the source object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param context the context for serialization."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a JsonElement corresponding to the specified object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public JsonElement serialize(LocalDateTime src, Type typeOfSrc, JsonSerializationContext context) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ZoneOffset zoneOffset \u003d ZoneId.systemDefault().getRules().getOffset(src);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new JsonPrimitive(src.toInstant(zoneOffset).getEpochSecond());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Gson invokes this call-back method during deserialization when it encounters a field of the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIn the implementation of this call-back method, you should consider invoking"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@link JsonDeserializationContext#deserialize(JsonElement, Type)} method to create objects"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for any non-trivial field of the returned object. However, you should never invoke it on the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the same type passing {@code json} since that will cause an infinite loop (Gson will call your"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * call-back method again)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param json the Json data being deserialized."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeOfT the type of the Object to deserialize to."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param context the context for deserialization."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws JsonParseException if json is not in the expected format of {@code typeofT}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throws JsonParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return LocalDateTime.ofInstant(Instant.ofEpochSecond(json.getAsJsonPrimitive().getAsLong()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 63
    }
  },
  {
    "path": "src/main/java/duke/utils/PersistentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * An {@code ArrayList} wrapper that syncs the state of the list to a file whenever it\u0027s updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class PersistentList\u003cE\u003e implements List\u003cE\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Internal {@code ArrayList} object. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final List\u003cE\u003e list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code StorageManager} object for writing the state of the list to the specified file. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Gson} object for converting objects to JSON. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Gson gson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Type of the list. This is necessary due to erasure of generic types. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Type listType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code PersistentList} object with the specified file, type, and {@code TypeAdapterFactory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the file to read from and write to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listType the type of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeAdapterFactory custom type adapter factory to handle polymorphism."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public PersistentList(String filePath, Type listType, TypeAdapterFactory typeAdapterFactory) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        gson \u003d new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .registerTypeAdapterFactory(typeAdapterFactory).setPrettyPrinting().create();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list \u003d readStateFromFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes the current state of the list to the specified file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void syncStateToFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            storageManager.saveToFile(gson.toJson(list, listType));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retrieves the current state of the list from the specified file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the current state of the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private List\u003cE\u003e readStateFromFile() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String data \u003d storageManager.readFromFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return gson.fromJson(data, listType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the number of elements in this list.  If this list contains"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * more than {@code Integer.MAX_VALUE} elements, returns"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Integer.MAX_VALUE}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the number of elements in this list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains no elements."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains no elements"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains the specified element."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns {@code true} if and only if this list contains"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * at least one element {@code e} such that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, e)}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element whose presence in this list is to be tested"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains the specified element"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean contains(Object o) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.contains(o);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an iterator over the elements in this list in proper sequence."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an iterator over the elements in this list in proper sequence"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Iterator\u003cE\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an array containing all of the elements in this list in proper"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence (from first to last element)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe returned array will be \"safe\" in that no references to it are"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * maintained by this list.  (In other words, this method must"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * allocate a new array even if this list is backed by an array)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The caller is thus free to modify the returned array."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThis method acts as bridge between array-based and collection-based"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * APIs."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an array containing all of the elements in this list in proper"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see Arrays#asList(Object[])"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Object[] toArray() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.toArray();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an array containing all of the elements in this list in"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * proper sequence (from first to last element); the runtime type of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the returned array is that of the specified array.  If the list fits"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in the specified array, it is returned therein.  Otherwise, a new"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * array is allocated with the runtime type of the specified array and"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the size of this list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the list fits in the specified array with room to spare (i.e.,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the array has more elements than the list), the element in the array"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * immediately following the end of the list is set to {@code null}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (This is useful in determining the length of the list \u003ci\u003eonly\u003c/i\u003e if"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the caller knows that the list does not contain any null elements.)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * array-based and collection-based APIs.  Further, this method allows"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * precise control over the runtime type of the output array, and may,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * under certain circumstances, be used to save allocation costs."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eSuppose {@code x} is a list known to contain only strings."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The following code can be used to dump the list into a newly"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * allocated array of {@code String}:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e{@code"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     String[] y \u003d x.toArray(new String[0]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Note that {@code toArray(new Object[0])} is identical in function to"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code toArray()}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param a the array into which the elements of this list are to"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *          be stored, if it is big enough; otherwise, a new array of the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *          same runtime type is allocated for this purpose."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an array containing the elements of this list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ArrayStoreException  if the runtime type of the specified array"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is not a supertype of the runtime type of every element in"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              this list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified array is null"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public \u003cT\u003e T[] toArray(T[] a) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.toArray(a);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Appends the specified element to the end of this list (optional"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation)."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eLists that support this operation may place limitations on what"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * elements may be added to this list.  In particular, some"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * lists will refuse to add null elements, and others will impose"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * restrictions on the type of elements that may be added.  List"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * classes should clearly specify in their documentation any restrictions"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * on what elements may be added."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param e element to be appended to this list"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} (as specified by {@link Collection#add})"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code add} operation"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and this"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       list does not permit null elements"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of this element"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean add(E e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.add(e);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Inserts the specified element at the specified position in this list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (optional operation).  Shifts the element currently at that position"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (if any) and any subsequent elements to the right (adds one to their"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * indices)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index   index at which the specified element is to be inserted"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param element element to be inserted"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code add} operation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       this list does not permit null elements"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of the specified"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       element prevents it from being added to this list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void add(int index, E element) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.add(index, element);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the first occurrence of the specified element from this list,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if it is present (optional operation).  If this list does not contain"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the element, it is unchanged.  More formally, removes the element with"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the lowest index {@code i} such that"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (if such an element exists).  Returns {@code true} if this list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * contained the specified element (or equivalently, if this list changed"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * as a result of the call)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to be removed from this list, if present"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contained the specified element"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the type of the specified element"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with this list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and this"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       list does not permit null elements"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean remove(Object o) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean elementRemoved \u003d list.remove(o);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return elementRemoved;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the element at the specified position in this list (optional"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation).  Shifts any subsequent elements to the left (subtracts one"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * from their indices).  Returns the element that was removed from the"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index the index of the element to be removed"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element previously at the specified position"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E remove(int index) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        E previousElement \u003d list.remove(index);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousElement;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains all of the elements of the"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection to be checked for containment in this list"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains all of the elements of the"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the types of one or more elements"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              in the specified collection are incompatible with this"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified collection contains one"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              elements"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              or if the specified collection is null"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean containsAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.containsAll(c);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Appends all of the elements in the specified collection to the end of"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, in the order that they are returned by the specified"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * collection\u0027s iterator (optional operation).  The behavior of this"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation is undefined if the specified collection is modified while"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the operation is in progress.  (Note that this will occur if the"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection is this list, and it\u0027s nonempty.)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be added to this list"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code addAll} operation"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of the specified"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       collection prevents it from being added to this list"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified collection contains one"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       elements, or if the specified collection is null"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of an element of the"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection prevents it from being added to this list"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #add(Object)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean addAll(Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.addAll(c);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Inserts all of the elements in the specified collection into this"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * list at the specified position (optional operation).  Shifts the"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * element currently at that position (if any) and any subsequent"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * elements to the right (increases their indices).  The new elements"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * will appear in this list in the order that they are returned by the"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection\u0027s iterator.  The behavior of this operation is"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * undefined if the specified collection is modified while the"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation is in progress.  (Note that this will occur if the specified"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * collection is this list, and it\u0027s nonempty.)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index at which to insert the first element from the"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *              specified collection"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c     collection containing elements to be added to this list"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code addAll} operation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of the specified"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       collection prevents it from being added to this list"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified collection contains one"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       elements, or if the specified collection is null"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of an element of the"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection prevents it from being added to this list"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean addAll(int index, Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.addAll(index, c);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes from this list all of its elements that are contained in the"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection (optional operation)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be removed from this list"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code removeAll} operation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of this list"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with the specified collection"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if this list contains a null element and the"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection does not permit null elements"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or if the specified collection is null"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #remove(Object)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean removeAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.removeAll(c);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retains only the elements in this list that are contained in the"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection (optional operation).  In other words, removes"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * from this list all of its elements that are not contained in the"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be retained in this list"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code retainAll} operation"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of this list"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with the specified collection"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if this list contains a null element and the"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection does not permit null elements"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or if the specified collection is null"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #remove(Object)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean retainAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.retainAll(c);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes all of the elements from this list (optional operation)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The list will be empty after this call returns."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code clear} operation"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index of the element to return"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element at the specified position in this list"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of range"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E get(int index) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Replaces the element at the specified position in this list with the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified element (optional operation)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index   index of the element to replace"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param element element to be stored at the specified position"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element previously at the specified position"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code set} operation"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       this list does not permit null elements"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of the specified"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       element prevents it from being added to this list"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E set(int index, E element) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        E previousElement \u003d list.set(index, element);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousElement;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the index of the first occurrence of the specified element"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in this list, or -1 if this list does not contain the element."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns the lowest index {@code i} such that"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))},"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or -1 if there is no such index."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to search for"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the index of the first occurrence of the specified element in"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, or -1 if this list does not contain the element"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int indexOf(Object o) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.indexOf(o);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the index of the last occurrence of the specified element"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in this list, or -1 if this list does not contain the element."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns the highest index {@code i} such that"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))},"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or -1 if there is no such index."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to search for"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the index of the last occurrence of the specified element in"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, or -1 if this list does not contain the element"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int lastIndexOf(Object o) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.lastIndexOf(o);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence)."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.listIterator();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence), starting at the specified position in the list."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The specified index indicates the first element that would be"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * returned by an initial call to {@link ListIterator#next next}."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * An initial call to {@link ListIterator#previous previous} would"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * return the element with the specified index minus one."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index of the first element to be returned from the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *              list iterator (by a call to {@link ListIterator#next next})"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence), starting at the specified position in the list"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of range"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator(int index) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.listIterator(index);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a view of the portion of this list between the specified"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code fromIndex} and {@code toIndex} are equal, the returned list is"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * empty.)  The returned list is backed by this list, so non-structural"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * changes in the returned list are reflected in this list, and vice-versa."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The returned list supports all of the optional list operations supported"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * by this list.\u003cp\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * This method eliminates the need for explicit range operations (of"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the sort that commonly exist for arrays).  Any operation that expects"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * a list can be used as a range operation by passing a subList view"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * instead of a whole list.  For example, the following idiom"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * removes a range of elements from a list:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e{@code"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *      list.subList(from, to).clear();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Similar idioms may be constructed for {@code indexOf} and"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code lastIndexOf}, and all of the algorithms in the"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Collections} class can be applied to a subList.\u003cp\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The semantics of the list returned by this method become undefined if"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the backing list (i.e., this list) is \u003ci\u003estructurally modified\u003c/i\u003e in"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * any way other than via the returned list.  (Structural modifications are"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * those that change the size of this list, or otherwise perturb it in such"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * a fashion that iterations in progress may yield incorrect results.)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param fromIndex low endpoint (inclusive) of the subList"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param toIndex   high endpoint (exclusive) of the subList"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a view of the specified range within this list"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException for an illegal endpoint index value"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code fromIndex \u003c 0 || toIndex \u003e size ||"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   fromIndex \u003e toIndex})"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public List\u003cE\u003e subList(int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.subList(fromIndex, toIndex);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 592
    }
  },
  {
    "path": "src/main/java/duke/utils/PersistentMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A {@code HashMap} wrapper that syncs the state of the map to a file whenever it\u0027s updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class PersistentMap\u003cK, V\u003e implements Map\u003cK, V\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Internal {@code HashMap} object. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Map\u003cK, V\u003e map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code StorageManager} object for writing the state of the list to the specified file. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Gson} object for converting objects to JSON. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Gson gson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Type of the map. This is necessary due to erasure of generic types. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Type mapType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code PersistentMap} object with the specified file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the file to read from and write to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param mapType the type of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public PersistentMap(String filePath, Type mapType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.mapType \u003d mapType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        map \u003d readStateFromFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes the current state of the map to the specified file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void syncStateToFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            storageManager.saveToFile(gson.toJson(map, mapType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retrieves the current state of the map from the specified file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the current state of the map."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Map\u003cK, V\u003e readStateFromFile() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String data \u003d storageManager.readFromFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return gson.fromJson(data, mapType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the number of key-value mappings in this map.  If the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * map contains more than {@code Integer.MAX_VALUE} elements, returns"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Integer.MAX_VALUE}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the number of key-value mappings in this map"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this map contains no key-value mappings."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this map contains no key-value mappings"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.isEmpty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this map contains a mapping for the specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * key.  More formally, returns {@code true} if and only if"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this map contains a mapping for a key {@code k} such that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(key, k)}.  (There can be"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * at most one such mapping.)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key whose presence in this map is to be tested"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this map contains a mapping for the specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         key"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key is of an inappropriate type for"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and this map"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         does not permit null keys"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean containsKey(Object key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.containsKey(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this map maps one or more keys to the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified value.  More formally, returns {@code true} if and only if"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this map contains at least one mapping to a value {@code v} such that"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(value, v)}.  This operation"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * will probably require time linear in the map size for most"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * implementations of the {@code Map} interface."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value value whose presence in this map is to be tested"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this map maps one or more keys to the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         specified value"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the value is of an inappropriate type for"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified value is null and this"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         map does not permit null values"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean containsValue(Object value) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.containsValue(value);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the value to which the specified key is mapped,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or {@code null} if this map contains no mapping for the key."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eMore formally, if this map contains a mapping from a key"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code k} to a value {@code v} such that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(key, k)},"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * then this method returns {@code v}; otherwise"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * it returns {@code null}.  (There can be at most one such mapping.)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf this map permits null values, then a return value of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null} does not \u003ci\u003enecessarily\u003c/i\u003e indicate that the map"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * contains no mapping for the key; it\u0027s also possible that the map"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * explicitly maps the key to {@code null}.  The {@link #containsKey"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * containsKey} operation may be used to distinguish these two cases."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the key whose associated value is to be returned"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the value to which the specified key is mapped, or"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         {@code null} if this map contains no mapping for the key"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key is of an inappropriate type for"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and this map"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         does not permit null keys"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V get(Object key) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.get(key);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Associates the specified value with the specified key in this map"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (optional operation).  If the map previously contained a mapping for"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the key, the old value is replaced by the specified value.  (A map"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code m} is said to contain a mapping for a key {@code k} if and only"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if {@link #containsKey(Object) m.containsKey(k)} would return"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code true}.)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is to be associated"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value value to be associated with the specified key"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous value associated with {@code key}, or"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         {@code null} if there was no mapping for {@code key}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (A {@code null} return can also indicate that the map"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         previously associated {@code null} with {@code key},"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         if the implementation supports {@code null} values.)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key or value is null"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V put(K key, V value) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V previousValue \u003d map.put(key, value);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousValue;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the mapping for a key from this map if it is present"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (optional operation).   More formally, if this map contains a mapping"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * from key {@code k} to value {@code v} such that"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(key, k)}, that mapping"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is removed.  (The map can contain at most one such mapping.)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eReturns the value to which this map previously associated the key,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or {@code null} if the map contained no mapping for the key."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf this map permits null values, then a return value of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null} does not \u003ci\u003enecessarily\u003c/i\u003e indicate that the map"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * contained no mapping for the key; it\u0027s also possible that the map"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * explicitly mapped the key to {@code null}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe map will not contain a mapping for the specified key once the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * call returns."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key whose mapping is to be removed from the map"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous value associated with {@code key}, or"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         {@code null} if there was no mapping for {@code key}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key is of an inappropriate type for"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and this"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         map does not permit null keys"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V remove(Object key) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V previousValue \u003d map.remove(key);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousValue;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the entry for the specified key only if it is currently"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapped to the specified value."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (map.containsKey(key) \u0026\u0026 Objects.equals(map.get(key), value)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     map.remove(key);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * } else"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is associated"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value value expected to be associated with the specified key"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if the value was removed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key or value is of an inappropriate"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         type for this map"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key or value is null,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean remove(Object key, Object value) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean isValueRemoved \u003d map.remove(key, value);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return isValueRemoved;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Copies all of the mappings from the specified map to this map"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (optional operation).  The effect of this call is equivalent to that"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * of calling {@link #put(Object,Object) put(k, v)} on this map once"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for each mapping from key {@code k} to value {@code v} in the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified map.  The behavior of this operation is undefined if the"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified map is modified while the operation is in progress."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param m mappings to be stored in this map"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code putAll} operation"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of a key or value in the"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         specified map prevents it from being stored in this map"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified map is null, or if"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map does not permit null keys or values, and the"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         specified map contains null keys or values"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of a key or value in"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         the specified map prevents it from being stored in this map"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void putAll(Map\u003c? extends K, ? extends V\u003e m) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        map.putAll(m);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes all of the mappings from this map (optional operation)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The map will be empty after this call returns."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code clear} operation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        map.clear();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a {@link Set} view of the keys contained in this map."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The set is backed by the map, so changes to the map are"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * reflected in the set, and vice-versa.  If the map is modified"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * while an iteration over the set is in progress (except through"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the iterator\u0027s own {@code remove} operation), the results of"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the iteration are undefined.  The set supports element removal,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * which removes the corresponding mapping from the map, via the"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Iterator.remove}, {@code Set.remove},"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code removeAll}, {@code retainAll}, and {@code clear}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operations.  It does not support the {@code add} or {@code addAll}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a set view of the keys contained in this map"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Set\u003cK\u003e keySet() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.keySet();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a {@link Collection} view of the values contained in this map."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The collection is backed by the map, so changes to the map are"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * reflected in the collection, and vice-versa.  If the map is"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * modified while an iteration over the collection is in progress"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (except through the iterator\u0027s own {@code remove} operation),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the results of the iteration are undefined.  The collection"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * supports element removal, which removes the corresponding"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping from the map, via the {@code Iterator.remove},"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Collection.remove}, {@code removeAll},"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code retainAll} and {@code clear} operations.  It does not"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * support the {@code add} or {@code addAll} operations."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a collection view of the values contained in this map"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Collection\u003cV\u003e values() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.values();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a {@link Set} view of the mappings contained in this map."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The set is backed by the map, so changes to the map are"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * reflected in the set, and vice-versa.  If the map is modified"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * while an iteration over the set is in progress (except through"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the iterator\u0027s own {@code remove} operation, or through the"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code setValue} operation on a map entry returned by the"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * iterator) the results of the iteration are undefined.  The set"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * supports element removal, which removes the corresponding"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping from the map, via the {@code Iterator.remove},"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Set.remove}, {@code removeAll}, {@code retainAll} and"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code clear} operations.  It does not support the"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code add} or {@code addAll} operations."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a set view of the mappings contained in this map"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Set\u003cEntry\u003cK, V\u003e\u003e entrySet() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.entrySet();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the value to which the specified key is mapped, or"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code defaultValue} if this map contains no mapping for the key."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the key whose associated value is to be returned"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param defaultValue the default mapping of the key"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the value to which the specified key is mapped, or"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code defaultValue} if this map contains no mapping for the key"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key is of an inappropriate type for"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this map"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and this map"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * does not permit null keys"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V getOrDefault(Object key, V defaultValue) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return map.getOrDefault(key, defaultValue);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Performs the given action for each entry in this map until all entries"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * have been processed or the action throws an exception.   Unless"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * otherwise specified by the implementing class, actions are performed in"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the order of entry set iteration (if an iteration order is specified.)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Exceptions thrown by the action are relayed to the caller."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for (Map.Entry\u003cK, V\u003e entry : map.entrySet())"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     action.accept(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param action The action to be performed for each entry"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified action is null"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ConcurrentModificationException if an entry is found to be"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * removed during iteration"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void forEach(BiConsumer\u003c? super K, ? super V\u003e action) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        map.forEach(action);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Replaces each entry\u0027s value with the result of invoking the given"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * function on that entry until all entries have been processed or the"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * function throws an exception.  Exceptions thrown by the function are"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * relayed to the caller."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for (Map.Entry\u003cK, V\u003e entry : map.entrySet())"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     entry.setValue(function.apply(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param function the function to apply to each entry"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code set} operation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is not supported by this map\u0027s entry set iterator."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of a replacement value"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * prevents it from being stored in this map"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified function is null, or the"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified replacement value is null, and this map does not permit null"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * values"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if a replacement value is of an inappropriate"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         type for this map"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if function or a replacement value is null,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of a replacement value"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ConcurrentModificationException if an entry is found to be"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * removed during iteration"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void replaceAll(BiFunction\u003c? super K, ? super V, ? extends V\u003e function) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        map.replaceAll(function);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the specified key is not already associated with a value (or is mapped"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * to {@code null}) associates it with the given value and returns"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null}, else returns the current value."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * V v \u003d map.get(key);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (v \u003d\u003d null)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     v \u003d map.put(key, value);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * return v;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is to be associated"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value value to be associated with the specified key"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous value associated with the specified key, or"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         {@code null} if there was no mapping for the key."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (A {@code null} return can also indicate that the map"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         previously associated {@code null} with the key,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         if the implementation supports null values.)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the key or value is of an inappropriate"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         type for this map"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key or value is null,"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V putIfAbsent(K key, V value) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V previousValue \u003d map.putIfAbsent(key, value);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousValue;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Replaces the entry for the specified key only if currently"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapped to the specified value."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (map.containsKey(key) \u0026\u0026 Objects.equals(map.get(key), oldValue)) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     map.put(key, newValue);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return true;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * } else"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return false;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation does not throw NullPointerException"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for maps that do not support null values if oldValue is null unless"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * newValue is also null."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is associated"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param oldValue value expected to be associated with the specified key"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param newValue value to be associated with the specified key"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if the value was replaced"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of a specified key or value"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if a specified key or newValue is null,"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if oldValue is null and this map does not"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         permit null values"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of a specified key"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean replace(K key, V oldValue, V newValue) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean isValueRemoved \u003d map.replace(key, oldValue, newValue);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return isValueRemoved;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Replaces the entry for the specified key only if it is"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * currently mapped to some value."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to, for this {@code map}:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (map.containsKey(key)) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return map.put(key, value);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * } else"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     return null;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is associated"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value value to be associated with the specified key"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the previous value associated with the specified key, or"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         {@code null} if there was no mapping for the key."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (A {@code null} return can also indicate that the map"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         previously associated {@code null} with the key,"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         if the implementation supports null values.)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key or value is null,"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         and this map does not permit null keys or values"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V replace(K key, V value) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V previousValue \u003d map.replace(key, value);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousValue;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the specified key is not already associated with a value (or is mapped"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * to {@code null}), attempts to compute its value using the given mapping"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * function and enters it into this map unless {@code null}."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the mapping function returns {@code null}, no mapping is recorded."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the mapping function itself throws an (unchecked) exception, the"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * exception is rethrown, and no mapping is recorded.  The most"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * common usage is to construct a new object serving as an initial"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapped value or memoized result, as in:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * map.computeIfAbsent(key, k -\u003e new Value(f(k)));"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eOr to implement a multi-value map, {@code Map\u003cK,Collection\u003cV\u003e\u003e},"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * supporting multiple values per key:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * map.computeIfAbsent(key, k -\u003e new HashSet\u003cV\u003e()).add(v);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe mapping function should not modify this map during computation."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to the following steps for this"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code map}, then returning the current value or {@code null} if now"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * absent:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (map.get(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     V newValue \u003d mappingFunction.apply(key);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     if (newValue !\u003d null)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         map.put(key, newValue);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about detecting if the"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping function modifies this map during computation and, if"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * appropriate, reporting an error. Non-concurrent implementations should"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * override this method and, on a best-effort basis, throw a"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code ConcurrentModificationException} if it is detected that the"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping function modifies this map during computation. Concurrent"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * implementations should override this method and, on a best-effort basis,"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * throw an {@code IllegalStateException} if it is detected that the"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping function modifies this map during computation and as a result"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * computation would never complete."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties. In particular, all implementations of"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subinterface {@link java.util.concurrent.ConcurrentMap} must document"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * whether the mapping function is applied once atomically only if the value"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is not present."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is to be associated"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param mappingFunction the mapping function to compute a value"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the current (existing or computed) value associated with"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         the specified key, or null if the computed value is null"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map does not support null keys, or the mappingFunction"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is null"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V computeIfAbsent(K key, Function\u003c? super K, ? extends V\u003e mappingFunction) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V value \u003d map.computeIfAbsent(key, mappingFunction);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the value for the specified key is present and non-null, attempts to"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * compute a new mapping given the key and its current mapped value."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the remapping function returns {@code null}, the mapping is removed."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the remapping function itself throws an (unchecked) exception, the"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * exception is rethrown, and the current mapping is left unchanged."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe remapping function should not modify this map during computation."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to performing the following"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * steps for this {@code map}, then returning the current value or"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null} if now absent:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (map.get(key) !\u003d null) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     V oldValue \u003d map.get(key);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     V newValue \u003d remappingFunction.apply(key, oldValue);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     if (newValue !\u003d null)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         map.put(key, newValue);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     else"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         map.remove(key);"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about detecting if the"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and, if"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * appropriate, reporting an error. Non-concurrent implementations should"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * override this method and, on a best-effort basis, throw a"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code ConcurrentModificationException} if it is detected that the"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation. Concurrent"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * implementations should override this method and, on a best-effort basis,"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * throw an {@code IllegalStateException} if it is detected that the"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and as a result"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * computation would never complete."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties. In particular, all implementations of"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subinterface {@link java.util.concurrent.ConcurrentMap} must document"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * whether the remapping function is applied once atomically only if the"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * value is not present."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is to be associated"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param remappingFunction the remapping function to compute a value"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the new value associated with the specified key, or null if none"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map does not support null keys, or the"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         remappingFunction is null"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V computeIfPresent(K key, BiFunction\u003c? super K, ? super V, ? extends V\u003e remappingFunction) {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V newValue \u003d map.computeIfPresent(key, remappingFunction);"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return newValue;"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Attempts to compute a mapping for the specified key and its current"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapped value (or {@code null} if there is no current mapping). For"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * example, to either create or append a {@code String} msg to a value"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * mapping:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * map.compute(key, (k, v) -\u003e (v \u003d\u003d null) ? msg : v.concat(msg))}\u003c/pre\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (Method {@link #merge merge()} is often simpler to use for such purposes.)"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the remapping function returns {@code null}, the mapping is removed"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (or remains absent if initially absent).  If the remapping function"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * itself throws an (unchecked) exception, the exception is rethrown, and"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the current mapping is left unchanged."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe remapping function should not modify this map during computation."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to performing the following"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * steps for this {@code map}, then returning the current value or"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null} if absent:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * V oldValue \u003d map.get(key);"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * V newValue \u003d remappingFunction.apply(key, oldValue);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (oldValue !\u003d null) {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *    if (newValue !\u003d null)"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *       map.put(key, newValue);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *    else"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *       map.remove(key);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * } else {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *    if (newValue !\u003d null)"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *       map.put(key, newValue);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *    else"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *       return null;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about detecting if the"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and, if"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * appropriate, reporting an error. Non-concurrent implementations should"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * override this method and, on a best-effort basis, throw a"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code ConcurrentModificationException} if it is detected that the"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation. Concurrent"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * implementations should override this method and, on a best-effort basis,"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * throw an {@code IllegalStateException} if it is detected that the"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and as a result"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * computation would never complete."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties. In particular, all implementations of"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subinterface {@link java.util.concurrent.ConcurrentMap} must document"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * whether the remapping function is applied once atomically only if the"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * value is not present."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the specified value is to be associated"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param remappingFunction the remapping function to compute a value"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the new value associated with the specified key, or null if none"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         this map does not support null keys, or the"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         remappingFunction is null"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V compute(K key, BiFunction\u003c? super K, ? super V, ? extends V\u003e remappingFunction) {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V newValue \u003d map.compute(key, remappingFunction);"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return newValue;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the specified key is not already associated with a value or is"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * associated with null, associates it with the given non-null value."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Otherwise, replaces the associated value with the results of the given"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function, or removes if the result is {@code null}. This"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * method may be of use when combining multiple mapped values for a key."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * For example, to either create or append a {@code String msg} to a"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * value mapping:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * map.merge(key, msg, String::concat)"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the remapping function returns {@code null}, the mapping is removed."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * If the remapping function itself throws an (unchecked) exception, the"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * exception is rethrown, and the current mapping is left unchanged."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe remapping function should not modify this map during computation."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @implSpec"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The default implementation is equivalent to performing the following"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * steps for this {@code map}, then returning the current value or"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code null} if absent:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e {@code"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * V oldValue \u003d map.get(key);"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * V newValue \u003d (oldValue \u003d\u003d null) ? value :"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *              remappingFunction.apply(oldValue, value);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if (newValue \u003d\u003d null)"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     map.remove(key);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * else"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     map.put(key, newValue);"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about detecting if the"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and, if"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * appropriate, reporting an error. Non-concurrent implementations should"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * override this method and, on a best-effort basis, throw a"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code ConcurrentModificationException} if it is detected that the"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation. Concurrent"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * implementations should override this method and, on a best-effort basis,"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * throw an {@code IllegalStateException} if it is detected that the"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * remapping function modifies this map during computation and as a result"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * computation would never complete."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe default implementation makes no guarantees about synchronization"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or atomicity properties of this method. Any implementation providing"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * atomicity guarantees must override this method and document its"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * concurrency properties. In particular, all implementations of"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subinterface {@link java.util.concurrent.ConcurrentMap} must document"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * whether the remapping function is applied once atomically only if the"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * value is not present."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key key with which the resulting value is to be associated"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param value the non-null value to be merged with the existing value"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *        associated with the key or, if no existing value or a null value"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *        is associated with the key, to be associated with the key"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param remappingFunction the remapping function to recompute a value if"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *        present"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the new value associated with the specified key, or null if no"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         value is associated with the key"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code put} operation"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         is not supported by this map"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException if the class of the specified key or value"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         prevents it from being stored in this map"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException if some property of the specified key"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         or value prevents it from being stored in this map"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         (\u003ca href\u003d\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified key is null and this map"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         does not support null keys or the value or remappingFunction is"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *         null"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @since 1.8"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public V merge(K key, V value, BiFunction\u003c? super V, ? super V, ? extends V\u003e remappingFunction) {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        V newValue \u003d map.merge(key, value, remappingFunction);"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return newValue;"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 933
    }
  },
  {
    "path": "src/main/java/duke/utils/PrettyPrinter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Responsible for the formatting of output from \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class PrettyPrinter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of spaces to prefix each line with. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final int leftPadding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of underscores each divider should be made up of. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final int dividerLength;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code PrettyPrinter} object that will prefix each line with the specified number of spaces and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * add a divider with the specified number of underscores to the top and bottom of each message block."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param leftPadding the number of spaces to prefix each line with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dividerLength the number of underscores of each divider."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public PrettyPrinter(int leftPadding, int dividerLength) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assert leftPadding \u003e\u003d 0 : \"Amount of left padding should be non-negative\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assert dividerLength \u003e\u003d 0 : \"Divider length should be non-negative\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.leftPadding \u003d leftPadding;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dividerLength \u003d dividerLength;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Prints out the number of spaces specified by {@code leftPadding}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void printPadding() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        System.out.print(\" \".repeat(leftPadding));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Prints out the divider using the number of underscores specified by {@code dividerLength}. The dividers are"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subject to left padding. If the {@code dividerLength} is {@code 0}, this method does nothing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void printDivider() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (dividerLength !\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            printPadding();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.out.println(\"_\".repeat(dividerLength));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Pretty prints the message by adding left padding and dividers at the top and bottom of the message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the string to be pretty printed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Handle both LF and CRLF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String[] lines \u003d message.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            printPadding();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 60
    }
  },
  {
    "path": "src/main/java/duke/utils/ResourceHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Interface through which string resources are retrieved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ResourceHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Default locale - set to English/Singapore. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Locale defaultLocale \u003d new Locale(\"en\", \"SG\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** For caching the `ResourceBundle` objects of each locale. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Map\u003cLocale, ResourceBundle\u003e resourceBundles \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Locale of this {@code ResourceHandler}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Locale locale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code ResourceHandler} object with the default locale."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ResourceHandler() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.locale \u003d defaultLocale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code ResourceHandler} object with the specified locale."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param locale the locale to be used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ResourceHandler(Locale locale) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.locale \u003d locale;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Sets the locale of this {@code ResourceHandler} object to the specified locale. Updates the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * application configuration."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param locale the locale to be used."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void setLocale(Locale locale) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.locale \u003d locale;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Store.getConfigManager().setProperty(\"language\", locale.getLanguage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Store.getConfigManager().setProperty(\"country\", locale.getCountry());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the string resource for the given key and locale."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the identifier for the string resource."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param locale the locale of the string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the string resource."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String getString(String key, Locale locale) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        resourceBundles.putIfAbsent(locale, ResourceBundle.getBundle(\"Strings\", locale));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return resourceBundles.get(locale).getString(key);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the string resource for the given key in the locale of this {@code ResourceHandler}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the identifier for the string resource."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the string resource."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getString(String key) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return getString(key, locale);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 68
    }
  },
  {
    "path": "src/main/java/duke/utils/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Responsible for saving and loading the state of the application from a file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Path of the file to read from and write to. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code StorageManager} object that is associated with the specified file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the file to read from and write to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public StorageManager(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes data to the specified file, overwriting the file if it already exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param data the data to be written into the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void saveToFile(String data) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        File parentDir \u003d file.getParentFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // If the parent directory does not exist, create it along with any other"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // necessary but non-existent parent directories."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!parentDir.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            parentDir.mkdirs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Set the encoding to UTF-8."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Writer writer \u003d new OutputStreamWriter(new FileOutputStream(filePath), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        writer.write(data);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Reads data from the specified file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the data present in the file or a string representation of an empty array if the file does not exist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String readFromFile() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // If the file does not exist, return a string representation of an empty array."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!(new File(filePath).exists())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return \"[]\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Files.readString(Path.of(filePath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 61
    }
  },
  {
    "path": "src/main/java/duke/utils/Store.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * State container for the \u003ci\u003eDuke\u003c/i\u003e application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code TaskManager} object to keep track of tasks. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code AliasManager} object to keep track of aliases. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final AliasManager aliasManager \u003d new AliasManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code ResourceHandler} object to retrieve string resources. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final ResourceHandler resourceHandler \u003d new ResourceHandler();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code ConfigManager} object to manage the configuration of the application. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final ConfigManager configManager \u003d new ConfigManager(\"./data/config.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Store} object. This constructor is private to prevent instantiation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Store() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code TaskManager} object that is keeping track of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code TaskManager} object that is keeping track of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code AliasManager} object that is keeping track of aliases."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code AliasManager} object that is keeping track of aliases."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static AliasManager getAliasManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return aliasManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code ResourceHandler} object for retrieving string resources."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code ResourceHandler} object for retrieving string resources."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static ResourceHandler getResourceHandler() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return resourceHandler;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the {@code ConfigManager} object that is managing the configuration of the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the {@code ConfigManager} object that is managing the configuration of the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static ConfigManager getConfigManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return configManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 58
    }
  },
  {
    "path": "src/main/resources/views/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "      \u003cHBox fx:id\u003d\"speechBubble\" maxHeight\u003d\"-Infinity\" styleClass\u003d\"speech-bubble\" stylesheets\u003d\"@../styles/base.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ianyong": 27
    }
  },
  {
    "path": "src/main/resources/views/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../styles/base.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.39999999999998\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.3999999999999986\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ianyong": 19
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testHasDateTimeElapsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Deadline upcomingDeadline \u003d new Deadline(\"Project Meeting\", currentTime.plusSeconds(10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(upcomingDeadline.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Deadline overdueDeadline \u003d new Deadline(\"Project Meeting\", currentTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(overdueDeadline.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event firstDeadline \u003d new Event(\"First Deadline\", LocalDateTime.parse(\"2020-08-25T09:00:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event secondDeadline \u003d new Event(\"Second Deadline\", LocalDateTime.parse(\"2020-08-25T10:00:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event thirdDeadline \u003d new Event(\"Third Deadline\", LocalDateTime.parse(\"2020-08-25T11:00:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeadline.compareTo(secondDeadline) \u003c 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondDeadline.compareTo(thirdDeadline) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeadline.compareTo(thirdDeadline) \u003c 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondDeadline.compareTo(secondDeadline) \u003d\u003d 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdDeadline.compareTo(firstDeadline) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdDeadline.compareTo(firstDeadline) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 32
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testHasDateTimeElapsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event upcomingEvent \u003d new Event(\"CS2103T Lecture\", currentTime.plusSeconds(10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(upcomingEvent.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event overdueEvent \u003d new Event(\"CS2103T Lecture\", currentTime.minusSeconds(10));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(overdueEvent.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event firstEvent \u003d new Event(\"First Event\", LocalDateTime.parse(\"2020-08-25T09:00:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event secondEvent \u003d new Event(\"Second Event\", LocalDateTime.parse(\"2020-08-25T10:00:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event thirdEvent \u003d new Event(\"Third Event\", LocalDateTime.parse(\"2020-08-25T11:00:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstEvent.compareTo(secondEvent) \u003c 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondEvent.compareTo(thirdEvent) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstEvent.compareTo(thirdEvent) \u003c 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondEvent.compareTo(secondEvent) \u003d\u003d 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdEvent.compareTo(firstEvent) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdEvent.compareTo(firstEvent) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "event project meeting /at Friday 2 to 4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "deadline individual project /by August 20"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "listtt"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list all"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done -5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done ewofije"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "event birthday celebration /by September 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "deadline movie night /at December 28"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete 13"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete -324"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ianyong": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM discard any changes to env vars when script exits"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "setlocal enabledelayedexpansion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM recreate bin directory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rmdir /s /q ..\\bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "mkdir ..\\bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "(for /f \"delims\u003d\" %%f in (\u0027dir /b /s ..\\src\\main\\*.java\u0027) do ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d%%f"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d!file:\\\u003d\\\\!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @echo \"!file!\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ")) \u003e sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM copy properties files into the bin folder"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "(for /f \"delims\u003d\" %%f in (\u0027dir /b /s ..\\src\\main\\*.properties\u0027) do ("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d%%f"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d!file:\\\u003d\\\\!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @echo \"!file!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ")) \u003e sources.txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "for /f \"delims\u003d\" %%f in (sources.txt) do copy %%f ..\\bin"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM delete sources.txt"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "del sources.txt"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "java -D\"file.encoding\u003dUTF-8\" -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ianyong": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# recreate bin directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rm -rf ../bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  )"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# delete sources.txt"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rm sources.txt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# copy properties files into the bin folder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "find ../src/main -name \"*.properties\" -exec cp \"{}\" ../bin \\;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ianyong": 13
    }
  }
]
