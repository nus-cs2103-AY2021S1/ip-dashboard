[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"}"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":61}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"## Introduction "},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"Duke is a simple application that helps you keep track of your ToDos, Deadlines and Events all in one list."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"## List of Features "},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"**`todo`**: Adds a ToDo task into your list."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"**`event`**: Adds an Event task into your list."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"**`deadline`**: Adds a Deadline task into your list."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"**`list`**: Lists all tasks in your list."},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"**`find`**: Lists all tasks in your list that matches the keyword."},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"**`done`**: Marks a task as done."},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"**`delete`**: Deletes a task from your list."},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"**`bye`**: Terminates the Application."},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"## Usage of Features"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"#### 1. **`todo`**: Adds a ToDo task ino your list"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"- This command adds a ToDo task into your list"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"- ToDo task is useful if your task doesn\u0027t require any deadline"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"`todo \u003cdescription\u003e`"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"`todo CS2103T assignment`"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"Roger. I\u0027ve added this task:"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"[T][✘] CS2103T assignment"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"Now you have 1 tasks in the list."},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"#### 2. **`event`**: Adds an Event task into your list."},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"- This command adds an Event task into your list"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"- Event task is useful if you need to note down an upcoming event that is happening on a certain day"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"- Date format has to be strictly adhered to"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"- Description and Date **must** be provided"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"`event \u003cdescription\u003e /at \u003cD/M/YYYY\u003e`"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"`event Brian\u0027s birthday /at 4/5/2020`"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"Roger. I\u0027ve added this task:"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"[E][✘] Brian\u0027s birthday (by: May 4 2020)"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"Now you have 2 tasks in the list."},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"#### 3. **`deadline`**: Adds a Deadline task into your list."},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"- This command adds a Deadline task into your list"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"- Deadline task is useful when your ToDo task has a deadline, as suggested by the name itself "},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"- Deadline format has to be strictly adhered to"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"- Description and Deadline **must** be provided"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"`deadline \u003cdescription\u003e /by \u003cD/M/YYYY\u003e`"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"`deadline CS2103 Lab /by 31/9/2020`"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"Roger. I\u0027ve added this task:"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"[D][✘] CS2103 Lab (by: Sep 30 2020)"},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"Now you have 3 tasks in the list."},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":"#### 4. **`list`**: Lists all tasks in your list."},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"- This command will display all the tasks in your list"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"`list`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":"`list`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":104,"author":{"gitId":"printinghelloworld"},"content":"Here are the tasks in your list:"},{"lineNumber":105,"author":{"gitId":"printinghelloworld"},"content":"1.[T][✘] CS2103T assignment"},{"lineNumber":106,"author":{"gitId":"printinghelloworld"},"content":"2.[E][✘] Brian\u0027s birthday (by: May 4 2020)"},{"lineNumber":107,"author":{"gitId":"printinghelloworld"},"content":"3.[D][✘] CS2103 Lab (by: Sep 30 2020)"},{"lineNumber":108,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":109,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":110,"author":{"gitId":"printinghelloworld"},"content":"#### 5. **`find`**: Lists all tasks in your list that matches the keyword."},{"lineNumber":111,"author":{"gitId":"printinghelloworld"},"content":"- This command lists all the tasks in your list, if any"},{"lineNumber":112,"author":{"gitId":"printinghelloworld"},"content":"- Keyword **must** be provided and it is not case-sensitive"},{"lineNumber":113,"author":{"gitId":"printinghelloworld"},"content":"- All tasks containing the keyword would be listed, even if the keyword matches the task only partially, as shown in the example below"},{"lineNumber":114,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":115,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":116,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":117,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":118,"author":{"gitId":"printinghelloworld"},"content":"`find \u003ckeyword\u003e`"},{"lineNumber":119,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":120,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":121,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":122,"author":{"gitId":"printinghelloworld"},"content":"`find 2103`"},{"lineNumber":123,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":124,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":125,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":126,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":127,"author":{"gitId":"printinghelloworld"},"content":"Here are the matching tasks in your list:"},{"lineNumber":128,"author":{"gitId":"printinghelloworld"},"content":"1.[T][✘] CS2103T assignment"},{"lineNumber":129,"author":{"gitId":"printinghelloworld"},"content":"2.[D][✘] CS2103 Lab (by: Sep 30 2020)"},{"lineNumber":130,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":131,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":132,"author":{"gitId":"printinghelloworld"},"content":"#### 6. **`done`**: Marks a task as done."},{"lineNumber":133,"author":{"gitId":"printinghelloworld"},"content":"- This command marks your task as done"},{"lineNumber":134,"author":{"gitId":"printinghelloworld"},"content":"- This is indicated by the change from [✘] to [✓]"},{"lineNumber":135,"author":{"gitId":"printinghelloworld"},"content":"- Index of the task can be seen using the `list` command"},{"lineNumber":136,"author":{"gitId":"printinghelloworld"},"content":"- Index **must** be provided"},{"lineNumber":137,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":138,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":139,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":140,"author":{"gitId":"printinghelloworld"},"content":"`done \u003cindex\u003e`"},{"lineNumber":141,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":142,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":143,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":144,"author":{"gitId":"printinghelloworld"},"content":"`done 1`"},{"lineNumber":145,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":146,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":147,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":148,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":149,"author":{"gitId":"printinghelloworld"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":150,"author":{"gitId":"printinghelloworld"},"content":"[T][✓] CS2103T assignment"},{"lineNumber":151,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":152,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":153,"author":{"gitId":"printinghelloworld"},"content":"#### 7. **`delete`**: Deletes a task from your list."},{"lineNumber":154,"author":{"gitId":"printinghelloworld"},"content":"- This command deletes task from your list"},{"lineNumber":155,"author":{"gitId":"printinghelloworld"},"content":"- You can also delete multiple tasks from your list "},{"lineNumber":156,"author":{"gitId":"printinghelloworld"},"content":"- Index / Indexes **must** be provided"},{"lineNumber":157,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":158,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":159,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":160,"author":{"gitId":"printinghelloworld"},"content":"`delete \u003cindex\u003e` or `delete \u003cindex, ... ,index\u003e`"},{"lineNumber":161,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":162,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":163,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":164,"author":{"gitId":"printinghelloworld"},"content":"Case 1: `delete 1`"},{"lineNumber":165,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":166,"author":{"gitId":"printinghelloworld"},"content":"Case 2: `delete 2,3`"},{"lineNumber":167,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":168,"author":{"gitId":"printinghelloworld"},"content":"Expected outcome:"},{"lineNumber":169,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":170,"author":{"gitId":"printinghelloworld"},"content":"Case 1: "},{"lineNumber":171,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":172,"author":{"gitId":"printinghelloworld"},"content":"Alright! I\u0027ve removed this task:"},{"lineNumber":173,"author":{"gitId":"printinghelloworld"},"content":"[T][✓] CS2103T assignment"},{"lineNumber":174,"author":{"gitId":"printinghelloworld"},"content":"Now you have 2 tasks in the list."},{"lineNumber":175,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":176,"author":{"gitId":"printinghelloworld"},"content":"Case 2:"},{"lineNumber":177,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":178,"author":{"gitId":"printinghelloworld"},"content":"Alright! I\u0027ve removed the following tasks:"},{"lineNumber":179,"author":{"gitId":"printinghelloworld"},"content":"1.[E][✘] Brian\u0027s birthday (by: May 4 2020)"},{"lineNumber":180,"author":{"gitId":"printinghelloworld"},"content":"2.[D][✘] CS2103 Lab (by: Sep 30 2020)"},{"lineNumber":181,"author":{"gitId":"printinghelloworld"},"content":"Now you have 0 tasks in the list."},{"lineNumber":182,"author":{"gitId":"printinghelloworld"},"content":"```"},{"lineNumber":183,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":184,"author":{"gitId":"printinghelloworld"},"content":"#### 8. **`bye`**: Terminates the Application."},{"lineNumber":185,"author":{"gitId":"printinghelloworld"},"content":"- This command terminates Duke application."},{"lineNumber":186,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":187,"author":{"gitId":"printinghelloworld"},"content":"Format:"},{"lineNumber":188,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":189,"author":{"gitId":"printinghelloworld"},"content":"`bye`"},{"lineNumber":190,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":191,"author":{"gitId":"printinghelloworld"},"content":"Example of usage: "},{"lineNumber":192,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":193,"author":{"gitId":"printinghelloworld"},"content":"`bye`"}],"authorContributionMap":{"-":12,"printinghelloworld":181}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":":init"},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":":end"},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"printinghelloworld"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"printinghelloworld"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"printinghelloworld"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":100,"author":{"gitId":"printinghelloworld"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"printinghelloworld"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":103,"author":{"gitId":"printinghelloworld"},"content":":omega"}],"authorContributionMap":{"printinghelloworld":103}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"import duke.Command;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"import duke.DukeException;"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":" * Duke is a application that helps you keep track of your ToDos, Deadlines and Events all in one list."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    private TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"     * Initialises taskList and storage of Duke"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    public Duke() {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        String filePath \u003d \"./data\";"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        String fileName \u003d \"data.txt\";"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"        this.storage \u003d new Storage(filePath + \"/\" + fileName);"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"            File dir \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"            File file \u003d new File(filePath, fileName);"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"            if (dir.exists() \u0026\u0026 file.exists()) {"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"                this.taskList \u003d new TaskList(storage.load());"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"            } else if (dir.exists()) {"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"                createFile();"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"                createDirectory(dir);"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"                createFile();"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"            Ui.printException(e);"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"            System.exit(1);"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    private void createDirectory(File dir) {"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        dir.mkdir();"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    private void createFile() throws DukeException {"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"            storage.createFile();"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"        } catch (IOException e) {"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Error Creating File\");"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"     * Complements the implementation of JavaFX."},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"     * @param input User input."},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"     * @return A string."},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"    String getResponse(String input) {"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"        Command command;"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"            if (Parser.isBye(input)) {"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"                this.storage.save(this.taskList);"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"                System.exit(0);"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d Parser.parseInput(input, taskList);"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"            return command.execute();"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"            return Ui.printException(e);"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"        new Duke();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"printinghelloworld":74}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import javafx.stage.Stage;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"    private Button sendButton;"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        duke \u003d d;"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        greetUser();"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"    private void greetUser() {"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"        String greetings \u003d \"Hi there! I\u0027m Duke, your personal assistant.\\nHow may I help you?\";"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetings, dukeImage));"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":56}},{"path":"src/main/java/duke/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":" * AddCommand is used when the user intends to add a task to the TaskList."},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"public class AddCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    public AddCommand(int commandType, TaskList taskList, String userInput) {"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"        super(commandType, taskList, userInput);"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"     * Adds a specific task to the TaskList based on user input."},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of the specific task added."},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If this method is called on an invalid AddCommand."},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"        String[] parsedInput \u003d userInput.split(Parser.SPACE, 2);"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        Task newTask;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        if (getCommandType() \u003d\u003d Command.CREATE_TODO) {"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"            newTask \u003d createToDo(parsedInput);"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        } else if (getCommandType() \u003d\u003d Command.CREATE_DEADLINE) {"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"            newTask \u003d createDeadline(parsedInput);"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"        } else if (getCommandType() \u003d\u003d Command.CREATE_EVENT) {"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"            newTask \u003d createEvent(parsedInput);"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Invalid Add Command!\");"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        return addTaskAndPrint(newTask);"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"     * Adds the given task to TaskList and prints the Description of that task."},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"     * @param newTask The task to be added to taskList."},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of the task."},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    private String addTaskAndPrint(Task newTask) {"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        taskList.add(newTask);"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        String userMessage \u003d Ui.informNewTask(newTask) + Ui.informNumberOfTasksRemaining(taskList);"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        return userMessage;"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"     * Creates a ToDo task."},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"     * @param parsedInput Input of the user parsed into tokens."},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"     * @return New ToDo task."},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If format of user input is incorrect."},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    private Task createToDo(String[] parsedInput) throws DukeException {"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"        if (isValidFormat(parsedInput, Command.CREATE_TODO)) {"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"            String taskDescription \u003d parsedInput[1].trim();"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"            return new ToDo(taskDescription);"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Invalid Todo Format!\");"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"     * Creates a Deadline task."},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"     * @param parsedInput Input of the user parsed into tokens."},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"     * @return New Deadline task."},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If format of user input is incorrect."},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"    private Task createDeadline(String[] parsedInput) throws DukeException {"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"        if (isValidFormat(parsedInput, Command.CREATE_DEADLINE)) {"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"            String description \u003d parsedInput[1];"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"            String[] detailsAndDate \u003d description.split(\"/by\");"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"            String details \u003d detailsAndDate[0].trim();"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"            String date \u003d detailsAndDate[1].trim();"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"            LocalDate formattedDate \u003d LocalDate.parse(date, TimedTask.DATE_FORMATTER);"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"            return new Deadline(details, formattedDate);"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Invalid Deadline Format! Please include Deadline details and \""},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"                    + \"Date should be in D/M/YYYY\");"},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"     * Creates an Event task."},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"     * @param parsedInput Input of the user parsed into tokens."},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":"     * @return New Event task."},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If format of the user input is incorrect"},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":"    private Task createEvent(String[] parsedInput) throws DukeException {"},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":"        if (isValidFormat(parsedInput, Command.CREATE_EVENT)) {"},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":"            String description \u003d parsedInput[1];"},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"            String[] detailsAndDate \u003d description.split(\"/at\");"},{"lineNumber":96,"author":{"gitId":"printinghelloworld"},"content":"            String details \u003d detailsAndDate[0].trim();"},{"lineNumber":97,"author":{"gitId":"printinghelloworld"},"content":"            String date \u003d detailsAndDate[1].trim();"},{"lineNumber":98,"author":{"gitId":"printinghelloworld"},"content":"            LocalDate formattedDate \u003d LocalDate.parse(date, TimedTask.DATE_FORMATTER);"},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":"            return new Event(details, formattedDate);"},{"lineNumber":100,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Invalid Event Format! Please include Event details and \""},{"lineNumber":102,"author":{"gitId":"printinghelloworld"},"content":"                    + \"Date should be in D/M/YYYY\");"},{"lineNumber":103,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":106,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if user input is in a valid format supported by Duke."},{"lineNumber":108,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"printinghelloworld"},"content":"     * @param parsedInput User input parsed into tokens."},{"lineNumber":110,"author":{"gitId":"printinghelloworld"},"content":"     * @param commandType Specific type of the Add Command."},{"lineNumber":111,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if user input is in a valid format."},{"lineNumber":112,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidFormat(String[] parsedInput, int commandType) {"},{"lineNumber":114,"author":{"gitId":"printinghelloworld"},"content":"        boolean missingDescription \u003d parsedInput.length \u003c 2;"},{"lineNumber":115,"author":{"gitId":"printinghelloworld"},"content":"        if (missingDescription) {"},{"lineNumber":116,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":117,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":119,"author":{"gitId":"printinghelloworld"},"content":"        String description \u003d parsedInput[1];"},{"lineNumber":120,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":121,"author":{"gitId":"printinghelloworld"},"content":"        if (description.isBlank()) {"},{"lineNumber":122,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":123,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":125,"author":{"gitId":"printinghelloworld"},"content":"        if (commandType \u003d\u003d Command.CREATE_TODO) {"},{"lineNumber":126,"author":{"gitId":"printinghelloworld"},"content":"            return parsedInput.length \u003d\u003d 2 \u0026\u0026 description !\u003d Parser.EMPTY_STRING;"},{"lineNumber":127,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":128,"author":{"gitId":"printinghelloworld"},"content":"            String[] detailsAndDate;"},{"lineNumber":129,"author":{"gitId":"printinghelloworld"},"content":"            if (commandType \u003d\u003d Command.CREATE_DEADLINE) {"},{"lineNumber":130,"author":{"gitId":"printinghelloworld"},"content":"                detailsAndDate \u003d description.split(\"/by\");"},{"lineNumber":131,"author":{"gitId":"printinghelloworld"},"content":"            } else if (commandType \u003d\u003d Command.CREATE_EVENT) {"},{"lineNumber":132,"author":{"gitId":"printinghelloworld"},"content":"                detailsAndDate \u003d description.split(\"/at\");"},{"lineNumber":133,"author":{"gitId":"printinghelloworld"},"content":"            } else {"},{"lineNumber":134,"author":{"gitId":"printinghelloworld"},"content":"                return false;"},{"lineNumber":135,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":137,"author":{"gitId":"printinghelloworld"},"content":"            if (detailsAndDate.length \u003c 2) {"},{"lineNumber":138,"author":{"gitId":"printinghelloworld"},"content":"                return false;"},{"lineNumber":139,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":141,"author":{"gitId":"printinghelloworld"},"content":"            String details \u003d detailsAndDate[0].trim();"},{"lineNumber":142,"author":{"gitId":"printinghelloworld"},"content":"            String date \u003d detailsAndDate[1].trim();"},{"lineNumber":143,"author":{"gitId":"printinghelloworld"},"content":"            return detailsAndDate.length \u003d\u003d 2 \u0026\u0026 isValidTimeFormat(date) \u0026\u0026 !details.isBlank();"},{"lineNumber":144,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":147,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the date given in user input is of valid format supported by Duke."},{"lineNumber":149,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"printinghelloworld"},"content":"     * @param date Date given in user input for Task."},{"lineNumber":151,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if the date is in the correct D/M/YYYY format."},{"lineNumber":152,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidTimeFormat(String date) {"},{"lineNumber":154,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":155,"author":{"gitId":"printinghelloworld"},"content":"            LocalDate.parse(date, TimedTask.DATE_FORMATTER);"},{"lineNumber":156,"author":{"gitId":"printinghelloworld"},"content":"            return true;"},{"lineNumber":157,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":158,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":159,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":161}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * Command encapsulates what the user intends to do based on the user\u0027s input."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"     * Types of Commands supported by Duke."},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    public static final int LIST \u003d 1;"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public static final int DONE \u003d 2;"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    public static final int DELETE \u003d 3;"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    public static final int FIND \u003d 4;"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public static final int INVALID \u003d 99;"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    public static final int CREATE_TODO \u003d 11;"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    public static final int CREATE_DEADLINE \u003d 12;"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"    public static final int CREATE_EVENT \u003d 13;"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    private int commandType;"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"    protected Storage storage;"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    protected TaskList taskList;"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    protected String userInput;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    public Command(int commandType) {"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"    public Command(int commandType, Storage storage, TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"        this.storage \u003d storage;"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"    public Command(int commandType, TaskList taskList, String userInput) {"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    public Command(int commandType, TaskList taskList) {"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"     * Getter method for commandType."},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"     * @return Type of command in integer form."},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"    public int getCommandType() {"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        return this.commandType;"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"     * An abstract method implemented by the subclasses."},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"     * @return String describing the outcome after executing the specific command."},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If an error occurs during the execution of command."},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"    public abstract String execute() throws DukeException;"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":61}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":" * Deadline is a form of TimedTask and it contains a description, status and date (deadline)."},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"public class Deadline extends TimedTask {"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"        super(description, date);"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public Deadline(String description, boolean isDone, LocalDate date) {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        super(description, isDone, date);"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    public String toText() {"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        return super.toText(\"D\");"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        return super.toString(\"D\");"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":27}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    public DeleteCommand(TaskList taskList, String input) {"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"        super(Command.DELETE, taskList, input);"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * Deletes the task specified by user from the TaskList."},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of the task deleted."},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If there are missing information in the user input."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        String[] parsedInput \u003d userInput.split(Parser.SPACE);"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        if (isValidSingleArgumentFormat(parsedInput)) {"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"            return deleteTask(parsedInput[1]);"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"        } else if (isValidMultipleArgumentsFormat(parsedInput)) {"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"            return deleteMultipleTasks(parsedInput[1]);"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"You forgot to include the task index or your task index is out of range.\");"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"     * Deletes a task"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     * @param s Contains the index of the task to be deleted in String."},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of the task deleted."},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"    private String deleteTask(String s) {"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        int taskIndex \u003d Integer.parseInt(s) - 1;"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        return deleteTaskFromTaskList(taskIndex);"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"    private String deleteTaskFromTaskList(int taskIndex) {"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        Task selectedTask \u003d taskList.get(taskIndex);"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"        taskList.remove(taskIndex);"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        String userMessage \u003d Ui.informTaskDeleted(selectedTask) + Ui.informNumberOfTasksRemaining(taskList);"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"        return userMessage;"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"     * Deletes more than one tasks."},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskIndexArguments Contains the indexes of the tasks to be deleted in String."},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of the tasks deleted."},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"    private String deleteMultipleTasks(String taskIndexArguments) {"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"        String[] taskIndexes \u003d taskIndexArguments.split(Parser.COMMA);"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        Task[] tasksToDelete \u003d new Task[taskIndexes.length];"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        return deleteTasksFromTaskList(taskIndexes, tasksToDelete);"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    private String deleteTasksFromTaskList(String[] taskIndexes, Task[] tasksToDelete) {"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c taskIndexes.length; i++) {"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"            int taskIndex \u003d Integer.parseInt(taskIndexes[i]) - 1;"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"            Task selectedTask \u003d taskList.get(taskIndex);"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"            tasksToDelete[i] \u003d selectedTask;"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c tasksToDelete.length; i++) {"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"            taskList.remove(tasksToDelete[i]);"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"        String userMessage \u003d Ui.informTasksDeleted(tasksToDelete) + Ui.informNumberOfTasksRemaining(taskList);"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"        return userMessage;"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the user input is in a valid format supported by Duke when the user is deleting one task."},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"     * @param inputArr Refers to the parsed user input."},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if the user input is in a valid format."},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidSingleArgumentFormat(String[] inputArr) {"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"            int taskIndex \u003d Integer.parseInt(inputArr[1]);"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"            if (taskIndex \u003e taskList.size()) {"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"                return false;"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"            return inputArr.length \u003d\u003d 2;"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the user input is in a valid format supported by Duke when the user is deleting more than one task."},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":"     * @param inputArr Refers to the parsed user input."},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if the user input is in a valid format."},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidMultipleArgumentsFormat(String[] inputArr) {"},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":"        String deleteArgument \u003d inputArr[1];"},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":"        String[] deleteTaskIndexes \u003d deleteArgument.split(Parser.COMMA);"},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"        if (deleteTaskIndexes.length \u003d\u003d 0) {"},{"lineNumber":96,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":"            boolean indexesWithinRange \u003d true;"},{"lineNumber":100,"author":{"gitId":"printinghelloworld"},"content":"            for (int i \u003d 0; i \u003c deleteTaskIndexes.length; i++) {"},{"lineNumber":101,"author":{"gitId":"printinghelloworld"},"content":"                int taskIndex \u003d Integer.parseInt(deleteTaskIndexes[i].trim());"},{"lineNumber":102,"author":{"gitId":"printinghelloworld"},"content":"                if (taskIndex \u003e taskList.size()) {"},{"lineNumber":103,"author":{"gitId":"printinghelloworld"},"content":"                    indexesWithinRange \u003d false;"},{"lineNumber":104,"author":{"gitId":"printinghelloworld"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"printinghelloworld"},"content":"            return indexesWithinRange;"},{"lineNumber":107,"author":{"gitId":"printinghelloworld"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":108,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":109,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":111}},{"path":"src/main/java/duke/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class DoneCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    public DoneCommand(TaskList taskList, String input) {"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"        super(Command.DONE, taskList, input);"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * Marks the task specified by user as done."},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     * @return Message informing user that the task is marked as done."},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If user did not provide index of the task to be marked as done."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"            String[] parsedInput \u003d userInput.split(Parser.SPACE);"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"            if (isValidFormat(parsedInput)) {"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"                int taskIndex \u003d Integer.parseInt(parsedInput[1]) - 1;"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"                return markTaskAsDone(taskIndex);"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"            } else {"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"                throw new DukeException(\"You forgot to include the task index..\");"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"            throw e;"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"    private String markTaskAsDone(int taskIndex) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"            Task selectedTask \u003d taskList.get(taskIndex);"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"            selectedTask.markAsDone();"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"            String userMessage \u003d Ui.informTaskDone(selectedTask);"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"            return userMessage;"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Please enter a valid index!\");"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the user input is in a valid format supported by Duke."},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"     * @param inputArr The array containing parsed user input."},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if the user input is in a valid format."},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidFormat(String[] inputArr) {"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"            int checkIfArgumentIsInteger \u003d Integer.parseInt(inputArr[1]);"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"            return inputArr.length \u003d\u003d 2;"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":54}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * DukeException is a form of Exception used by Duke methods when a problem arises."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    public DukeException(String s) {"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"        super(s);"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":" * Event is a form of TimedTask and it contains a description, status and date."},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"public class Event extends TimedTask {"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    public Event(String description, LocalDate date) {"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"        super(description, date);"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public Event(String description, LocalDate date, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        super(description, isDone, date);"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    public String toText() {"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        return super.toText(\"E\");"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        return super.toString(\"E\");"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":27}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class FindCommand extends PrintTaskCommand {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    public FindCommand(TaskList tasklist, String input) {"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"        super(Command.FIND, tasklist, input);"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * Returns all the matching tasks"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     * @return String containing the description of all matching tasks."},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If no keyword was provided by user."},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        if (isValidFormat(userInput)) {"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"            TaskList newTaskList \u003d createListOfTasksContainingKeyword();"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"            if (newTaskList.size() \u003d\u003d 0) {"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"                return Ui.informNoTaskFound();"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"            return outputTasksInTaskList(newTaskList, true);"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"What are you trying to find??\");"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the user input is in a valid format supported by Duke."},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     * @param input Input of the User."},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if user input is in valid format."},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"    private boolean isValidFormat(String input) {"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        String[] parsedInput \u003d input.split(Parser.SPACE);"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        return parsedInput.length \u003d\u003d 2;"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     * Creates a new TaskList with only tasks that contains the keyword."},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"     * @return New TaskList."},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    private TaskList createListOfTasksContainingKeyword() {"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        String[] parsedInput \u003d userInput.split(Parser.SPACE);"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        String keyword \u003d parsedInput[1].toLowerCase();"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        TaskList listOfTasksContainingKeyword \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"            Task tempTask \u003d taskList.get(i);"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"            String taskDescription \u003d tempTask.getDescription().toLowerCase();"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"            if (taskDescription.contains(keyword)) {"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"                listOfTasksContainingKeyword.add(tempTask);"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"        return listOfTasksContainingKeyword;"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":55}},{"path":"src/main/java/duke/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    public InvalidCommand() {"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"        super(Command.INVALID);"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * Informs the User that the Command is invalid."},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     * @return String message informing the user."},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() {"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"        return Ui.informInvalidCommand();"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":16}},{"path":"src/main/java/duke/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class ListCommand extends PrintTaskCommand {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    public ListCommand(TaskList tasklist) {"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"        super(Command.LIST, tasklist);"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * Prints all the tasks in the TaskList."},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of all the Tasks in TaskList."},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    public String execute() {"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"        return outputTasksInTaskList(this.taskList, false);"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":16}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * Parser helps to handle the user input and classify them into a specific Command."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"    public static final String SPACE \u003d \" \";"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    public static final String COMMA \u003d \",\";"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"     * Checks if the Input is a termination command."},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"     * @param input Input of the user."},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"     * @return True if input is a termination command."},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    public static boolean isBye(String input) {"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"        String firstWord \u003d input.split(SPACE, 2)[0];"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        return firstWord.equals(\"bye\");"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"     * Parses the userInput and returns a specific command based on the input."},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"     * @param input    Input of the user."},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskList TaskList of the program."},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     * @return Specific Command related to the user input."},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"    public static Command parseInput(String input, TaskList taskList) {"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        Command command;"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        String firstWord \u003d input.split(SPACE, 2)[0];"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        if (firstWord.equals(\"list\")) {"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new ListCommand(taskList);"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"find\")) {"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new FindCommand(taskList, input);"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"done\")) {"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new DoneCommand(taskList, input);"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"delete\")) {"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new DeleteCommand(taskList, input);"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"todo\")) {"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new AddCommand(Command.CREATE_TODO, taskList, input);"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"deadline\")) {"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new AddCommand(Command.CREATE_DEADLINE, taskList, input);"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        } else if (firstWord.equals(\"event\")) {"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new AddCommand(Command.CREATE_EVENT, taskList, input);"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"            command \u003d new InvalidCommand();"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        return command;"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":54}},{"path":"src/main/java/duke/PrintTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * PrintTaskCommand is a abstract class containing a common method used by Commands that print tasks."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public abstract class PrintTaskCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    public PrintTaskCommand(int commandType, TaskList tasklist) {"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"        super(commandType, tasklist);"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public PrintTaskCommand(int commandType, TaskList taskList, String userInput) {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        super(commandType, taskList, userInput);"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"     * Prints all the tasks in the TaskList provided."},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskList TaskList containing task to print."},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"     * @param isFind   True if this method is printing tasks related to a keyword and false otherwise."},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"     * @return All the tasks in TaskList in String."},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    public String outputTasksInTaskList(TaskList taskList, boolean isFind) {"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"            return Ui.informNoTaskInList();"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"        String output \u003d String.format(\"Here are the %stasks in your list:\", isFind ? \"matching \" : \"\");"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"            Task currentTask \u003d taskList.get(i);"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"            String num \u003d Integer.toString(i + 1);"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"            output +\u003d \"\\n\" + num + \".\" + currentTask;"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        return output;"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":34}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    private String filePath;"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    public Storage(String filePath) {"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"     * Reads all the content in the specified File."},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"     * @param filePath File Path of the specified File that we are reading from."},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"     * @return All the file contents in String."},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"     * @throws FileNotFoundException If no file is found using the filePath given."},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"    private static String readFileContents(String filePath) throws FileNotFoundException {"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"        String fileContentsInString \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"        Scanner scanner \u003d new Scanner(f);"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"            fileContentsInString +\u003d scanner.nextLine() + System.lineSeparator();"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        scanner.close();"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        return fileContentsInString;"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"    private static ArrayList\u003cTask\u003e createTaskList(String content) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"        Scanner scanner \u003d new Scanner(content);"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"            String lineOfText \u003d scanner.nextLine();"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"            String[] splitText \u003d lineOfText.split(\"\\\\|\");"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"            String typeOfTask \u003d splitText[0].trim();"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"            int statusOfTask \u003d Integer.parseInt(splitText[1].trim());"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"            String taskDescription \u003d splitText[2].trim();"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"            if (typeOfTask.equals(\"T\")) {"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"                createTodoTask(newTaskList, statusOfTask, taskDescription);"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"                String date \u003d splitText[3].trim();"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"                if (typeOfTask.equals(\"D\")) {"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"                    createTimedTask(newTaskList, statusOfTask, taskDescription, date, Task.Type.DEADLINE);"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"                } else if (typeOfTask.equals(\"E\")) {"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"                    createTimedTask(newTaskList, statusOfTask, taskDescription, date, Task.Type.EVENT);"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"                } else {"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"                    throw new DukeException(\"Cannot create invalid type of task!\");"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"        scanner.close();"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"        return newTaskList;"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"    private static void createTimedTask(ArrayList\u003cTask\u003e newTaskList, int statusOfTask, String taskDescription,"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"                                        String date, Task.Type type) {"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(date, TimedTask.DATE_FORMATTER);"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"        if (type \u003d\u003d Task.Type.EVENT) {"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"            newTaskList.add(new Event(taskDescription, formattedDate, statusOfTask \u003d\u003d Task.DONE));"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"            newTaskList.add(new Deadline(taskDescription, statusOfTask \u003d\u003d Task.DONE, formattedDate));"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"    private static void createTodoTask(ArrayList\u003cTask\u003e list, int statusOfTask, String taskDescription) {"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"        list.add(new ToDo(taskDescription, statusOfTask \u003d\u003d Task.DONE));"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"     * Creates an ArrayList of Tasks using the contents of the file."},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"     * @return An ArrayList of Tasks."},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"     * @throws FileNotFoundException If the file does not exist in the FilePath."},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"            String fileContents \u003d Storage.readFileContents(this.filePath);"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"            return createTaskList(fileContents);"},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"File not found!\");"},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":"            throw e;"},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"printinghelloworld"},"content":"     * Creates a file to save all the tasks in the TaskList before terminating the program."},{"lineNumber":97,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"printinghelloworld"},"content":"     * @throws IOException If the directory of the file being created doesn\u0027t exist."},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"printinghelloworld"},"content":"    public void createFile() throws IOException {"},{"lineNumber":101,"author":{"gitId":"printinghelloworld"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":102,"author":{"gitId":"printinghelloworld"},"content":"        file.createNewFile();"},{"lineNumber":103,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":105,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"printinghelloworld"},"content":"     * Writes data to a File."},{"lineNumber":107,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"printinghelloworld"},"content":"     * @param filePath  Path of the file that we are writing in."},{"lineNumber":109,"author":{"gitId":"printinghelloworld"},"content":"     * @param textToAdd Content to write into the file."},{"lineNumber":110,"author":{"gitId":"printinghelloworld"},"content":"     * @throws DukeException If an error occurs during file writing."},{"lineNumber":111,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"printinghelloworld"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws DukeException {"},{"lineNumber":113,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"printinghelloworld"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":115,"author":{"gitId":"printinghelloworld"},"content":"            fw.write(textToAdd);"},{"lineNumber":116,"author":{"gitId":"printinghelloworld"},"content":"            fw.close();"},{"lineNumber":117,"author":{"gitId":"printinghelloworld"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"printinghelloworld"},"content":"            throw new DukeException(\"Error writing to file during Save\");"},{"lineNumber":119,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":122,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"printinghelloworld"},"content":"     * Saves all the tasks in TaskList to a text file."},{"lineNumber":124,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskList TaskList containing all the existing tasks entered by user."},{"lineNumber":126,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"printinghelloworld"},"content":"    public void save(TaskList taskList) throws DukeException {"},{"lineNumber":128,"author":{"gitId":"printinghelloworld"},"content":"        String dataToSave \u003d readDataFromTaskList(taskList);"},{"lineNumber":129,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"printinghelloworld"},"content":"            writeToFile(this.filePath, dataToSave);"},{"lineNumber":131,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":132,"author":{"gitId":"printinghelloworld"},"content":"            throw e;"},{"lineNumber":133,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":136,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"printinghelloworld"},"content":"     * Reads the tasks in TaskList and converts all the Task description into a String."},{"lineNumber":138,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskList TaskList containing tasks to read."},{"lineNumber":140,"author":{"gitId":"printinghelloworld"},"content":"     * @return All the description of the tasks in TaskList in standard form."},{"lineNumber":141,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"printinghelloworld"},"content":"    private String readDataFromTaskList(TaskList taskList) {"},{"lineNumber":143,"author":{"gitId":"printinghelloworld"},"content":"        String dataToSave \u003d \"\";"},{"lineNumber":144,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":145,"author":{"gitId":"printinghelloworld"},"content":"            Task currentTask \u003d taskList.get(i);"},{"lineNumber":146,"author":{"gitId":"printinghelloworld"},"content":"            if (i \u003d\u003d taskList.size() - 1) {"},{"lineNumber":147,"author":{"gitId":"printinghelloworld"},"content":"                dataToSave +\u003d currentTask.toText();"},{"lineNumber":148,"author":{"gitId":"printinghelloworld"},"content":"            } else {"},{"lineNumber":149,"author":{"gitId":"printinghelloworld"},"content":"                dataToSave +\u003d currentTask.toText() + System.lineSeparator();"},{"lineNumber":150,"author":{"gitId":"printinghelloworld"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"printinghelloworld"},"content":"        return dataToSave;"},{"lineNumber":153,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":154}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"    public static final int DONE \u003d 1;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    public static final int NOT_DONE \u003d 0;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     * Different types of Task."},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    public enum Type {"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"        TODO, DEADLINE, EVENT"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    public Task(String description, boolean status) {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        this.isDone \u003d status;"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     * Returns a symbol depending on status of task."},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     * @return Tick or cross symbol."},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        return (isDone ? \"\\u2714\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"     * Getter method for description."},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of task."},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    public String getDescription() {"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        return this.description;"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"    public void markAsDone() {"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        this.isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    public String toText() {"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"        return toText(\"T\");"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"     * Converts the Task into standard form for ease of saving to data file."},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"     * @param type Indicates the type of task."},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of Task in standard form."},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"    public String toText(String type) {"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"        int doneInt \u003d this.isDone ? DONE : NOT_DONE;"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"        return String.format(\"%s | %d | %s\", type, doneInt, this.description);"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":67}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":" * TaskList stores all the tasks entered by the user."},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    private ArrayList\u003cTask\u003e mainList;"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public TaskList(ArrayList\u003cTask\u003e mainList) {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        this.mainList \u003d mainList;"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        this.mainList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"     * Adds task to TaskList."},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"     * @param task Task to add."},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    public void add(Task task) {"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"        this.mainList.add(task);"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     * Removes task from TaskList."},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"     * @param index Index of task in TaskList to remove."},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"    public void remove(int index) {"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        this.mainList.remove(index);"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     * Removes task from TaskList"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"     * @param task The specific task in TaskList to remove."},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"    public void remove(Task task) {"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        this.mainList.remove(task);"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"     * Gets the task in the TaskList."},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"     * @param index Index of task in TaskList to get."},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"     * @return Task."},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"    public Task get(int index) {"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"        return this.mainList.get(index);"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"     * Gets the size of TaskList."},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"     * @return Size of TaskList."},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"    public int size() {"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"        return this.mainList.size();"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":64}},{"path":"src/main/java/duke/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":" * TimedTask is a form of Task that contains an additional date parameter"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"public class TimedTask extends Task {"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    protected LocalDate date;"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    TimedTask(String description, LocalDate date) {"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"        this.date \u003d date;"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    TimedTask(String description, boolean isDone, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        super(description, isDone);"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     * Converts the TimedTask into standard form for ease of saving to data file."},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskLetter taskLetter indicates the type of task."},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of TimedTask in standard form."},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"    public String toText(String taskLetter) {"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        String str \u003d super.toText(taskLetter);"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        str +\u003d \"| \" + this.date.format(DATE_FORMATTER);"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        return str;"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"     * Prints the TimedTask"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskLetter taskLetter indicates the type of task."},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"     * @return Description of TimedTask."},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"    public String toString(String taskLetter) {"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"        String dateFormatted \u003d date.format(OUTPUT_DATE_FORMATTER);"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        return String.format(\"[%s]%s (by: %s)\", taskLetter, super.toString(), dateFormatted);"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":50}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":" * ToDo is a form of task and it contains description and status."},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":" */"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"    public ToDo(String description) {"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public ToDo(String description, boolean status) {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        super(description, status);"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":19}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"     * Returns message of Duke Exception."},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"     * @param e DukeException"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"     * @return Message of exception in String"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public static String printException(DukeException e) {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        String errorMessage \u003d \"Whoops! Something went wrong...\\n\" + e.getMessage();"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"        return errorMessage;"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user that the task is marked as done."},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"     * @param task Task that is marked as done."},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    public static String informTaskDone(Task task) {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task;"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user that the task is deleted."},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"     * @param task Task that was deleted."},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"    public static String informTaskDeleted(Task task) {"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        return \"Alright! I\u0027ve removed this task:\\n\" + task;"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user that the tasks are deleted."},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"     * @param tasks Tasks that were deleted."},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"    public static String informTasksDeleted(Task[] tasks) {"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"        String userMessage \u003d \"Alright! I\u0027ve removed the following tasks:\\n\";"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"            int taskNumber \u003d i + 1;"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"            userMessage +\u003d String.format(\"%d. %s\\n\", taskNumber, tasks[i]);"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        return userMessage;"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user the number of tasks left in TaskList."},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"     * @param taskList TaskList containing tasks."},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"    public static String informNumberOfTasksRemaining(TaskList taskList) {"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"        return \"\\nNow you have \" + taskList.size() + \" tasks in the list.\";"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user the new task was added."},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"     * @param task New task added."},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"    public static String informNewTask(Task task) {"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"        return \"Roger. I\u0027ve added this task:\\n\" + task;"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user of the invalid user input."},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"    public static String informInvalidCommand() {"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"        return \"I\u0027m sorry, but I don\u0027t know what that means :(\";"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user no matching tasks was found."},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"    public static String informNoTaskFound() {"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"        return \"Sorry, no matching task was found!\";"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"     * Informs user no task in TaskList."},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"    public static String informNoTaskInList() {"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":"        return \"Your list is empty at the moment!\";"},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":86}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"350.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"        \u003c/Label\u003e"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        \u003cLabel fx:id\u003d\"padding\"\u003e"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"         \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"         \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"printinghelloworld":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"            fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"                    vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"printinghelloworld":23}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingDeadline() {"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"deadline homework /by 31/12/2020\";"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_DEADLINE;"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"            // executed successfully"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"            fail(\"Parsing has failed\");"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingWrongDeadline() {"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"deadline homework /by 31-12-2020\";"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_DEADLINE;"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingEvent() {"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"event Jean\u0027s Birthday /at 2/3/2020\";"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_EVENT;"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"            // executed successfully"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"            fail(\"Parsing has failed\");"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingEventWrongDate() {"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"event Jean\u0027s birthday /at 30-12-2020\";"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_EVENT;"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"            // supposed to throw exception"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingTodo() {"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"todo homework\";"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_TODO;"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":"            // executed successfully"},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"            fail(\"Parsing has failed\");"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"printinghelloworld"},"content":"    public void testParsingTodoFail() {"},{"lineNumber":88,"author":{"gitId":"printinghelloworld"},"content":"        String input \u003d \"todo\";"},{"lineNumber":89,"author":{"gitId":"printinghelloworld"},"content":"        int expectedCommandType \u003d Command.CREATE_TODO;"},{"lineNumber":90,"author":{"gitId":"printinghelloworld"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":91,"author":{"gitId":"printinghelloworld"},"content":"        Command testCommand \u003d Parser.parseInput(input, taskList);"},{"lineNumber":92,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(expectedCommandType,testCommand.getCommandType());"},{"lineNumber":93,"author":{"gitId":"printinghelloworld"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"printinghelloworld"},"content":"            String output \u003d testCommand.execute();"},{"lineNumber":95,"author":{"gitId":"printinghelloworld"},"content":"        } catch (DukeException e) {"},{"lineNumber":96,"author":{"gitId":"printinghelloworld"},"content":"            // supposed to throw exception"},{"lineNumber":97,"author":{"gitId":"printinghelloworld"},"content":"            assertEquals(1,1);"},{"lineNumber":98,"author":{"gitId":"printinghelloworld"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":100}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":9,"author":{"gitId":"printinghelloworld"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":11,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"printinghelloworld"},"content":"    public void successAddToList() {"},{"lineNumber":13,"author":{"gitId":"printinghelloworld"},"content":"        LocalDate testDate \u003d LocalDate.now();"},{"lineNumber":14,"author":{"gitId":"printinghelloworld"},"content":"        Task task1 \u003d new Task(\"Task1\");"},{"lineNumber":15,"author":{"gitId":"printinghelloworld"},"content":"        Task task2 \u003d new Event(\"Birthday\", testDate);"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"        Task task3 \u003d new Deadline(\"Assignment\", testDate);"},{"lineNumber":17,"author":{"gitId":"printinghelloworld"},"content":"        Task task4 \u003d new ToDo(\"Study for Midterms\");"},{"lineNumber":18,"author":{"gitId":"printinghelloworld"},"content":"        TaskList testList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task1);"},{"lineNumber":20,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task2);"},{"lineNumber":21,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task3);"},{"lineNumber":22,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task4);"},{"lineNumber":23,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 4);"},{"lineNumber":24,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":26,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"printinghelloworld"},"content":"    public void successDeleteFromListByTask() {"},{"lineNumber":28,"author":{"gitId":"printinghelloworld"},"content":"        LocalDate testDate \u003d LocalDate.now();"},{"lineNumber":29,"author":{"gitId":"printinghelloworld"},"content":"        Task task1 \u003d new Task(\"Task1\");"},{"lineNumber":30,"author":{"gitId":"printinghelloworld"},"content":"        Task task2 \u003d new Event(\"Birthday\", testDate);"},{"lineNumber":31,"author":{"gitId":"printinghelloworld"},"content":"        Task task3 \u003d new Deadline(\"Assignment\", testDate);"},{"lineNumber":32,"author":{"gitId":"printinghelloworld"},"content":"        Task task4 \u003d new ToDo(\"Study for Midterms\");"},{"lineNumber":33,"author":{"gitId":"printinghelloworld"},"content":"        TaskList testList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task1);"},{"lineNumber":35,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task2);"},{"lineNumber":36,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task3);"},{"lineNumber":37,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task4);"},{"lineNumber":38,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(task3);"},{"lineNumber":39,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(task1);"},{"lineNumber":40,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 2);"},{"lineNumber":41,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(task2);"},{"lineNumber":42,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 1);"},{"lineNumber":43,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(task4);"},{"lineNumber":44,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 0);"},{"lineNumber":45,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":47,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"printinghelloworld"},"content":"    public void successDeleteFromListByIndex() {"},{"lineNumber":49,"author":{"gitId":"printinghelloworld"},"content":"        LocalDate testDate \u003d LocalDate.now();"},{"lineNumber":50,"author":{"gitId":"printinghelloworld"},"content":"        Task task1 \u003d new Task(\"Task1\");"},{"lineNumber":51,"author":{"gitId":"printinghelloworld"},"content":"        Task task2 \u003d new Event(\"Birthday\", testDate);"},{"lineNumber":52,"author":{"gitId":"printinghelloworld"},"content":"        Task task3 \u003d new Deadline(\"Assignment\", testDate);"},{"lineNumber":53,"author":{"gitId":"printinghelloworld"},"content":"        Task task4 \u003d new ToDo(\"Study for Midterms\");"},{"lineNumber":54,"author":{"gitId":"printinghelloworld"},"content":"        TaskList testList \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task1);"},{"lineNumber":56,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task2);"},{"lineNumber":57,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task3);"},{"lineNumber":58,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task4);"},{"lineNumber":59,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(3);"},{"lineNumber":60,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(2);"},{"lineNumber":61,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 2);"},{"lineNumber":62,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(1);"},{"lineNumber":63,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 1);"},{"lineNumber":64,"author":{"gitId":"printinghelloworld"},"content":"        testList.remove(0);"},{"lineNumber":65,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.size(), 0);"},{"lineNumber":66,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":68,"author":{"gitId":"printinghelloworld"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"printinghelloworld"},"content":"    public void successRetrieveFromList() {"},{"lineNumber":70,"author":{"gitId":"printinghelloworld"},"content":"        LocalDate testDate \u003d LocalDate.now();"},{"lineNumber":71,"author":{"gitId":"printinghelloworld"},"content":"        Task task1 \u003d new Task(\"Task1\");"},{"lineNumber":72,"author":{"gitId":"printinghelloworld"},"content":"        Task task2 \u003d new Event(\"Birthday\", testDate);"},{"lineNumber":73,"author":{"gitId":"printinghelloworld"},"content":"        Task task3 \u003d new Deadline(\"Assignment\", testDate);"},{"lineNumber":74,"author":{"gitId":"printinghelloworld"},"content":"        Task task4 \u003d new ToDo(\"Study for Midterms\");"},{"lineNumber":75,"author":{"gitId":"printinghelloworld"},"content":"        TaskList testList \u003d new TaskList();"},{"lineNumber":76,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task1);"},{"lineNumber":77,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task2);"},{"lineNumber":78,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task3);"},{"lineNumber":79,"author":{"gitId":"printinghelloworld"},"content":"        testList.add(task4);"},{"lineNumber":80,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.get(0), task1);"},{"lineNumber":81,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.get(1), task2);"},{"lineNumber":82,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.get(2), task3);"},{"lineNumber":83,"author":{"gitId":"printinghelloworld"},"content":"        assertEquals(testList.get(3), task4);"},{"lineNumber":84,"author":{"gitId":"printinghelloworld"},"content":""},{"lineNumber":85,"author":{"gitId":"printinghelloworld"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"printinghelloworld"},"content":"}"}],"authorContributionMap":{"printinghelloworld":86}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"printinghelloworld"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"printinghelloworld"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"printinghelloworld"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"printinghelloworld"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"printinghelloworld"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"printinghelloworld"},"content":"list"},{"lineNumber":7,"author":{"gitId":"printinghelloworld"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"printinghelloworld"},"content":"list"}],"authorContributionMap":{"printinghelloworld":8}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"printinghelloworld"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"printinghelloworld":1}}]
