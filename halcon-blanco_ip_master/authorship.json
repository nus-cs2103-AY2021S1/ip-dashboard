[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 2,
      "-": 24
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "D | 0 | return book | null"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "T | 0 | chill"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "D | 1 | do absolutely nothing | 10pm Thursday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "E | 0 | book eating | 3pm Sunday"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * The main class for the Duke Chatbot which serves as the entry point for the whole program. The main business logic"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * is conducted by this class, which ties in functionality from all classes to run the whole programme."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Creates a Duke object that initialises the necessary variables for the execution of the Duke program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param filePath a relative file path giving the location to the data stored in the hard disk"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * The method responsible for the main logic of the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayGreeting();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                parser.parse(input).execute(tasks, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            storage.storeTaskList(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * The starting point for the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param args arguments to be passed to the main method. Any array can be used with no change in effect."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        new Duke(\"./data/tasks.txt\").run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 66,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class is responsible for making Exceptions made specifically for the purpose of the Duke Chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * These Exceptions are particularly targeted at improper input provided by the users and give a custom message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * based on what the error is."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String HORIZONTAL_RULE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_COMMAND_ERROR \u003d \"I have literally no idea what you\u0027re asking of me. \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_TODO_ERROR \u003d \"HELLO! Please fill up a description of todo. \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Can\u0027t be empty!!! \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_FIND_ERROR \u003d \"HELLO! How can I find something if you don\u0027t tell me what to find?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_DEADLINE_DATE_ERROR \u003d \"HELLO! Please fill up due date for the deadline. \" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Can\u0027t be empty!!! \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_DEADLINE_TASK_ERROR \u003d \"HELLO! Please fill up the task for the deadline. \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Can\u0027t be empty!!! \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_EVENT_DATE_ERROR \u003d \"HELLO! Please fill up the date for the event. \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Can\u0027t be empty!!! \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String BAD_EVENT_TASK_ERROR \u003d \"HELLO! Please fill up the event details. \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            \"Can\u0027t be empty!!! \\uD83D\\uDE20\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialises a DukeException object with the message that is passed in the argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param message Message that will be used to generate the DukeException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid input is provided by the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad command passed by the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_COMMAND_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid input is provided for the Todo command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad input is provided for the ToDo command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badToDo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_TODO_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid task input is provided for the Deadline command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad task input is provided for the Deadline command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badDeadlineTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_DEADLINE_TASK_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid deadline input is provided for the Deadline command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad deadline input is provided for the Deadline command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badDeadlineDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_DEADLINE_DATE_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid task input is provided for the Event command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad task input is provided for the Event command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badEventTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_EVENT_TASK_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Generates a DukeException when an invalid date input is provided for the Event command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return DukeException object signifying a bad date input is provided for the Event command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badEventDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_EVENT_DATE_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static DukeException badFind() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return new DukeException(HORIZONTAL_RULE + \"\\n\" + BAD_FIND_ERROR + \"\\n\" + HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 83
    }
  },
  {
    "path": "src/main/java/duke/InputType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This enum represents the different types of inputs that can be provided by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public enum InputType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    TERMINATION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    COMPLETE_TASK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    DELETE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gives an InputType corresponding to the input string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param s String which corresponds to a particular InputType"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return InputType representing the string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public static InputType getCommand(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        switch (s) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return TODO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return DEADLINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return EVENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"DEL\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return DELETE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"DONE\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return COMPLETE_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"LIST\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return LIST;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"BYE\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return TERMINATION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw new IllegalArgumentException(\"Bad argument for getCommand\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 40
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class is responsible for parsing the input provided by the user into the respective commands they represent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Produces a Command object corresponding to the input provided. Throws an exception if invalid input is provided."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param input raw string form of a command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return Command object representing the command in the input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws DukeException If the input is not a valid command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String[] splitInput \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String command \u003d splitInput[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String details \u003d splitInput.length \u003c 2 ? null : splitInput[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String[] parsedDetails;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new DoneCommand(Integer.parseInt(details) - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new ToDoCommand(details);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new FindCommand(details);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            parsedDetails \u003d details.split(\" /by \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (parsedDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                throw DukeException.badDeadlineDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new DeadlineCommand(parsedDetails[0], parsedDetails[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            parsedDetails \u003d details.split(\" /at \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (parsedDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                throw DukeException.badEventDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new EventCommand(parsedDetails[0], parsedDetails[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(details) - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 49
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class deals with the operations regarding the data stored and needed by the programme"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialises a Storage object that represents the data stored in the file path provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param filePath File path containing the location where the data for the program is stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws IOException If there is an error in Files operations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (!Files.exists(Paths.get(filePath))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Files.createFile(Paths.get(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Loads the data in the file into a List for easier manipulation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return List containing the tasks represented by each line in the data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws FileNotFoundException If file is not found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws DukeException If the data contains invalid tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public List\u003cTask\u003e load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        List\u003cString\u003e linesOfFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            linesOfFile \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (String inputLine : linesOfFile) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String[] parsedTask \u003d inputLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String taskName \u003d parsedTask[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            switch (InputType.getCommand(taskName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                if (parsedTask.length \u003c 3) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    throw DukeException.badToDo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                newTask \u003d new ToDo(parsedTask[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                if (parsedTask.length \u003c 3) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    throw DukeException.badDeadlineTask();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                } else if (parsedTask.length \u003c 4) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    throw DukeException.badDeadlineDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                newTask \u003d new Deadline(parsedTask[2], parsedTask[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                if (parsedTask.length \u003c 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    throw DukeException.badEventTask();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                } else if (parsedTask.length \u003c 4) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    throw DukeException.badEventDate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                newTask \u003d new Event(parsedTask[2], parsedTask[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (parsedTask[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                newTask.doTask();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Stores the provided TaskList into the data file"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param tasks TaskList containing the data to be persisted to the hard disk"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @throws IOException If there is an error in Files operations"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void storeTaskList(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Files.writeString(Paths.get(filePath), \"\"); // clear storage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.numTasks(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String formattedData \u003d i \u003d\u003d 0"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    ? tasks.getTask(i).getStorageFormat()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                    : \"\\n\" + tasks.getTask(i).getStorageFormat();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Files.writeString(Paths.get(filePath), formattedData, StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 107
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class represents a list of tasks. It contains several operations that can be performed on the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialises an empty TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialises a TaskList which contains tasks provided by the List of Tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param taskList List containing Tasks with which to fill the TaskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Provides the number of tasks in the TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return Size of TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public int numTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Adds a new Task to the TaskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param task Task to be added to the TaskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Retrieves a task from the TaskList at the specified index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param index The index of the Task to be retrieved"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return Task object stored at index in the TaskList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Removes a task from the TaskList at the specified index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param index The index of the Task to be removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return Task object that has been removed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return taskList.iterator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 68
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class is responsible for anything related to the user interface, from printing output to reading input from the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private static final String HORIZONTAL_RULE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out a string which gives a greeting to the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void displayGreeting() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final String HELLO_MESSAGE \u003d \"Hello, and welcome to my humble abode. \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \"I\u0027m supposed to help you but I\u0027ll be the judge of that. Anyway what do you want.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HELLO_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out a string for when the program exits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void displayExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final String BYE_MESSAGE \u003d \"Thank you for that utter waste of time.\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                \"Can\u0027t wait to see you again...\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(BYE_MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out all items in the specified TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param tasks TaskList consisting of items to be printed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void printList(TaskList tasks) { printList(tasks, \"Here are all your burdens\"); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out tasks that have been found from a find query"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param tasks TaskList containing found Tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void printFindResult(TaskList tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        printList(tasks, \"Found these for you, couch potato\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private void printList(TaskList tasks, String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.numTasks(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            Task item \u003d tasks.getTask(i - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            String fullItem \u003d i + \". \" + item.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            System.out.println(fullItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out string for when the user has completed a task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void displayCompleteTask() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"Congratulations, you actually did something\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out a string for when the user adds a Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param task Task which the user has added"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param size Number of items in the TaskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void displayAddTask(Task task, int size) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"One more task added for you sire\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"You have \" + size + \" tasks. Enjoy!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out a string for when the user deletes a Task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param removedTask The removed Task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param size Number of items remaining in the TaskList"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void displayDeleteTask(Task removedTask, int size) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"Finished so soon? Fine I\u0027ve removed the following task. Good day.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"    \" + removedTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"You have \" + size + \" tasks. Enjoy!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Prints out a string for when there is an error loading the stored data"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(\"Something messed up with your hard disk file i don\u0027t really know what. Figure it out.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        System.out.println(HORIZONTAL_RULE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 108
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    abstract public void execute(TaskList tasklist, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 10
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String deadlineString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeadlineCommand(String taskName, String deadlineString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.deadlineString \u003d deadlineString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badDeadlineTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } else if (deadlineString.isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badDeadlineDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Task task \u003d new Deadline(taskName, deadlineString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayAddTask(task, tasks.numTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Task removedTask \u003d tasks.removeTask(taskIndex);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayDeleteTask(removedTask, tasks.numTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayCompleteTask();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.getTask(taskIndex).doTask();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 18
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public EventCommand(String taskName, String eventTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badEventTask();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } if (eventTime.isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badEventDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Task task \u003d new Event(taskName, eventTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayAddTask(task, tasks.numTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (query.isBlank()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badFind();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList foundTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            if (task.getTaskName().contains(query)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                foundTasks.addTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.printFindResult(foundTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.printList(tasks);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 12
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ToDoCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ToDoCommand(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        if (taskName.isBlank()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            throw DukeException.badToDo();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Task task \u003d new ToDo(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        ui.displayAddTask(task, tasks.numTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class represents a particular type of Task, corresponding to tasks of the \"Deadline\" form"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String deadlineString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private LocalDate deadline \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Deadline(String taskName, String deadlineString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            deadline \u003d LocalDate.parse(deadlineString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            this.deadlineString \u003d deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            this.deadlineString \u003d deadlineString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets a String which represents the Deadline in the appropriate format for storing to the hard disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String in the storage format representing Deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"D | \" + super.getStorageFormat() + \" | \" + deadlineString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Provides string representation of Deadline, used for UI display"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String representation of Deadline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadlineString + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class represents a particular type of Task, corresponding to tasks of the \"Event\" form"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private String eventDateString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private LocalDate eventDate \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Event(String taskName, String eventTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            eventDate \u003d LocalDate.parse(eventTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            this.eventDateString \u003d eventDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "            this.eventDateString \u003d eventTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets a String which represents the Event in the appropriate format for storing to the hard disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String in the storage format representing Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"E | \" + super.getStorageFormat() + \" | \" + eventDateString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Provides string representation of Event, used for UI display"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String representation of Event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventDateString + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class represents a Task that the user wants to add/remove/complete/etc. in his todo list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private final String taskName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Initialises a Task with the given name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @param taskName Name for the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets the name of the Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return Task\u0027s name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Tell\u0027s whether the user has completed the Task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return boolean representing whether the Task is completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Completes the Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void doTask() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Uncompletes the Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public void undoTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets a String which represents the Task in the appropriate format for storing to the hard disk"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String in the storage format representing Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String done \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return done + \" | \" + taskName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Provides string representation of Task, used for UI display"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String representation of Task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final String CHECKMARK \u003d \"[✓]\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        final String CROSS \u003d \"[✗]\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return isDone"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                ? CHECKMARK + \" \" + taskName"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "                : CROSS + \" \" + taskName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 69
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " * This class represents a particular type of Task, corresponding to tasks of the \"ToDo\" form"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Gets a String which represents the ToDo in the appropriate format for storing to the hard disk"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String in the storage format representing ToDo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"T | \" + super.getStorageFormat();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * Provides string representation of ToDo, used for UI display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     * @return String representation of ToDo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 28
    }
  },
  {
    "path": "src/test/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Task testTask1 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Task testTask2 \u003d new Deadline(\"test\", \"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Task testTask3 \u003d new Event(\"test\", \"test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    private Task testTask4 \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    TaskList makeTestList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(testTask1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(testTask2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(testTask3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        tasks.addTask(testTask4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void numTasks_emptyList_zero() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(0, tasks.numTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void numTasks_nonemptyList_sizeOfList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(4, makeTestList().numTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void addTask_task_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        String testPhrase \u003d \"this is a test\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        Task testTask \u003d new Task(testPhrase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList testTaskList \u003d makeTestList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        testTaskList.addTask(testTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask, testTaskList.getTask(testTaskList.numTasks() - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void getTask_firstItem_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask1, makeTestList().getTask(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void getTask_lastItem_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask4, makeTestList().getTask(makeTestList().numTasks() - 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void getTask_outOfBound_IndexOutOfBoundException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e makeTestList().getTask(makeTestList().numTasks()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void removeTask_firstItem_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList testTaskList \u003d makeTestList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask1, testTaskList.removeTask(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask2, testTaskList.getTask(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask3, testTaskList.getTask(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask4, testTaskList.getTask(2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void removeTask_lastItem_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        TaskList testTaskList \u003d makeTestList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask4, testTaskList.removeTask(testTaskList.numTasks() - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertEquals(testTask3, makeTestList().getTask(testTaskList.numTasks() - 1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    void removeTask_outOfBound_IndexOutOfBoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e makeTestList().removeTask(makeTestList().numTasks()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 83
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "halcon-blanco": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "halcon-blanco": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "halcon-blanco"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "halcon-blanco": 1
    }
  }
]
