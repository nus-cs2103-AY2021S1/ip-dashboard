[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "TanLeYang": 2
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | LASDA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 1 | aefwerg | 2020-08-21T12:41"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 0 | wakeup / | 2020-08-23T14:30"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 0 | wakeeeee / | 2020-08-23T14:40"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "D | 1 | ewgfewg / | 2021-08-25T21:44"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | adfgerwg"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | help"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 0 | hjwughweuig / | 2020-11-23T21:44"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 1 | sleep"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "D | 1 | gfewrg / | 2020-08-23T20:00"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                store.initializeStorage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                taskList \u003d new TaskList(store.getTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                Command c \u003d parser.parse(ui.readCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                c.execute(taskList, ui, store);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                isRunning \u003d !c.isExit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                System.out.println(\"Error connecting to storage, actions made will not be saved\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ui.printMessage(e.getFriendlyMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.stopReading();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "TanLeYang": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final static String DIRECTORY_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final static String STORAGE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void initializeStorage() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storageDirectory \u003d new File(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!storageDirectory.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storageDirectory.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storagePath \u003d new File(STORAGE_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!storagePath.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storagePath.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storageFile \u003d new File(STORAGE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Scanner scanner \u003d new Scanner(storageFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                tasks.add(parseStorageString(scanner.nextLine()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"duke.Storage file not found\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (WrongDateFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"Wrong date formatting in storage file\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void updateTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            FileWriter storageWriter \u003d new FileWriter(STORAGE_PATH, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            clearTasks();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                addTask(storageWriter, t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storageWriter.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"Problem accessing storage file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Task parseStorageString(String storageString) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] taskComponents \u003d storageString.trim().split(\" \\\\| \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String type \u003d taskComponents[0].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final boolean isCompleted \u003d taskComponents[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String description \u003d taskComponents[2].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new Todo(description, isCompleted);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            final String date \u003d taskComponents[3].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return type.equals(\"E\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    ? new Event(description, DateParser.parseIso(date), isCompleted)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    : new Deadline(description, DateParser.parseIso(date), isCompleted);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void clearTasks() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        FileWriter storageWriter \u003d new FileWriter(STORAGE_PATH, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // replace the original content with an empty string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void addTask(FileWriter storageWriter, Task task) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(task.getStorageString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 92
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String lineSeparator \u003d \"***********************\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        System.out.println(lineSeparator);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        System.out.println(lineSeparator);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        printMessage(\"Hi! I\u0027m Duke :-) What can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void stopReading() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 32
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(\"Bye! See you again soon! :-)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof  ByeCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 28
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DeadlineCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LocalDateTime deadlineDateTime \u003d DateParser.parseString(dateStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, deadlineDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(String.format(\"Okay, I\u0027ve added the following deadline: \\n %s\", deadline.toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((DeadlineCommand) other).description) \u0026\u0026"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    this.dateStr.equals(((DeadlineCommand) other).dateStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task deletedTask \u003d tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(String.format(\"Okay, I\u0027ve deleted the following task: \\n %s\", deletedTask.toString()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.taskNumber \u003d\u003d ((DeleteCommand) other).taskNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task completedTask \u003d tasks.completeTask(taskNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(String.format(\"Great! I\u0027ve marked the following task as done: \\n %s\", completedTask));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DoneCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.taskNumber \u003d\u003d ((DoneCommand) other).taskNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 34
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EventCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LocalDateTime eventDateTime \u003d DateParser.parseString(dateStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Event event \u003d new Event(description, eventDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(String.format(\"Okay, I\u0027ve added the following event: \\n %s\", event.toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof EventCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((EventCommand) other).description) \u0026\u0026"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    this.dateStr.equals(((EventCommand) other).dateStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String tasksToString \u003d tasks.tasksToString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(tasksToString);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof ListCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 25
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ui.printMessage(String.format(\"Okay! I\u0027ve added the following task: \\n %s\", todo.toString()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof TodoCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((TodoCommand) other).description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 34
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String friendlyMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.friendlyMessage \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DukeException(String message, String friendlyMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.friendlyMessage \u003d friendlyMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getFriendlyMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.friendlyMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyBodyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EmptyBodyException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EmptyBodyException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Body of task not specified\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NoSuchTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class NoSuchTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public NoSuchTaskException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"No such task exists\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS! No such task exists, please try again.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public UnknownCommandException(String command) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(String.format(\"Unknown command: %s\", command),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/WrongDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class WrongDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public WrongDateFormatException(String correctFormat) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Wrong datetime format\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"Wrong datetime format provided, date and time should be specified as follows: \" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        correctFormat);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/WrongSyntaxException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class WrongSyntaxException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public WrongSyntaxException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Syntax error\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! There is something wrong with the command, please check the syntax again!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String format \u003d \"dd MMM uuuu HHmm\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String readableFormat \u003d \"DD MMM YYYY HHMM\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static LocalDateTime parseString(String dateTime) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            LocalDateTime result \u003d LocalDateTime.parse(dateTime, DateParser.formatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongDateFormatException(DateParser.readableFormat);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static LocalDateTime parseIso(String isoString) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            LocalDateTime result \u003d LocalDateTime.parse(isoString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongDateFormatException(\"YYYY-MM-DDTHH:MM\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 33
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongSyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.EmptyBodyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Set\u003cString\u003e commands \u003d new HashSet\u003c\u003e(Arrays.asList(\"bye\", \"list\", \"done\", \"delete\", \"deadline\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event\", \"todo\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Set\u003cString\u003e singleArgCommands \u003d new HashSet\u003c\u003e(Arrays.asList(\"bye\", \"list\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Command parse(String commandStr) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d split(commandStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandArgs \u003d parts[1].trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        switch(commandName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int doneNumber \u003d getTaskNumber(commandArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DoneCommand(doneNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int deleteNumber \u003d getTaskNumber(commandArgs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DeleteCommand(deleteNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String[] deadlineParts \u003d splitTime(\"deadline\", commandArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DeadlineCommand(deadlineParts[0].trim(), deadlineParts[1].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String[] eventParts \u003d splitTime(\"event\", commandArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new EventCommand(eventParts[0].trim(), eventParts[1].trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new TodoCommand(commandArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new UnknownCommandException(commandName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int getTaskNumber(String commandArgs) throws WrongSyntaxException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int result \u003d Integer.parseInt(commandArgs.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String[] splitTime (String type, String commandArgs) throws WrongSyntaxException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String splitBy \u003d type.equals(\"deadline\") ? \"/by\" : \"/at\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d commandArgs.split(splitBy, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (parts.length !\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return parts;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String[] split(String commandStr) throws UnknownCommandException, WrongSyntaxException, EmptyBodyException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (commandStr.isBlank()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d commandStr.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        boolean isSingleArgCommand \u003d singleArgCommands.contains(commandName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (parts.length \u003c 2 \u0026\u0026 !isSingleArgCommand) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!commands.contains(commandName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new UnknownCommandException(commandName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (isSingleArgCommand) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new String[]{ commandName, \"\" };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String commandArgs \u003d parts[1].trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (commandArgs.isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                throw new EmptyBodyException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new String[]{ commandName, commandArgs };"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate, boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline markCompleted() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Deadline(description, dueDate, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String baseString \u003d super.getStorageString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s\", baseString, dueDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", symbol, super.toString(), dueDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event(String description, LocalDateTime date, boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event markCompleted() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Event(description, date, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String baseString \u003d super.getStorageString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s\", baseString, date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", symbol, super.toString(), date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected char symbol \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task(String description, boolean completed) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.isCompleted \u003d completed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task markCompleted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Task(description, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        char done \u003d isCompleted ? \u00271\u0027 : \u00270\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s | %s\", symbol, done, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String completionStatus \u003d isCompleted ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s] %s\", completionStatus, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 33
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return List.copyOf(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task completeTask(int taskNumber) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!isValidTaskNumber(taskNumber)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task completedTask \u003d taskList.get(taskNumber - 1).markCompleted();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.set(taskNumber - 1, completedTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task deleteTask(int taskNumber) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!isValidTaskNumber(taskNumber)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task toRemove \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean isValidTaskNumber(int taskNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return !(taskNumber \u003c 1 || taskNumber \u003e taskList.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String tasksToString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            tasks.append(String.format(\"%d. %s\", i + 1, taskList.get(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                tasks.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo(String description, boolean completed) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, completed);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo markCompleted() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s\", symbol, super.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 22
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseUserInput_correctInput_correctCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] userInput \u003d new String[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"todo sleep\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"deadline assignment /by 30 Aug 2020 2359\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"done 2\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"list\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"bye\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"delete 3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event meeting /at 24 Aug 2020 1000\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Command[] expectedCommands \u003d new Command[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new TodoCommand(\"sleep\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DeadlineCommand(\"assignment\", \"30 Aug 2020 2359\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DoneCommand(2),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new ListCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new ByeCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DeleteCommand(3),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new EventCommand(\"meeting\", \"24 Aug 2020 1000\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            for (int i \u003d 0; i \u003c userInput.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                Command c \u003d parser.parse(userInput[i]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                assertEquals(expectedCommands[i], c);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fail(\"test should not have thrown an exception\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseUserInput_emptyTaskBody_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] userInput \u003d new String[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"todo \","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"deadline \","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event \","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (String input : userInput) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 63
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void completeTask_invalidTaskNumber_throwException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NoSuchTaskException.class, () -\u003e testList.completeTask(55));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void deleteTask_invalidTaskNumber_throwException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NoSuchTaskException.class, () -\u003e testList.completeTask(123));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 21
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deadline wake up /by 21 Aug 2020 1000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "event do work /at 21 Aug 2020 1045"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "event efwfw /at 9pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "REM delete output from previous run and delete storage file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "del data\\duke.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\duke.exceptions\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "TanLeYang": 4
    }
  }
]
