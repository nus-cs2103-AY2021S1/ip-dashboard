[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final Path filePath \u003d Paths.get(\".\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.storage \u003d new Storage(Duke.filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.tasks \u003d new TaskList(this.storage.loadTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.ui.print(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 47,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidTaskIdException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingKeywordException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingTaskDetailsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingTaskIdException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A parser that is used to parse inputs from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FAILED_TO_MARK_TASK_AS_COMPLETE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            \"Failed to mark task as complete!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FAILED_TO_DELETE_TASK \u003d \"Failed to delete task!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FAILED_TO_CREATE_TASK \u003d \"Failed to create task!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FAILED_TO_CREATE_DEADLINE_TASK \u003d \"Failed to create Deadline task!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String FAILED_TO_CREATE_EVENT_TASK \u003d \"Failed to create Event task!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Parses the full command given by the user as input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param fullCommand The input by the user that is to be parsed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A \u003ccode\u003eCommand\u003c/code\u003e that corresponds to the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String[] commandInputs \u003d fullCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (commandInputs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DukeException(\"Something went wrong when parsing your inputs!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String command \u003d commandInputs[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String commandDetails;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // \"find\" needs to be accompanied by a keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (commandInputs.length \u003c 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new MissingKeywordException(\"I\u0027m not sure what tasks to search for...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            commandDetails \u003d commandInputs[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new FindCommand(commandDetails);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // \"done\" needs to be accompanied by task ID"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (commandInputs.length \u003c 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new MissingTaskIdException(FAILED_TO_MARK_TASK_AS_COMPLETE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            commandDetails \u003d commandInputs[1].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                int taskId \u003d Integer.parseInt(commandDetails);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return new DoneCommand(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new InvalidTaskIdException(FAILED_TO_MARK_TASK_AS_COMPLETE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // \"delete\" needs to be accompanied by task ID"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (commandInputs.length \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new MissingTaskIdException(FAILED_TO_DELETE_TASK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            commandDetails \u003d commandInputs[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                int taskId \u003d Integer.parseInt(commandDetails);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new InvalidTaskIdException(FAILED_TO_DELETE_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // \"todo\", \"deadline\", \"event\" needs to be accompanied with details on the task to be"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // created"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (commandInputs.length \u003c 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new MissingTaskDetailsException(FAILED_TO_CREATE_TASK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            commandDetails \u003d commandInputs[1].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return new AddCommand(new Todo(commandDetails));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String[] deadlineDetails \u003d commandDetails.split(\"/by\", 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (deadlineDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new MissingTaskDetailsException(FAILED_TO_CREATE_DEADLINE_TASK,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                            \"No deadline was specified!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String description \u003d deadlineDetails[0].trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String by \u003d deadlineDetails[1].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return new AddCommand(new Deadline(description, by));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                // Last case would be creating an event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String[] eventDetails \u003d commandDetails.split(\"/at\", 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (eventDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new MissingTaskDetailsException(FAILED_TO_CREATE_EVENT_TASK,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                            \"No date was specified!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String description \u003d eventDetails[0].trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String at \u003d eventDetails[1].trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                return new AddCommand(new Event(description, at));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 141
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.CorruptedStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * A class that represents the storage of the data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private List\u003cString\u003e serialisedTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param filePath The path to save the data to in the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Storage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // Create directories if it does yet exist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Path parentPath \u003d filePath.getParent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // Check if the file to be read exists. If not, create it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.serialisedTasks \u003d Files.readAllLines(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // TODO: add better error handling"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            System.out.println(\"Something went wrong when loading tasks from the storage!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Retrieves the task from the hard disk and loads them into the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A list of saved \u003ccode\u003eTask\u003c/code\u003es."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws CorruptedStorageException If something went wrong de-serialising the saved tasks,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *                                   either due to missing fields, or unknown format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public List\u003cTask\u003e loadTasks() throws CorruptedStorageException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (String serialisedTask : this.serialisedTasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            // \"|\" is a special regex character which needs to be escaped"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            String[] tokens \u003d serialisedTask.split(\" \\\\| \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            if (tokens.length \u003c 3) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                throw new CorruptedStorageException(\"Some tasks are missing fields!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            boolean isDone \u003d tokens[1].equals(\"1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            String desc \u003d tokens[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                tasks.add(new Todo(desc, isDone));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (tokens.length \u003c 4) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new CorruptedStorageException(\"Deadline task is missing due date!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String by \u003d tokens[3];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    tasks.add(new Deadline(desc, by, isDone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new CorruptedStorageException(\"Date was not stored properly!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                if (tokens.length \u003c 4) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new CorruptedStorageException(\"Event task is missing date!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                String at \u003d tokens[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    tasks.add(new Event(desc, at, isDone));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    throw new CorruptedStorageException(\"Date was not stored properly!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Writes the list of tasks saved in the application to the hard disk."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws IOException If there are issues reading/writing to the file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String fileData \u003d String.join(\"\\n\", this.serialisedTasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Files.writeString(filePath, fileData, StandardCharsets.UTF_8, StandardOpenOption.WRITE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                StandardOpenOption.TRUNCATE_EXISTING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Saves a new task to the hard disk."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param task The task to be saved."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws CorruptedStorageException If there are issues reading/writing to the file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void saveNewTask(Task task) throws CorruptedStorageException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.serialisedTasks.add(task.serialise());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.writeToFile();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CorruptedStorageException(\"Couldn\u0027t save new task to storage!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Updates a task and write these changes to the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be updated."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param task   The updated task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws CorruptedStorageException If there are issues reading/writing to the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void updateExistingTask(int taskId, Task task) throws CorruptedStorageException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.serialisedTasks.set(taskId - 1, task.serialise());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.writeToFile();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CorruptedStorageException(\"Couldn\u0027t save new task to storage!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Deletes a task from the hard disk."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be deleted."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws CorruptedStorageException If there are issues reading/writing to the file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteExistingTask(int taskId) throws CorruptedStorageException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.serialisedTasks.remove(taskId - 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.writeToFile();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new CorruptedStorageException(\"Couldn\u0027t save new task to storage!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 168
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        String horizontalLine \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        System.out.printf(\"%s\\n%s\\n%s\\n\", horizontalLine, message, horizontalLine);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.print(\"Something went wrong when loading previously saved tasks! Starting with an \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \"empty tasks list instead...\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.print(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 29
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will add a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The task to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the Add command by adding the task to the task list, saving the task to the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * storage, and then printing a message indicating that the task was successfully added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws DukeException If the execution fails at any step."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        storage.saveNewTask(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ui.print(String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\", task,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                tasks.size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will terminate the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the Bye command by printing a farewell message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ui.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns \u003ccode\u003etrue\u003c/code\u003e to indicate that this command should result in the termination of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 33
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will be issued to the chat bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws DukeException If the execution fails at any step."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a flag that indicates whether the command is one which should result in an exit of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e by default."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The ID of the task to be deleted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the Delete command by deleting the task from the task list, updating the storage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * and then printing a message indicating that the task was successfully deleted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws DukeException If the execution fails at any step."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Task task \u003d tasks.deleteTask(taskId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        storage.deleteExistingTask(taskId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ui.print(String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\", task,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                tasks.size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will mark a task as complete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The ID of the task to be marked as complete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be marked as complete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the Done command by marking the task in the task list as complete, updating the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * storage, and then printing a message to indicate that the task was marked as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws DukeException If the execution fails at any step."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Task task \u003d tasks.getTask(taskId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        storage.updateExistingTask(taskId, task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        ui.print(String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 45
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will find a list of tasks containing the given keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The keyword to search for"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param keyword The keyword to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the Find command by searching for the keyword within the task list and then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * printing a message listing the matching tasks or a message indicating no tasks were found.."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList filteredTasks \u003d tasks.search(this.keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ui.print(\"No matching tasks found.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ui.print(String.format(\"Here are the matching tasks in your list:\\n%s\", filteredTasks));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a command that will list all the tasks of the chat bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Executes the List command by printing out all tasks in the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks   The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param ui      The UI that is used by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param storage The storage that is used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ui.print(\"No tasks found.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            ui.print(String.format(\"Here are the tasks in your list:\\n%s\", tasks));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/CorruptedStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when the storage is corrupted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class CorruptedStorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with a warning that the storage is corrupted, followed by the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public CorruptedStorageException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"Storage is corrupted! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates possible exception that can occur from the {@link duke} package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with a \u003ccode\u003e☹ OOPS!!! \u003c/code\u003e to represent the personality of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * the chat bot, followed by the specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when an invalid date input is received."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class InvalidDateInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the a warning to indicate that the date is not a recognised"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * format, as well as the correct date format to use."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param date The invalid date the resulted in this exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public InvalidDateInputException(String date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                .format(\"%s is not a recognised date format. Please key in dates in the format \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        \"yyyy-MM-dd. For example, 2007-12-03.\", date));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIdException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when an invalid task ID is received."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class InvalidTaskIdException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the specified detail message followed by a warning to key"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * in only the ID of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public InvalidTaskIdException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(message + \" Please key in only the integer representing the task!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when some keyword is expected, but none was found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MissingKeywordException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the specified detail message followed by a warning to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * specify a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MissingKeywordException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(String.format(\"%s Please specify a keyword!\", message));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTaskDetailsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when there is an attempt to create a new task, but insufficient"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * details are provided for the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MissingTaskDetailsException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the specified detail message followed by a warning that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * there are insufficient details."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MissingTaskDetailsException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(message + \" Insufficient details provided!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the specified detail message as well as the missing details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message        The detail message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param missingDetails The task details that are missing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MissingTaskDetailsException(String message, String missingDetails) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(message + \" \" + missingDetails);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTaskIdException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates the exception when a task ID is expected, but none was provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class MissingTaskIdException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with the specified detail message followed by a warning that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * no task was specified."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public MissingTaskIdException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(message + \" No task was specified!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a task that needs to be done by a particular date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String identifier \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDate by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The newly initialised deadline defaults to being incomplete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param by          The deadline of the task in a String format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws InvalidDateInputException If the given date is not a recognised date format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Deadline(String description, String by) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new InvalidDateInputException(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param by          The deadline of the task in a String format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param isDone      Whether the task is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws InvalidDateInputException If the given date is not a recognised date format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Deadline(String description, String by, boolean isDone)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throws InvalidDateInputException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new InvalidDateInputException(by);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a string representation of the deadline task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * This string representation is prepended by a \u003ccode\u003eD\u003c/code\u003e to indicate that this task is a"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Deadline item followed by the default string representation of a normal {@link Task}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representation of the deadline task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", Deadline.identifier, super.toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Serialises the deadline task to a string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The serialised deadline task consists of a \u003ccode\u003eD\u003c/code\u003e, followed by a \u003ccode\u003e|\u003c/code\u003e, and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * then the serialised representation of a normal {@link Task}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representing the serialised deadline task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String serialise() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"%s | %s | %s\", Deadline.identifier, super.serialise(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a task that happens on a particular date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String identifier \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final LocalDate at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The newly initialised event defaults to being incomplete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param at          The date at which the event will happen in a String format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws InvalidDateInputException If the given date is not a recognised date format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Event(String description, String at) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new InvalidDateInputException(at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param at          The date at which the event will happen in a String format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param isDone      Whether the event is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @throws InvalidDateInputException If the given date is not a recognised date format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Event(String description, String at, boolean isDone) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throw new InvalidDateInputException(at);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a string representation of the event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * This string representation is prepended by a \u003ccode\u003eE\u003c/code\u003e to indicate that this task is a"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Event item followed by the default string representation of a normal {@link Task}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representation of the event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", Event.identifier, super.toString(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Serialises the event to a string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The serialised event consists of a \u003ccode\u003eE\u003c/code\u003e, followed by a \u003ccode\u003e|\u003c/code\u003e, and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * then the serialised representation of a normal {@link Task}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representing the serialised event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String serialise() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"%s | %s | %s\", Event.identifier, super.serialise(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                this.at.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Serialisable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public interface Serialisable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    String serialise();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 5
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public abstract class Task implements Serialisable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The description of the Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * A flag to indicate if the task is done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new {@link Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The newly initialised task defaults to being incomplete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the {@link Task}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new {@link Task}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the {@link Task}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param isDone      Whether the {@link Task} is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a \u003ccode\u003e✓\u003c/code\u003e if the task is done, \u003ccode\u003e✘\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return \u003ccode\u003e✓\u003c/code\u003e if the task is done, \u003ccode\u003e✘\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return (this.isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Checks if the task description contains the given keyword."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The check is case-insensitive."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param keyword The keyword to check."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the task contains the keyword, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The string representation consists of a icon to represent the status of the task (whether"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * it is done or not), followed by the description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representation of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Serialises the task to a string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The serialised task consists of a number to indicate the completion status of the task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * (\u003ccode\u003e1\u003c/code\u003e if the task is done, \u003ccode\u003e0\u003c/code\u003e otherwise), followed by a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * \u003ccode\u003e|\u003c/code\u003e, and then the description of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representing the serialised task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String serialise() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"%d | %s\", this.isDone ? 1 : 0, this.description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 91
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a list of {@link Task}s."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance with no existing {@link Task}s."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance based on a list of existing {@link Task}s."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param tasks The lists of tasks to initialise the instance with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a {@link Task} stored in the list based on the given task ID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be retrieved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Adds a {@link Task} to end of the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param task The task to be added to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the task was added successfully, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Deletes a {@link Task} in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param taskId The ID of the task to be deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return The {@link Task} that was deleted form the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Task deleteTask(int taskId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.tasks.remove(taskId - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns the number of {@link Task}s currently stored in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return The number of {@link Task}s currently stored in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a new list of tasks where each task\u0027s description contains the given keyword."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param keyword The keyword to check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return The list of tasks where all tasks\u0027 description contains the given keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public TaskList search(String keyword) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e filteredList \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                this.tasks.stream().filter((task) -\u003e task.containsKeyword(keyword))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return new TaskList(filteredList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a string representation of the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * For each task in the list, the string representation includes a numbering of these tasks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * based on their position in the list followed by the string representation of the task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * itself. These strings are separated by a newline."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representation of the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            sb.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return sb.toString().trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 99
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " * Encapsulates a task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    private static final String identifier \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The newly initialised todo defaults to being incomplete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Initialises a new instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param description The description of the todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @param isDone      Whether the todo is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Returns a string representation of the todo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * This string representation is prepended by a \u003ccode\u003eT\u003c/code\u003e to indicate that this task is a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Todo item followed by the default string representation of a normal {@link Task}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representation of the todo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"[%s]%s\", Todo.identifier, super.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * Serialises the todo to a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * The serialised todo consists of a \u003ccode\u003eT\u003c/code\u003e, followed by a \u003ccode\u003e|\u003c/code\u003e, and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * then the serialised representation of a normal {@link Task}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     * @return A string representing the serialised todo."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public String serialise() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        return String.format(\"%s | %s\", Todo.identifier, super.serialise());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 52
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidTaskIdException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingKeywordException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingTaskDetailsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.MissingTaskIdException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseList_validLowercase_listCommand() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseList_validUppercase_listCommand() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"LIST\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseList_validMixedCase_listCommand() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"LiSt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseList_leadingAndTrailingSpaces_listCommand() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    list   \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Find"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseFind_missingKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"find\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingKeywordException);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \"☹ OOPS!!! I\u0027m not sure what tasks to search for... Please specify a keyword!\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseFind_validLowercase_findCommand() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"find blahblah\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof FindCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseFind_validUppercase_findCommand() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"FIND blahblah\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof FindCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseFind_validMixedCase_findCommand() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"FiNd blahblah\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof FindCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_missingTaskId_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskIdException);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to mark task as complete! No task was specified!\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_validLowercase_doneCommand() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"done 1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_validUppercase_doneCommand() throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"DONE 1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_validMixedCase_doneCommand() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"DoNe 1\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_leadingAndTrailingSpaces_doneCommand() throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    done   1  \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDone_invalidTaskId_exceptionThrown() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"done task1\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof InvalidTaskIdException);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \"☹ OOPS!!! Failed to mark task as complete! Please key in only the integer \" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                            \"representing the task!\", e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Delete"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_missingTaskId_exceptionThrown() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskIdException);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to delete task! No task was specified!\", e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_validLowercase_deleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"delete 1\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_validUppercase_deleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"DELETE 1\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_validMixedCase_deleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"DeLeTe 1\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_leadingAndTrailingSpaces_deleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    delete    1   \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDelete_invalidTaskId_exceptionThrown() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"delete task1\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof InvalidTaskIdException);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to delete task! Please key in only the integer \" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \"representing the task!\", e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // To do, Deadline, Event"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseTodo_missingDetails_exceptionThrown() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"todo\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskDetailsException);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to create task! Insufficient details provided!\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDeadline_missingDetails_exceptionThrown() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskDetailsException);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to create task! Insufficient details provided!\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseEvent_missingDetails_exceptionThrown() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"event\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskDetailsException);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to create task! Insufficient details provided!\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseTodo_validDetails_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"todo blahblah\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseTodo_validDetailsMultipleWords_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"todo blahblah blah\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseTodo_leadingAndTrailingSpaces_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    todo    blahblah    \");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDeadline_missingDeadline_exceptionThrown() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"deadline blahblah\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskDetailsException);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to create Deadline task! No deadline was specified!\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDeadline_validDetails_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"deadline blahblah /by 2020-10-30\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseDeadline_leadingAndTrailingSpaces_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    deadline     blahblah  /by    2020-10-30  \");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseEvent_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"event blahblah\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertTrue(e instanceof MissingTaskDetailsException);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Failed to create Event task! No date was specified!\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseEvent_validDetails_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"event blahblah /at 2020-10-30\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseEvent_leadingAndTrailingSpaces_addCommand() throws DukeException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"    event     blahblah  /at    2020-10-30  \");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Bye"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseBye_validLowercase_byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseBye_validUppercase_byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"BYE\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseBye_validMixedCase_byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Command c \u003d Parser.parse(\"ByE\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    // Unknown command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseUnknown_help_exceptionThrown() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"help\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseUnknown_emptyString_exceptionThrown() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void parseUnknown_todoTypo_exceptionThrown() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            Parser.parse(\"todoo\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 318
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void new_validDate_noExceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Deadline(\"desc\", \"2020-10-30\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void new_invalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Deadline(\"desc\", \"30-10-2020\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! 30-10-2020 is not a recognised date format. Please key in \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \"dates in the format yyyy-MM-dd. For example, 2007-12-03.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_uncompletedDeadline_success() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline description\", \"2020-10-30\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"D | 0 | deadline description | 2020-10-30\", deadline.serialise());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_completedDeadline_success() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline description\", \"2020-10-30\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"D | 1 | deadline description | 2020-10-30\", deadline.serialise());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 44
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void new_validDate_noExceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Event(\"desc\", \"2020-10-30\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void new_invalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            new Event(\"desc\", \"30-10-2020\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        } catch (InvalidDateInputException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            assertEquals(\"☹ OOPS!!! 30-10-2020 is not a recognised date format. Please key in \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                    \"dates in the format yyyy-MM-dd. For example, 2007-12-03.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_uncompletedEvent_success() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Event event \u003d new Event(\"event description\", \"2020-10-30\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"E | 0 | event description | 2020-10-30\", event.serialise());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_completedEvent_success() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Event event \u003d new Event(\"event description\", \"2020-10-30\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"E | 1 | event description | 2020-10-30\", event.serialise());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 43
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void addTask_taskListWithSomeItems_taskAddedAsLastItem()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throws InvalidDateInputException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc1\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc2\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Task task \u003d new Todo(\"todo desc3\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(task, tasks.getTask(tasks.size()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void deleteTask_taskListWithSomeItems_success() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Task taskToDelete \u003d new Todo(\"todo desc3\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(taskToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        int numItemsInitial \u003d tasks.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        tasks.deleteTask(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        int numItemsAfter \u003d tasks.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(numItemsInitial - 1, numItemsAfter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void size_emptyTaskList_zero() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(3, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void size_nonEmptyTaskList_nonZero() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(0, tasks.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void search_onEmptyTaskList_emptyTaskList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList filteredTasks \u003d tasks.search(\"blahblah\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(0, filteredTasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void search_keywordIsSubstring_correctlyFilteredTaskList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throws InvalidDateInputException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo blahblah\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline blah\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event blah blah\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo asdf\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList filteredTasks \u003d tasks.search(\"blah\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"1. [T][✘] todo blahblah\\n2. [D][✘] deadline blah (by: Dec 30 2020)\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \"3. [E][✘] event blah blah (at: Dec 30 2020)\", filteredTasks.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void search_caseInsensitiveKeyword_correctlyFilteredTaskList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "            throws InvalidDateInputException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo blaH\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline BLAH\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event blah blah\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo asdf\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList filteredTasks \u003d tasks.search(\"BLAh\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"1. [T][✘] todo blaH\\n2. [D][✘] deadline BLAH (by: Dec 30 2020)\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                \"3. [E][✘] event blah blah (at: Dec 30 2020)\", filteredTasks.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toString_emptyTaskList_emptyString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"\", tasks.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void toString_nonEmptyTaskList_noTrailingNewLine() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        List\u003cTask\u003e testInputTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc1\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Todo(\"todo desc2\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Deadline(\"deadline desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        testInputTasks.add(new Event(\"event desc1\", \"2020-12-30\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        TaskList tasks \u003d new TaskList(testInputTasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"1. [T][✘] todo desc1\\n\" + \"2. [T][✘] todo desc2\\n\" + \"3. [D][✘] deadline \" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                        \"desc1 (by: Dec 30 2020)\\n\" + \"4. [E][✘] event desc1 (at: Dec 30 2020)\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "                tasks.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 120
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_uncompletedTodo_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Todo todo \u003d new Todo(\"todo description\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"T | 0 | todo description\", todo.serialise());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    public void serialise_completedTodo_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        Todo todo \u003d new Todo(\"todo description\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "        assertEquals(\"T | 1 | todo description\", todo.serialise());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "deadline return book /by 2020-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "event project meeting /at 2020-08-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "deadline return book /by 2020-10-03"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "event project meeting /at 2020-10-03"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "blah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "deadline testing deadline without specifying deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "event testing event without specifying time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "done project meeting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "delete project meeting"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sebastiantoh": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "del .\\data\\duke.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "sebastiantoh": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "if [ -e \"./data/duke.txt\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "    rm ./data/duke.txt "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sebastiantoh"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "sebastiantoh": 7
    }
  }
]
