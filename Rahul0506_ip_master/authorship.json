[
  {
    "path": "src/main/java/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    LIST(\"list\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    DONE(\"done\"), DELETE(\"delete\"), BYE(\"bye\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Commands(String command) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean check(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return command.equals(input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 14
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Deadline extends TaskDDL {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Deadline(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task, ddl);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[D]\" + super.toString() + String.format(\" (by: %s)\", getDateTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"D|%s|%s\", super.fileString(), ddl);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    static final String FILE_NAME \u003d \"duke_data.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    final Path FILE_PATH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Path DIR_PATH \u003d java.nio.file.Paths.get(home, \"data\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            java.nio.file.Files.createDirectory(DIR_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (FileAlreadyExistsException ignored) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FILE_PATH \u003d java.nio.file.Paths.get(home, \"data\", FILE_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            java.nio.file.Files.createFile(FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (FileAlreadyExistsException ignored) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            loadFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            writeOutput(\"Existing file loaded!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void writeOutput(String... messages) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        System.out.println(\"\\t-----------------------------------------\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        System.out.println(\"\\t-----------------------------------------\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private LocalDate validateDateTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (time.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Task date cannot be empty.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        LocalDate parsed;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            parsed \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return parsed;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid date entered. Use format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void addTask(String task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        addTask(new Todo(task));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void addTask(String task, Commands type, String ddl, boolean done) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (type \u003d\u003d Commands.TODO) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                newTask \u003d new Todo(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else if (type \u003d\u003d Commands.DEADLINE) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                newTask \u003d new Deadline(task, validateDateTime(ddl));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                newTask \u003d new Event(task, validateDateTime(ddl));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                newTask.markDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskList.add(newTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DukeException ignored) {}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void addTask(String task, boolean isEvent) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] taskSplit;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (isEvent) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskSplit \u003d task.split(\"/at\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (taskSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"Invalid description for an event. Use /at followed by date\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Event(taskSplit[0].strip(), dateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskSplit \u003d task.split(\"/by\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (taskSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"Invalid description for a deadline. Use /by followed by date\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            newTask \u003d new Deadline(taskSplit[0].strip(), dateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        addTask(newTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void addTask(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Got it. I\u0027ve added this task:\", task.toString(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void listTasks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] taskOutputs \u003d new String[taskList.size() + 1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        taskOutputs[0] \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            taskOutputs[i + 1] \u003d (i + 1) + \". \" + taskList.get(i).toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(taskOutputs);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void markDone(int position) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (position \u003c 0 || position \u003e taskList.size()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid task number provided\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task task \u003d taskList.get(position - 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Nice! I\u0027ve marked this task as done:\", \"\\t\" + task.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void deleteTask(int position) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (position \u003c 0 || position \u003e taskList.size()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DukeException(\"Invalid task number provided\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Task task \u003d taskList.remove(position - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Noted. I\u0027ve removed this task:\", \"\\t\" + task.toString(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void saveFile() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FileWriter writer \u003d new FileWriter(FILE_PATH.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                writer.write(task.fileString() + \"\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private void loadFile() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            BufferedReader reader \u003d java.nio.file.Files.newBufferedReader(FILE_PATH);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String[] lineSplit;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            boolean done;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                lineSplit \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                done \u003d lineSplit[2].equals(\"1\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (lineSplit[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    addTask(lineSplit[1], Commands.TODO, \"\", done);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } else if (lineSplit[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    addTask(lineSplit[1], Commands.DEADLINE, lineSplit[3], done);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    addTask(lineSplit[1], Commands.EVENT, lineSplit[3], done);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean processInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (Commands.BYE.check(input)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else if (Commands.LIST.check(input)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            listTasks();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (Commands.TODO.check(inputSplit[0])) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                addTask(inputSplit[1]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else if (Commands.DEADLINE.check(inputSplit[0])) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                addTask(inputSplit[1], false);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else if (Commands.EVENT.check(inputSplit[0])) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                addTask(inputSplit[1], true);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else if (Commands.DONE.check(inputSplit[0])) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    markDone(Integer.parseInt(inputSplit[1]));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number must be a valid integer\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else if (Commands.DELETE.check(inputSplit[0])) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (inputSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number cannot be empty\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    deleteTask(Integer.parseInt(inputSplit[1]));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    throw new DukeException(\"Task number must be a valid integer\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            saveFile();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        writeOutput(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        boolean keepGoing \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        while (keepGoing) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            input \u003d duke.readInput();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                keepGoing \u003d duke.processInput(input);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                duke.writeOutput(de.getMessage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 249,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"\\u2639 OOPS!!! %s\", super.getMessage());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Event extends TaskDDL {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Event(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task, ddl);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[E]\" + super.toString() + String.format(\" (at: %s)\", getDateTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"E|%s|%s\", super.fileString(), ddl);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String mark \u003d done ? \"\\u2713\" : \"\\u2717\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"[%s] %s\", mark, task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"%s|%s\", task, done ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 24
    }
  },
  {
    "path": "src/main/java/TaskDDL.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class TaskDDL extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    LocalDate ddl;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public TaskDDL(String task, LocalDate ddl) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ddl \u003d ddl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    protected String getDateTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ddl.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 17
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return \"T|\" + super.fileString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "todo eat"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "deadline finish eating /by noon"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 1,
      "-": 20
    }
  }
]
