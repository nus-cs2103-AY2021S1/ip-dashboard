[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "D | ✓ | do work | 2011-01-01T12:30"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "T | ✓ | watch show"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "E | ✓ | project meeting | 2011-01-02T12:40"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "E | ✗ | rest | 2014-02-02T14:00"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 4
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a bye/exit command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.format(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 14
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a specific command for duke to take in."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Executes the specific command given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskList tasklist containing all tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param ui user interace to print."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param storage data stored backend."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, DukeStorage storage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Checks if duke should stop taking in commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return true if the BYE command is inputted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public abstract boolean isCompleted();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 18
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the different command types in the enum class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND, UNIDENTIFIED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a deadline to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details deadline details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param by date and time to be completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid date or time is provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Deadline(String details, String by) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method for constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param dateTime date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            by \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the string representation of the deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 50
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a deadline command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the deadline command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details and time for deadline to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DeadlineCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the deadline description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the deadline details, second chunk is by when"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedDeadline \u003d afterCommand.split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException(\"Format of deadline recording: deadline keyword\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \", deadline instructions, forward slash, by keyword with a colon, specific date/time)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. deadline return book /by Sunday\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String details \u003d splittedDeadline[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String by \u003d splittedDeadline[1].split(\"by\", 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Task newDeadline \u003d new Deadline(details, by);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                taskList.addTask(newDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.addTask(newDeadline, taskList.tasksSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 49
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand task id to be deleted"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DeleteCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d taskList.tasksSize() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException(\"Please enter a valid task no!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.displayDeletedTask(taskList.get(taskNo), taskList.tasksSize() - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.delete(taskNo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 31
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a done/ticked command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the done command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand task id to be ticked off"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DoneCommand(String afterCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d taskList.tasksSize() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException(\"Please enter a valid task no!\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.markTaskCompleted(taskNo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.displayCompletedTask(taskList.get(taskNo));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the main Duke software."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private DukeStorage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the Duke software."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Loads the tasklist with the file content."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param filePath savepath of file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        storage \u003d new DukeStorage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // try to open the duke file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.reloadStorage(taskList.getTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Duke data do not exist!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.format(\"Its a duke exception!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Main driver code for running main."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (!isCompleted) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                saveData(taskList, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                isCompleted \u003d c.isCompleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.getScanner().close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method to save the data in the file upon every Command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskList tasklist to store tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param storage storage of tasks backend."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void saveData(TaskList taskList, DukeStorage storage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.saveStorage(taskList.getTasks());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error in saving!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 65,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a specific exception for Duke-related errors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 8
    }
  },
  {
    "path": "src/main/java/DukeInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the interpreter used to encode and decode tasks for the storage."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeInterpreter {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Encodes the task and returns a string to be stored in the duke.txt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be encoded."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation for storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static String encode(Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char type \u003d taskString.charAt(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char symbol \u003d taskString.charAt(4);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] rest \u003d taskString.substring(7).split(\"\\\\(\", 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d rest[0].trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extra \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (rest.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extra \u003d deadline.getDateTime().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extra \u003d event.getDateTime().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return encodeHelper(type, symbol, details, extra);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static String encodeHelper(char type, char symbol, String details, String extra) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return type + \" | \" + symbol + \" | \" + details +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                (extra.equals(\"\") ? \"\" : \" | \" + extra);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Decodes the string representation and returns the Task to be added to tasklist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param code string representation of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Task to be added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time is provided."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static Task decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char taskType \u003d code.charAt(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedWords \u003d code.split(\"\\\\|\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d splittedWords[1].trim().equals(\"✓\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedWords[2].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extra \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // since the tostring has a \u0027T\u0027 char inside"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String dateTime \u003d splittedWords[3].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String date \u003d dateTime.substring(0, 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String time \u003d dateTime.substring(11, 16);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            extra \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeToDo(details, isCompleted);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeDeadline(details, isCompleted, extra);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeEvent(details, isCompleted, extra);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static ToDo decodeToDo(String details, boolean isCompleted) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ToDo toDo \u003d new ToDo(details);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            toDo.markAsCompleted();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Deadline decodeDeadline(String details, boolean isCompleted,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                           String extra) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Deadline deadline \u003d new Deadline(details, extra);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            deadline.markAsCompleted();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Event decodeEvent(String details, boolean isCompleted,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                     String extra) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Event event \u003d new Event(details, extra);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            event.markAsCompleted();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 91
    }
  },
  {
    "path": "src/main/java/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the storage for tasks in the Duke software."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param filePath savepath of file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeStorage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        createStorage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Initialises the tasklist using the current storage in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void createStorage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage is ready to use :-)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage already exists, good to go!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Decodes and load all the tasks in the file into the tasklist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasklist to store tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws FileNotFoundException If file does not exist in the proper folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time is given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void reloadStorage(List\u003cTask\u003e tasks) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // decode and add the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            tasks.add(DukeInterpreter.decode(line));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Encodes and save all the tasks from the tasklist into the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasklist to store tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws IOException If an input/output operation fails."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void saveStorage(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            writer.write(DukeInterpreter.encode(task) + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 70
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents an event to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for an event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details event details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param at date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid date or time is provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Event(String details, String at) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method for constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param dateTime date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            at \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string representation of the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 50
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents an event command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the event command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details and time of the event to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public EventCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the event description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the event details, second chunk is at where"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedEvent \u003d afterCommand.split((\"/\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException(\"Format of event recording: event keyword\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \", event instructions, forward slash, at keyword with a colon, start/end time)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. project meeting /at Mon 2-4pm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String details \u003d splittedEvent[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String at \u003d splittedEvent[1].split(\"at\", 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Task newEvent \u003d new Event(details, at);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.addTask(newEvent, taskList.tasksSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 49
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a find/search command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the find command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand search keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public FindCommand(String afterCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException(\"Please enter the keyword!\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String keyword \u003d afterCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // collate the tasks with the keyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (task.getDetails().contains(keyword)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                tempList.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // display those tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.displayTasksWithCommand(tempList, \"find\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 42
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.displayTasksWithCommand(taskList.getTasks(), \"list\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 14
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the system used to parse user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a specific Command to tackle and parse user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param input user\u0027s command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Specific Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid command is provided."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    // main driver function for duke to tackle and parse commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedWords \u003d input.split(\"\\\\s\", 2); // splits string based on whitespace"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String command \u003d splittedWords[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String afterCommand \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedWords.length \u003e 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            afterCommand \u003d splittedWords[1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandType commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d CommandType.valueOf(command.toUpperCase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d CommandType.UNIDENTIFIED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // handle all different commands using switch and enum instead; organised the methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // to make the code look neater"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DoneCommand(afterCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ToDoCommand(afterCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DeadlineCommand(afterCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new EventCommand(afterCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DeleteCommand(afterCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new FindCommand(afterCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case UNIDENTIFIED:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // if a bad command is thrown at Duke"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a command I understand!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 52
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a task to be completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details task details."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task(String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * To indicate that the task is completed (with a tick symbol)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the details of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Task details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.details;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the string representation of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[\" + (isCompleted ? \"✓\" : \"✗\") + \"] \" + details;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 39
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a tasklist to store all the tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Initialise the tasklist with an arraylist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Adds a task to the tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the size of the tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Size of tasklist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public int tasksSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Gets a specific task from the list based on the index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Specific task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task get(int taskIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the tasks stored in the tasklist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return ArrayList inside tasklist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Removes the task from the list based on the index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void delete(int taskIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Indicate task as completed in the tasklist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markTaskCompleted(int taskIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.get(taskIndex).markAsCompleted();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 65
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a todo task to be completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details todo details."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public ToDo(String details) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string representation of the todo task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 21
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a toDo command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the todo command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details of todo command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public ToDoCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the todo description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Task newToDo \u003d new ToDo(afterCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.addTask(newToDo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.addTask(newToDo, taskList.tasksSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the user interface to deal with interactions with the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private final String line \u003d \"----------------------\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Obtains input from the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Provide a format to all responses by Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param input response to be given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void format(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        System.out.println(line + \"\\n\" + input + \"\\n\" + line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Greets the user with an opening message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Hello! I\u0027m\\n\" + logo + \"\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Pattern for printing duke exception messages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param ex DukeException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void throwDukeException(DukeException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(ex.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Prints message upon a new task added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param size current number of tasks in tasklist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void addTask(Task task, int size) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Got it. I\u0027ve added this task:\\n\" + task +  \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Prints completed task upon DONE Command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task completed task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void displayCompletedTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Prints deleted task upon DELETE Command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param size current number of tasks in tasklist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void displayDeletedTask(Task task, int size) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Noted. I\u0027ve removed this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Prints tasks according to LIST/FIND Command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasks to be printed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void displayTasksWithCommand(List\u003cTask\u003e tasks, String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int len \u003d tasks.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (len \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(\"No tasks!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            format(sb.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        sb.append(\"Here are the\" + (command.equals(\"find\") ? \" matching \" : \" \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \"tasks in your list:\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(i + 1 + \".\" + tasks.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(sb.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the scanner used in the UI."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Scanner."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Scanner getScanner() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.sc;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 103
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"Task class: Test for new todo created\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void todoTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task todo \u003d new ToDo(\"snooze\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(\"[T][✗] snooze\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"Task class: Test for checking off events as done\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void doneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task todo \u003d new ToDo(\"sleep\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        todo.markAsCompleted();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(\"[T][✓] sleep\", todo.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"DukeInterpreter class: Test for encoding deadlines/events\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void encodeTest() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task task \u003d new Deadline(\"meeting\", \"2011-10-10 12:30\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String encodedTask \u003d DukeInterpreter.encode(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(\"D | ✗ | meeting | 2011-10-10T12:30\",encodedTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"DukeInterpreter class: Test for decoding deadlines/events\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void decodeTest() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String storedEvent \u003d \"E | ✓ | project meeting | 2011-12-12T08:55\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task event \u003d DukeInterpreter.decode(storedEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(\"[E][✓] project meeting (at: Dec 12 2011 08:55)\", event.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"ByeCommand Class: Test exit command\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void exitTest() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d Parser.parse(\"bye\").isCompleted();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assertEquals(true, isCompleted);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline do project /by Thursday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline watch lecture /by Friday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event hangout with friends /at Sun 1-6pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event watch drama /at Sun 7-9pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 1,
      "-": 20
    }
  }
]
