[
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.DeleteOutOfRangeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.DoneOutOfRangeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyDeadlineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyTodoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDeadlineDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDeleteArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDoneArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingEventDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingFindArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Duke Bot is a program that can schedule tasks and mark them as done, delete"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * and save them on a file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * @author Lim Jin Feng"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * @since   2020-08-20"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs Duke Bot in a given file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param filePath  Where Duke Bot will save it\u0027s tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.ui.sendFailedInitialiseMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Runs Duke Bot."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.sendInitialiseMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.sendBar();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.greet();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.sendBar();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String userInput \u003d this.ui.getUserInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.ui.sendBar();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                if("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                Parser.parseAndExecute(userInput, this.tasks, this.ui)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                ) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    this.storage.save(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (MissingDoneArgumentException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (DoneOutOfRangeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (MissingDeleteArgumentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (DeleteOutOfRangeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (EmptyTodoException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (MissingDeadlineDateException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (EmptyDeadlineException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (MissingEventDateException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (EmptyEventException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(\"\\uD83D\\uDE41 OOPS! Date should be in the format: YYYY-MM-DD\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            } catch (MissingFindArgumentException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                this.ui.sendExceptionMessage(e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.ui.sendBar();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            userInput \u003d this.ui.getUserInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.sendBar();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.bidFarewell();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.ui.sendBar();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        new Duke(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").run();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 100,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.DeleteOutOfRangeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.DoneOutOfRangeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyDeadlineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyEventException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.EmptyTodoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDeadlineDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDeleteArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingDoneArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingEventDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.MissingFindArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Static class that parses user inputs and executes them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Parses and executes user input, adding tasks to given TaskList and output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * messages through given Ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param input  A String of user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param tasks  A TaskList object that the tasks will be modified in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param ui  An Ui object that will display the outputs and collect user inputs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  A Boolean of whether TaskList was updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws MissingDoneArgumentException  If done was input without an argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws DoneOutOfRangeException  If done was input with an argument out of range."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws MissingDeleteArgumentException  If delete was input without an argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws DeleteOutOfRangeException  If delete was input with an argument out of range."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws EmptyTodoException  If todo was input without a description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws MissingDeadlineDateException  If deadline was input without a date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws EmptyDeadlineException  If deadline was input without a description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws MissingEventDateException  If event was input without a date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws EmptyEventException  If event was input without a description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws UnknownCommandException  If input is not recognised by Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws MissingFindArgumentException  If find was input without a keyword."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public static boolean parseAndExecute(String input, TaskList tasks, Ui ui) throws MissingDoneArgumentException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            DoneOutOfRangeException, MissingDeleteArgumentException, DeleteOutOfRangeException, EmptyTodoException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDeadlineDateException, EmptyDeadlineException, MissingEventDateException, EmptyEventException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            UnknownCommandException, MissingFindArgumentException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //DONE PORTION HERE----------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (input.length() \u003e\u003d 4 \u0026\u0026 input.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingDoneArgumentException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(5)) - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (index \u003e\u003d tasks.getCount() || index \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new DoneOutOfRangeException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendMarkedAsDoneMessage("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    tasks.markTaskAsDone(index) //checkthis"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //DELETE PORTION HERE---------------------------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingDeleteArgumentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(7)) - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (index \u003e\u003d tasks.getCount() || index \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new DeleteOutOfRangeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendDeleteTaskMessage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    tasks.deleteTask(index) //checkthis"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendCount(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //TOD0 PORTION HERE-----------------------------------------------------------"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.length() \u003e\u003d 4 \u0026\u0026 input.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String description \u003d input.substring(5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyTodoException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ToDo taskToAdd \u003d new ToDo(description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendAddTaskMessage("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    tasks.addTask(taskToAdd)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendCount(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //DEADLINE PORTION HERE--------------------------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.length() \u003e\u003d 8 \u0026\u0026 input.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            int index \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingDeadlineDateException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003d\u003d 8 || input.indexOf(\"/\") \u003c\u003d 9) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String description \u003d input.substring(9,index-1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String date \u003d input.substring(index+4);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (date.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingDeadlineDateException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            Deadline taskToAdd \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendAddTaskMessage("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    tasks.addTask(taskToAdd)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendCount(tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //EVENT PORTION HERE-----------------------------------------------------------"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            int index \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingEventDateException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003d\u003d 5 || input.indexOf(\"/\") \u003c\u003d 6) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyEventException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String description \u003d input.substring(6,index-1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new EmptyEventException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String date \u003d input.substring(index+4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (date.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingEventDateException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            Event taskToAdd \u003d new Event(description, date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendAddTaskMessage("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    tasks.addTask(taskToAdd)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.sendCount(tasks);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //LIST PORTION HERE------------------------------------------------------------"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.listTasks(tasks);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        //FIND PORTION HERE------------------------------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else if (input.length() \u003e\u003d 4 \u0026\u0026 input.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                throw new MissingFindArgumentException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            String keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            ui.findTasks(tasks, keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 158
    }
  },
  {
    "path": "src/main/java/Duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * A class that defines the file path where tasks will be read from and saved."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    File outputFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    File dir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs a Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param filepath  A String of the file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.outputFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.dir \u003d this.outputFile.getParentFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Loads existing task list from file path, if it exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  An Optional containing a stream of Strings of the lines in the file path, if it exists."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws FileNotFoundException  If erroneous file path is given."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Optional\u003cStream\u003cString\u003e\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (outputFile.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(outputFile));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            return Optional.of(reader.lines());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Saves the given TaskList onto the file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param taskList  the TaskList to be saved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @throws IOException  If the file path is erroneous."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (!this.dir.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            dir.mkdirs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        outputFile.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        FileWriter writer \u003d new FileWriter(outputFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        writer.write(taskList.fileText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 60
    }
  },
  {
    "path": "src/main/java/Duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * A class that stores a list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public int count;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.count \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs a TaskList with pre-existing Tasks from given Optional of a Stream of Strings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param content  Optional of a Stream of Strings with supposed input of the save file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public TaskList(Optional\u003cStream\u003cString\u003e\u003e content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.count \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            content.get().forEach((line) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                System.out.println(\"the thingy\" + line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                char startChar \u003d line.charAt(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                boolean isDone \u003d line.charAt(4) \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                switch (startChar) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    case \u0027T\u0027: {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String description \u003d line.substring(8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        ToDo taskToAdd \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.list.add(taskToAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.count++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    case \u0027D\u0027: {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String descriptionAndDeadline \u003d line.substring(8);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        int stringBreak \u003d descriptionAndDeadline.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String deadline \u003d descriptionAndDeadline.substring(stringBreak + 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String description \u003d descriptionAndDeadline.substring(0, stringBreak - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        Deadline taskToAdd \u003d new Deadline(description, deadline, isDone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.list.add(taskToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.count++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    case \u0027E\u0027: {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String descriptionAndDate \u003d line.substring(8);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        int stringBreak \u003d descriptionAndDate.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String date \u003d descriptionAndDate.substring(stringBreak + 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        String description \u003d descriptionAndDate.substring(0, stringBreak - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        Event taskToAdd \u003d new Event(description, date, isDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.list.add(taskToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        this.count++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Adds a task into the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param task  The task to be added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the task added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.count++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return task.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Marks a task in the TaskList as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param index  The index of the task to be marked as done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the task marked as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.list.get(index).markAsDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.list.get(index).toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Deletes a task from the TaskList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param index  The index of the task to be deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the task deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String deleteTask(int index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String representation \u003d this.list.get(index).toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.count--;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Gets the number of tasks in the TaskList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  int of the number of tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.count;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the TaskList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the TaskList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String representation \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (this.count \u003e 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            for (int i \u003d 0; i \u003c this.count - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                representation +\u003d (i + 1 + \". \" + list.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            representation +\u003d this.count + \". \" + list.get(this.count - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the TaskList that is to be saved on a file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the TaskList that is to be saved on a file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String fileText() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String representation \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (this.count \u003e 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            for (int i \u003d 0; i \u003c this.count - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                representation +\u003d (list.get(i).fileText() + \"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            representation +\u003d list.get(this.count - 1).fileText();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return representation;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Finds all tasks that include keyword in their description."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param keyword  String of word to be queried."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the Tasks that contain the keyword."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String findTasks(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String representation \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (this.count \u003e 0) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            for (int i \u003d 0; i \u003c this.count; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                Task task \u003d list.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                if (task.getDescription().indexOf(keyword) !\u003d -1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                    representation +\u003d (i + 1 + \". \" + list.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jflim98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return representation.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 164
    }
  },
  {
    "path": "src/main/java/Duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * A class that handles interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String BAR \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String GREETING \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String ADD \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String DELETE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String FAILED_INITIALISE \u003d \"Failed to read existing TODO list. Duke will initialise blankly.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private final String FOUND_MESSAGE \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs an Ui object capable of collecting user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Gets the user input. Stops accepting input once user inputs \"bye\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  A String of the user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        String input \u003d this.sc.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            this.sc.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s Initialisation message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendInitialiseMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(\"Hello from\\n\" + this.LOGO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s greeting."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.GREETING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends a long bar of \"-\"s to space out outputs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendBar() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.BAR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s goodbye message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.GOODBYE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s message after adding a task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param taskString  String representation of the task added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendAddTaskMessage(String taskString) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.ADD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(\"  \" + taskString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     Sends Duke\u0027s message after marking a task as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param taskString  String representation of the task marked as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendMarkedAsDoneMessage(String taskString) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.DONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(\"  \" + taskString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s message after deleting a task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param taskString  String representation of the task deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendDeleteTaskMessage(String taskString) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.DELETE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(\"  \" + taskString);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s message if Duke fails to load an existing TaskList from the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendFailedInitialiseMessage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.FAILED_INITIALISE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s message when Duke encounters an exception."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param e  Exception encountered."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendExceptionMessage(Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Overloaded method that sends Duke\u0027s message when Duke encounters an exception with given String message to send."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param message  Message that Duke will send."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendExceptionMessage(String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s formatted list of tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param tasks  TaskList to be sent."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void listTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s formatted tasks that contain the keyword."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param tasks  TaskList to be queried and formatted."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param keyword  Keyword to be queried."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void findTasks(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(this.FOUND_MESSAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(tasks.findTasks(keyword));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Sends Duke\u0027s message of the current number of tasks in the TaskList."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param tasks  TaskLists with tasks to be counted."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendCount(TaskList tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        int count \u003d tasks.getCount();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.out.println(\"Now you have \" + count + (count\u003d\u003d1?\" task \":\" tasks \") + \"in the list.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 149
    }
  },
  {
    "path": "src/main/java/Duke/exception/DeleteOutOfRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued delete input is out of range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class DeleteOutOfRangeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public DeleteOutOfRangeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! Such a task does not exist.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/DoneOutOfRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued done input is out of range."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class DoneOutOfRangeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public DoneOutOfRangeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! Such a task does not exist.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/EmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued deadline input has no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class EmptyDeadlineException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public EmptyDeadlineException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/EmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued event input has no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class EmptyEventException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public EmptyEventException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued todo input has no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class EmptyTodoException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public EmptyTodoException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/MissingDeadlineDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued deadline input has no date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class MissingDeadlineDateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public MissingDeadlineDateException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/MissingDeleteArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued delete input hs no argument."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class MissingDeleteArgumentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public MissingDeleteArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! You have to specify which task you want to delete.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/MissingDoneArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued done input has no argument."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class MissingDoneArgumentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public MissingDoneArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! You have to specify which task you want to mark as done.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/MissingEventDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when issued event input has no date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class MissingEventDateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public MissingEventDateException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/exception/MissingFindArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class MissingFindArgumentException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public MissingFindArgumentException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! You have to add a keyword after find.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 11
    }
  },
  {
    "path": "src/main/java/Duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Thrown when input is not recognised by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(\"\\uD83D\\uDE41 OOPS! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of this exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of this exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 23
    }
  },
  {
    "path": "src/main/java/Duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Represents a deadline that can be added to Duke\u0027s Task List."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs a deadline with given description and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param date  String of the date of the deadline in YYYY-MM-DD format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.date \u003d LocalDate.parse(date, Task.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Overloaded constructor that constructs the deadline with done status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param date  String of the date of the deadline in YYYY-MM-DD format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param isDone  Whether the deadline is already done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Deadline(String description, String date, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.date \u003d LocalDate.parse(date, Task.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(PRINT_DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the deadline to be written to a file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the deadline to be written to a file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String fileText() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"D \" + super.fileText() + \" | \" + this.date.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 50
    }
  },
  {
    "path": "src/main/java/Duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Represents an event that can be added to Duke\u0027s Task List."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs an event with given description and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param date  String of the date of the event in YYYY-MM-DD format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.date \u003d LocalDate.parse(date, Task.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Overloaded constructor that constructs the event with done status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param date  String of the date of the event in YYYY-MM-DD format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param isDone  Whether the event is already done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Event(String description, String date, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.date \u003d LocalDate.parse(date, Task.INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.date.format(PRINT_DATE_TIME_FORMAT) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the event to be written to a file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the event to be written to a file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String fileText() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"E \" + super.fileText() + \" | \" + this.date.format(INPUT_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 50
    }
  },
  {
    "path": "src/main/java/Duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Represents a task that can be added to Duke\u0027s Task List."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public final static DateTimeFormatter INPUT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public final static DateTimeFormatter PRINT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the task with given description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Overloaded constructor that constructs the task with done status."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param isDone  Whether the task is already done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Marks itself as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Gets the description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  Description of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the task to be written to a file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the task to be written to a file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String fileText() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"| \" + (isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 64
    }
  },
  {
    "path": "src/main/java/Duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": " * Represents a ToDo that can be added to Duke\u0027s Task List."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Constructs the ToDo with given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the Todo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * Overloaded constructor that constructs the ToDo with done status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param description  String of the description of the ToDo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @param isDone  Whether the Todo is already done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the ToDo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the ToDo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * String representation of the ToDo to be written to a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     * @return  String representation of the ToDo to be written to a file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public String fileText() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        return \"T \" + super.fileText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 42
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void parseValidTodo_success() throws DeleteOutOfRangeException, UnknownCommandException,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDoneArgumentException, EmptyEventException, MissingEventDateException, EmptyDeadlineException,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDeadlineDateException, DoneOutOfRangeException, MissingDeleteArgumentException, EmptyTodoException,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingFindArgumentException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertEquals(true, Parser.parseAndExecute(\"todo todotest\", new TaskList(), new Ui()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void parseInvalidInput_throwsUnknownCommandException() throws DeleteOutOfRangeException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDoneArgumentException, EmptyEventException, MissingEventDateException, EmptyDeadlineException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDeadlineDateException, DoneOutOfRangeException, MissingDeleteArgumentException, EmptyTodoException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(false, Parser.parseAndExecute(\"lmao xd\", new TaskList(), new Ui()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            fail(); //the test should not reach this line"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (UnknownCommandException | MissingFindArgumentException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(\"\\uD83D\\uDE41 OOPS! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void parseInvalidDeadlineDate_throwsDateTimeParseException() throws DeleteOutOfRangeException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            UnknownCommandException, MissingDoneArgumentException, EmptyEventException, MissingEventDateException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            EmptyDeadlineException, MissingDeadlineDateException, DoneOutOfRangeException, MissingDeleteArgumentException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            EmptyTodoException, MissingFindArgumentException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(false, Parser.parseAndExecute(\"deadline test /by xddd\", new TaskList(), new Ui()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            fail(); //the test should not reach this line"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(\"java.time.format.DateTimeParseException: Text \u0027xddd\u0027 could not be parsed at index 0\", e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void parseInvalidEventEmptyDescription_throwsEmptyEventException() throws DeleteOutOfRangeException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            UnknownCommandException, MissingDoneArgumentException, MissingEventDateException, EmptyDeadlineException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingDeadlineDateException, DoneOutOfRangeException, MissingDeleteArgumentException, EmptyTodoException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            MissingFindArgumentException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(false, Parser.parseAndExecute(\"event /at 2020-10-12\", new TaskList(), new Ui()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            fail(); //the test should not reach this line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        } catch (EmptyEventException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jflim98"
        },
        "content": "            assertEquals(\"\\uD83D\\uDE41 OOPS! The description of an event cannot be empty.\", e.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 57
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jflim98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jflim98"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void greet_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        new Ui().greet();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertEquals(\"Hello! I\u0027m Duke\\nWhat can I do for you?\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    public void sendBar_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        new Ui().sendBar();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        assertEquals(\"____________________________________________________________\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jflim98"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jflim98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jflim98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jflim98": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jflim98"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jflim98"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jflim98"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jflim98"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jflim98"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jflim98"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jflim98": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jflim98"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jflim98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jflim98": 3,
      "-": 20
    }
  }
]
