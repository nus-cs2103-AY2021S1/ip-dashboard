[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This generated file contains a sample Java project to get you started."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Apply the java plugin to add support for Java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Apply the application plugin to add support for building a CLI application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use jcenter for resolving dependencies."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // You can declare any Maven/Ivy/file repository here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // This dependency is used by the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation \u0027com.google.guava:guava:29.0-jre\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use JUnit Jupiter API for testing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use JUnit Jupiter Engine for testing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Define the main class for the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    mainClassName \u003d \u0027src.App\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use junit platform for unit tests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "run {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 55
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if exist \"%JAVA_EXE%\" goto execute"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":end"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 89
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.6.1/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 10
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.backend.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.frontend.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.frontend.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Runs the main method that in turn instantiates and runs the Duke object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * The program is a CLI Application that allows users to:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eAdd new tasks (Deadline, Event or Todo)\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eView a list of their tasks\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eMark tasks as done\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eDelete tasks\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eSave tasks in the hard disk automatically\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jeffry Lum"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jiachen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jeanne Toh"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error: file not created. \" + e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        parser.parseInputCommands();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Ui.exit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a new instance of Duke that saves tasks to filePath \"./data/saved-tasks.txt\" and runs it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param args unused."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        new Duke(\"./data/saved-tasks.txt\").run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 52,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/backend/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with loadings tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance Storage object, that loads and saves tasks to file specified by filePath."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * If file and/or parent directories does not exist yet, creates them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param filePath Specifies pathname of file to save tasks to and load tasks from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void createFile(File file) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String dir \u003d file.getParent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            File dirFile \u003d new File(dir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Create file and parent directories if they do not exist yet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            dirFile.mkdirs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Loads file into a BufferedReader and returns the BufferedReader for use by TaskList to populate the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return BufferedReader reading from saved task file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @throws FileNotFoundException If file of the Storage object is not found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public BufferedReader load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FileReader f \u003d new FileReader(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new BufferedReader(f);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Saves Tasks from taskList onto hard drive."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overwrites saved txt file each time with updated values."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskList TaskList containing list of tasks to save."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Delete old saved file if it exists"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            boolean isDeleted \u003d file.delete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (isDeleted) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                createFile(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Write tasks to new file overwriting the old file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            List\u003cTask\u003e tl \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            for (Task t : tl) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                fw.write(t.getParsedTask());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error writing to file: \" + e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 80
    }
  },
  {
    "path": "src/main/java/duke/frontend/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with parsing and making sense of user commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String DASH_LINE \u003d \"--------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Parser that adds, retrieves and delete tasks from taskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskList taskList that contains and handles the user\u0027s list of Tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Parses user input commands and handles them appropriately."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Feedbacks to user if commands are not understandable/ in the wrong format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the following command types: bye, done, delete, todo, deadline and event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void parseInputCommands() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String next \u003d sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // \"bye\" breaks the while loop and causes the program to exit()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        while (!next.equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String[] splitNext \u003d next.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // \"list\" prints the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (next.equals(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                taskList.list();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // \"done\" checks off boxes, need to check for input errors"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    taskList.markTaskAsDone(splitNext[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(DASH_LINE + \"\\n\\u2639 Please indicate which task you\u0027d like to check off!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // to \"delete\" tasks from the taskList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    taskList.deleteTask(splitNext[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(DASH_LINE + \"\\n\\u2639 Please indicate which task you\u0027d like to delete!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                if (splitNext.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    taskList.find(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    taskList.find(splitNext[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // for ToDos, Deadlines, Events"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"todo\") || splitNext[0].equals(\"deadline\") || splitNext[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    taskList.add(next, false, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(DASH_LINE + \"\\n\\u2639 \" + ex.getMessage() + \"\\n\" + DASH_LINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                System.out.println(DASH_LINE + \"\\n\\u2639 Sorry I don\u0027t know what that means!\\n\" + DASH_LINE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            next \u003d sc.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 77
    }
  },
  {
    "path": "src/main/java/duke/frontend/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.frontend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with basic interaction with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Contains methods that greets user on start and exit of program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String STAR_LINE \u003d \"**************************************************************************\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String LOGO \u003d \" ____        _   \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints welcome greeting to user at start of program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(STAR_LINE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nWelcome! I am\\n\" + LOGO"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nHere are some magic words to get you going:\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo add a todo, say \u0027todo \u003ctask description\u003e\u0027.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo add a deadline, say \u0027deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\u0027.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo add an event, say \u0027event \u003cevent description\u003e /at \u003cevent location\u003e\u0027\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo view your tasks, say \u0027list\u0027.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo check off a task, say \u0027done \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nTo leave, say \u0027bye\u0027.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + STAR_LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints farewell greeting to user at end of program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(\" _____  ___  ___  _____\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"|  __ \\\\ \\\\  \\\\/  / |  ___|\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"| | / /  \\\\    /  |  |__\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"| | \\\\ \\\\   |  |   |  ___|\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"| |_/ /   |  |   |  |__\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"|____/    |__|   |_____|\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(\"Hope you have a productive day ahead! :))\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Deadline object which inherits from Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Deadline object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param by Due date for task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS! The deadline in an incorrect format! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"Please indicate the date as \u003cyyyy-mm-dd\u003e\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Deadline object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"deadline \" + description + \" /by \" + by + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object and Task equals method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Deadline object with the same description, by and isDone fields. False otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherDeadline.description)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 isDone \u003d\u003d otherDeadline.isDone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 by.equals(otherDeadline.by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Deadline object which inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Event object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param at Location of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether event is done or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Event object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"event \" + description + \" /at \" + at + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object and Task equals method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also an Event object with the same description, at and isDone fields. False otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 isDone \u003d\u003d otherEvent.isDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 at.equals(otherEvent.at);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents an abstract Task object. Inherited by Deadline, Event and Todo classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DEADLINE(\"deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        EVENT(\"event \u003cevent description\u003e /at \u003cevent location\u003e\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TODO(\"todo \u003ctask description\u003e\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final String format;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskType(String format) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.format \u003d format;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String getFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return this.format;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns format of command to add a specific task type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskTypeString String indicating task type (event, deadline or todo)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Format of command to add task of type as specified by taskTypeString."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String getFormat(String taskTypeString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return TaskType.valueOf(taskTypeString.toUpperCase()).getFormat();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns task in String format that is suitable for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of task in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract String getParsedTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns checkbox with tick/cross representing if task is done (tick) or not (cross)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String representing checkbox with unicode character CHECK MARK (U+2713) if task is done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or HEAVY BALLOT X (U+2718) if task is not done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getCheckBox() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return \"[\\u2713]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return \"[\\u2718]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setDoneAsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return getCheckBox() + \" \" + description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object equals method."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Task object with the same description and isDone fields. False otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherTask.description) \u0026\u0026 isDone \u003d\u003d otherTask.isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 87
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Contains and handles the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String STAR_LINE \u003d \"**************************************************************************\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of TaskList with an empty task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of TaskList populated with saved tasks read from BufferedReader."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param bufferedReader Reader that reads from a saved file with previously saved tasks, if such a file exists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TaskList(BufferedReader bufferedReader) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            boolean isFileCorrupted \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(bufferedReader.readLine());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    add(line, isDone, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    if (!isFileCorrupted) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        System.out.println(STAR_LINE + \"WARNING: Your stored data appears to be in a corrupted format. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                + \"Some tasks may be lost.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        isFileCorrupted \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error populating task list with saved tasks: \" + e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the task list containing the user\u0027s task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return List containing the user\u0027s Task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void printList(List\u003cTask\u003e list, String listObjectDescription) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(STAR_LINE + String.format(\"\\nHere are the %s in your list:\", listObjectDescription));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            printTask(i + 1, list.get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(STAR_LINE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints a list of the user\u0027s tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        printList(list, \"tasks\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints a specific task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndex Index of the task as shown in the printed list (starting from 1)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void printTask(int listIndex, Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String taskString \u003d String.format(\"%d.%s\", listIndex, task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(taskString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints the task added and number of tasks in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param task The task added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void echo(String task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(\"added: \" + task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void throwEmptyFieldException(String taskType, String ... fields) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StringBuilder emptyFields \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        boolean isFirstField \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (String field: fields) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (isFirstField) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                emptyFields.append(field);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                isFirstField \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                emptyFields.append(\"/\").append(field);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new IllegalArgumentException(\"OOPS! The \" + emptyFields + \" of \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void throwInvalidTaskSyntaxException(String taskType) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new IllegalArgumentException(String.format(\"OOPS! Invalid syntax. To add a %s, use:\\n%s\", taskType,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task.getFormat(taskType)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void addTaskToList(Task task, boolean shouldEcho) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (shouldEcho) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            echo(task.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles user input command related to adding new task to the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Throws errors to be caught and handled by parser if user input commands are in an invalid format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param input User input command for adding the task (unprocessed)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param shouldEcho Whether or not to echo the task added."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void add(String input, boolean isDone, boolean shouldEcho) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String[] splitInput \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String taskType \u003d splitInput[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"todo (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Todo(splitInput[1], isDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"todo\\\\s?\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"todo\", \"description\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"todo\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"deadline (\\\\S+\\\\s?)+ /by (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String[] splitDeadline \u003d splitInput[1].split(\" /by \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String deadlineDesc \u003d splitDeadline[0];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String by \u003d splitDeadline[1];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Deadline(deadlineDesc, by, isDone);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"deadline\\\\s?\") || !input.contains(\" by \")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"deadline\", \"description\", \"date\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"deadline\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"event (\\\\S+\\\\s?)+ /at (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String[] splitEvent \u003d splitInput[1].split(\" /at \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String eventDesc \u003d splitEvent[0];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String at \u003d splitEvent[1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Event(eventDesc, at, isDone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"event\\\\s?\") || !input.contains(\" at \")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"event\", \"description\", \"location\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"event\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS! There is no task of type \" + taskType + \"!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the marking of tasks in the list as done. Feedbacks to user if list index of task is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndexString List index of task to mark as done (starting from 1)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void markTaskAsDone(String listIndexString) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            int listIndexNumber \u003d Integer.parseInt(listIndexString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task task \u003d list.get(listIndexNumber - 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            task.setDoneAsTrue();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) { // if list index is not in the list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"OOPS! This task index does not exist! Type \u0027list\u0027 to check out your tasks.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (NumberFormatException ex) { // if list index string is not an integer"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"OOPS! The keyword \u0027done\u0027 is used to check off tasks as follows:\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"   done \u003ctask index\u003e\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the deleting of tasks from task list. Feedbacks to user if list index of task is invalid."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndexString List index of task to delete (starting from 1)."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void deleteTask(String listIndexString) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            int listIndexNumber \u003d Integer.parseInt(listIndexString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task task \u003d list.get(listIndexNumber - 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            list.remove(listIndexNumber - 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"The following task has been deleted:\\n\" + task);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"OOPS! This task index does not exist! Type \u0027list\u0027 to check out your tasks.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (NumberFormatException ex) { // if list index string is not an integer"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"OOPS! The keyword \u0027delete\u0027 is used to delete tasks as follows:\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"   delete \u003ctask index\u003e\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a list of Task with descriptions containing the keyword."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param keyword The keyword used to filter Task descriptions."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return A list of Task with descriptions containing the keyword."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public List\u003cTask\u003e find(String keyword) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        printList(matchingTasks, \"matching tasks\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 225
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Todo object which inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Todo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Todo object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"todo \" + description + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object equals method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Todo object with the same description and isDone fields. False otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Todo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherTodo.description) \u0026\u0026 (isDone \u003d\u003d otherTodo.isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 47
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Write paper\", \"2022-01-21\", true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", deadline1.description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(LocalDate.parse(\"2020-12-12\"), deadline1.by);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, deadline1.isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", deadline2.description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(LocalDate.parse(\"2022-01-21\"), deadline2.by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, deadline2.isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void invalidDateConstructorTest1() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with incorrect arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Eat Ice cream\", \"2023-90-23\", true));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void invalidDateConstructorTest2() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Do work\", \"wrong date\", false));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"deadline Eat Apple /by 2020-12-12\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, deadline.getParsedTask());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[D][\\u2713] Eat Apple (by: Dec 12 2020)\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, deadline.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(deadline1.equals(deadline2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 60
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event1 \u003d new Event(\"Eat Apple\", \"NUS\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event2 \u003d new Event(\"Write paper\", \"Matt\u0027s House\", true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", event1.description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"NUS\", event1.at);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, event1.isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", event2.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Matt\u0027s House\", event2.at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, event2.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"event Eat Apple /at NUS\" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, event.getParsedTask());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[E][\\u2713] Eat Apple (at: NUS)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, event.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event1 \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event2 \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(event1.equals(event2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 45
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public enum SampleTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DEADLINE(\"deadline Math Test /by 2020-08-31\", true,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Math Test\", \"2020-08-31\", true)),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        EVENT(\"event Pool Party /at Matt\u0027s House\", false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Event(\"Pool Party\", \"Matt\u0027s House\", false)),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TODO(\"todo Write English Essay\", false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Todo(\"Write English Essay\", false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        SampleTask(String command, boolean isDone, Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String getStoredString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return this.command + System.lineSeparator() + this.isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String getCorrectFormatSampleData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sample : SampleTask.values()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            data.append(sample.getStoredString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cTask\u003e getCorrectFormatExpectedTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sample : SampleTask.values()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList.add(sample.task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void emptyConstructorTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), taskList.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addCorrectFormatTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sampleTask : SampleTask.values()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList.add(sampleTask.command, sampleTask.isDone, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(getCorrectFormatExpectedTaskList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void correctFormatBufferedReaderConstuctorTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(getCorrectFormatExpectedTaskList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void markTaskAsDoneTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        taskList.markTaskAsDone(\"1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"[\\u2713]\", taskList.getTaskList().get(0).getCheckBox());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void deleteTaskTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        taskList.deleteTask(\"2\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e expectedTaskList \u003d getCorrectFormatExpectedTaskList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedTaskList.remove(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedTaskList, taskList.getTaskList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 92
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getFormatTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\", Task.getFormat(\"deadline\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"event \u003cevent description\u003e /at \u003cevent location\u003e\", Task.getFormat(\"event\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"todo \u003ctask description\u003e\", Task.getFormat(\"todo\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 15
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo1 \u003d new Todo(\"Eat Apple\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo2 \u003d new Todo(\"Write paper\", true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", todo1.description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, todo1.isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", todo2.description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, todo2.isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"todo Eat Apple\" + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, todo.getParsedTask());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[T][\\u2713] Eat Apple\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, todo.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo1 \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo2 \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(todo1.equals(todo2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo eat chocolate"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline project /by 2020-05-22"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event meeting tomorrow /at home"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event run a marathon /at sentosa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline code website /by tonight"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo write book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo wash dishes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event book event /at library"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete this task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "find book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "find"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete 8"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event event without location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline deadline without date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if ! javac -cp ../src/main/java/duke/*/*.java -Xlint:none -d ../bin ../src/main/java/*.java ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "# delete created \"data\" folder and \"saved-tasks.txt\" file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rm -r data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "cp ACTUAL.TXT ACTUAL-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "dos2unix ACTUAL-UNIX.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "diff ACTUAL-UNIX.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 9,
      "-": 35
    }
  }
]
