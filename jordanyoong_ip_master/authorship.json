[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "E | 0 | CS2103 submission | 2019-02-02 8am"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "T | 0 | read newspaper"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 4
    }
  },
  {
    "path": "data/test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "T | 0 | read book"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 1
    }
  },
  {
    "path": "data/test1check.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "T | 0 | read book"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 1
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 1,
      "-": 103
    }
  },
  {
    "path": "src/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Deadline(String description){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Deadline(String description, LocalDate date, String duration) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description, date, duration);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String print \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return duration \u003d\u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                ? \"[D]\" + super.toString() + \" (by: \" + print + \")\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                : \"[D]\" + super.toString() + \" (by: \" + print + \" \" + duration + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 25
    }
  },
  {
    "path": "src/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    //private TaskList tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Method to initialize a Chatbot instance and start the bot. Catch errors specific to the bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            ui.chat();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        } catch (DukeException | IOException ex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 16,
      "-": 4
    }
  },
  {
    "path": "src/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 11
    }
  },
  {
    "path": "src/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void Test1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            String textDir \u003d dir + \"/data/test1.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            Storage file \u003d new Storage(textDir);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            Todo test \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            ArrayList\u003cTask\u003e arr \u003d file.load();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            assertEquals(arr.get(0).toString(), (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void Test2() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        arr.add(new Task(\"Hello World!\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        System.out.println(arr.get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 29
    }
  },
  {
    "path": "src/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Event(String description, LocalDate date, String duration) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description, date, duration);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String print \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return duration \u003d\u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                ? \"[D]\" + super.toString() + \" (at: \" + print + \")\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                : \"[D]\" + super.toString() + \" (at: \" + print + \" \" + duration.toString() + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 25
    }
  },
  {
    "path": "src/FileClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class FileClass {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public static void createFile(String filename) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        File f \u003d new File(filename);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        System.out.println(\"full path: \" + f.getAbsolutePath());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        System.out.println(\"file exists?: \" + f.exists());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        System.out.println(\"is Directory?: \" + f.isDirectory());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private static void printFileHelper(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            System.out.println(s.nextLine());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public static void printFileContents(String filename) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            printFileHelper(filename);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    private static void writeToFileHelper(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public static void writeToFile(String filename) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            writeToFileHelper(filename, \"first line\" + System.lineSeparator() + \"second line\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 46
    }
  },
  {
    "path": "src/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected Storage file;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected TaskList tList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Parser(Storage file, TaskList tList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.tList \u003d tList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void parse() throws DukeException, IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tList.getArr();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Main logic, take in input from scanner and process accordingly"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            Scanner scan \u003d new Scanner(line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            String in \u003d scan.next();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            if (in.equals(\"bye\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"list\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                for (int j \u003d 1; j \u003c\u003d arr.size(); j++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String output \u003d j + \". \" + arr.get(j - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    System.out.println(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"done\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                int ind \u003d scan.nextInt() - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                arr.get(ind).markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(arr.get(ind));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"delete\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                int ind \u003d scan.nextInt() - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(arr.get(ind));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                arr.remove(ind);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"todo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (!scan.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String desc \u003d scan.nextLine().substring(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Todo curr \u003d new Todo(desc);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(curr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                arr.add(curr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (!scan.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String desc \u003d scan.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String word \u003d scan.next();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                while (word.indexOf(\u0027/\u0027) \u003c 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    desc +\u003d \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    desc +\u003d word;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    word \u003d scan.next();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String dtString \u003d (scan.nextLine()).substring(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Scanner dT \u003d new Scanner(dtString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dT.next());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Deadline curr;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (dT.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String duration \u003d dT.next();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    curr \u003d new Deadline(desc, date, duration);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    curr \u003d new Deadline(desc, date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(curr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                arr.add(curr);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"event\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (!scan.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String desc \u003d scan.next();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String word \u003d scan.next();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                while (word.indexOf(\u0027/\u0027) \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    desc +\u003d \" \";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    desc +\u003d word;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    word \u003d scan.next();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String dtString \u003d (scan.nextLine()).substring(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Scanner dT \u003d new Scanner(dtString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dT.next());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Event curr;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (dT.hasNext()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String duration \u003d dT.next();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    curr \u003d new Event(desc, date, duration);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    curr \u003d new Event(desc, date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(curr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                arr.add(curr);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Now you have \" + arr.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (in.equals(\"find\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String match \u003d scan.nextLine().substring(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                for (int j \u003d 1; j \u003c\u003d arr.size(); j++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Task curr \u003d arr.get(j - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    if (curr.description.contains(match)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        String output \u003d j + \". \" + curr;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        System.out.println(output);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            file.saveData(arr);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 120
    }
  },
  {
    "path": "src/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected ArrayList\u003cTask\u003e arr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.arr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        File data \u003d new File(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Check if duke.txt exists, if not create file and retrieve data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        if (!data.exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            data.createNewFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            Scanner read \u003d new Scanner(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            while (read.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String currLine \u003d read.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                Scanner cL \u003d new Scanner(currLine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String type \u003d cL.next();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                cL.next();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String isDone \u003d cL.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                cL.next();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Todo toAdd \u003d new Todo(cL.nextLine().substring(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        toAdd.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    arr.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String desc \u003d cL.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String add \u003d cL.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    while (!add.equals(\"|\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        desc \u003d desc + \" \" + add;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        add \u003d cL.next();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String dtString \u003d (cL.nextLine()).substring(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Scanner dT \u003d new Scanner(dtString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(dT.next());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Deadline curr;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    if (dT.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        String duration \u003d dT.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        curr \u003d new Deadline(desc, date, duration);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        curr \u003d new Deadline(desc, date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String desc \u003d cL.next();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String add \u003d cL.next();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    while (!add.equals(\"|\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        desc \u003d desc + \" \" + add;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        add \u003d cL.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    String dtString \u003d (cL.nextLine()).substring(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Scanner dT \u003d new Scanner(dtString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(dT.next());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    Event curr;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    if (dT.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        String duration \u003d dT.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        curr \u003d new Event(desc, date, duration);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                        curr \u003d new Event(desc, date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    arr.add(curr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Function to write data to txt file. Processes the instances and then converts to String to be written."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * @param array"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e array) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        for (Task curr : array) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            String toWrite \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            if (curr instanceof Todo) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String state \u003d curr.isDone ? \" | 1 | \" : \" | 0 | \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                toWrite \u003d \"T\" + state + curr.description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (curr instanceof Deadline) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String state \u003d curr.isDone ? \" | 1 | \" : \" | 0 | \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                toWrite \u003d \"D\" + state + curr.description + \" | \" + curr.date;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (curr.duration !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    toWrite \u003d toWrite + \" \" + curr.duration;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            } else if (curr instanceof Event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                String state \u003d curr.isDone ? \" | 1 | \" : \" | 0 | \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                toWrite \u003d \"E\" + state + curr.description + \" | \" + curr.date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                if (curr.duration !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                    toWrite \u003d toWrite + \" \" + curr.duration;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            assert toWrite !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            fw.write(toWrite);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 112
    }
  },
  {
    "path": "src/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Task(String description, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Task(String description, LocalDate date, String duration) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 39
    }
  },
  {
    "path": "src/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    protected ArrayList\u003cTask\u003e arr;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.arr \u003d arr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        this.arr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public ArrayList\u003cTask\u003e getArr() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 19
    }
  },
  {
    "path": "src/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 11
    }
  },
  {
    "path": "src/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Method to start the Chatbot and also read/save the history of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * Contains all the logic that processes the incoming messages from the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    public void chat() throws DukeException, IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Initialize Bot and print Welcome Message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String start \u003d \"Hello! I\u0027m Duke \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        System.out.println(start);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Get relative directory \u0026 init"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        String textDir \u003d dir + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Storage file \u003d new Storage(textDir);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d file.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        // Parse"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        TaskList tList \u003d new TaskList(arr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        Parser input \u003d new Parser(file, tList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "        input.parse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\jorda\\CS2103\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jordanyoong"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT\""
      }
    ],
    "authorContributionMap": {
      "jordanyoong": 6,
      "-": 17
    }
  }
]
