[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    archiveBaseName \u003d \"Duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    archiveClassifier \u003d \"0.1\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 18,
      "-": 42
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Duke is a **desktop app for tracking down todos, deadlines and events for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Duke can get your tasks management done faster than traditional GUI apps."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* [Quick Start](https://github.com/FH-30/ip/blob/master/docs/README.md#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* [Features](https://github.com/FH-30/ip/blob/master/docs/README.md#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Adding a task](https://github.com/FH-30/ip/blob/master/docs/README.md#adding-a-task)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t\t* [Adding a todo: `todo`](https://github.com/FH-30/ip/blob/master/docs/README.md#adding-a-todo-todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t\t* [Adding a deadline: `deadline`](https://github.com/FH-30/ip/blob/master/docs/README.md#adding-a-deadline-deadline)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t\t* [Adding an event: `event`](https://github.com/FH-30/ip/blob/master/docs/README.md#adding-an-event-event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Marking a task as done: `done`](https://github.com/FH-30/ip/blob/master/docs/README.md#marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Listing all tasks: `list`](https://github.com/FH-30/ip/blob/master/docs/README.md#listing-all-tasks-list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Locating a task by name: `find`](https://github.com/FH-30/ip/blob/master/docs/README.md#locating-a-task-by-name-find)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Displaying all tasks on a specific date: `tasks on`](https://github.com/FH-30/ip/blob/master/docs/README.md#displaying-all-tasks-on-a-specific-date-tasks-on)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Archiving a task: `archive`](https://github.com/FH-30/ip/blob/master/docs/README.md#archiving-a-task-archive)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Unarchiving a task: `unarchive`](https://github.com/FH-30/ip/blob/master/docs/README.md#unarchiving-a-task-unarchive)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Deleting a task: `delete`](https://github.com/FH-30/ip/blob/master/docs/README.md#deleting-a-task-delete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* [Exiting the program: `bye`](https://github.com/FH-30/ip/blob/master/docs/README.md#exiting-the-program-bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "* [Command Summary](https://github.com/FH-30/ip/blob/master/docs/README.md#command-summary)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "2. Download the latest Duke.jar from here."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your AddressBook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. **If not able to, you can open terminal in that directory and run: `java -jar \u003cfilename\u003e`**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "![Duke GUI](https://github.com/FH-30/ip/blob/master/docs/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "5. Type the command in the command box and press Enter or click Send to execute it. e.g. typing `list` and pressing Enter or clicking Send will list all your current tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `todo wash car` : Adds a task called wash car into your list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `done 1`: Marks the 1st task in the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `delete 1`: Deletes the 1st task in the current list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `bye`: Exits the app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "6. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Adding a task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "#### Adding a todo: `todo`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Adds a task to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `todo TASK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `todo wash car`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `todo clean house`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "#### Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Adds a deadline to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `deadline TASK /by dd/mm/yyyy hh:mm`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* deadline return book /by 22/08/2020 18:00"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* deadline finish project /by 25/08/2020 20:00"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "#### Adding an event: `event`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Adds an event to the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `event TASK /at dd/mm/yyyy hh:mm`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* event attend seminar /at 23/09/2020 13:00"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* event project meeting /at 26/09/2020 20:00"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Marks a task in the list as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format `done INDEX`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `done 1`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `done 2`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Listing all tasks: `list`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Shows a list of all Tasks in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Additional tags:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t1. `-a`: Includes archived tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `list`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `list -a`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "###  Locating a task by name: `find`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Finds tasks whose description contains the given keyword."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `find project`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `find wedding`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Displaying all tasks on a specific date: `tasks on`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Displays all tasks that occur on the given date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `tasks on dd/mm/yyyy`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `tasks on 15/09/2020`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `tasks on 27/08/2020`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Archiving a task: `archive`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Archives a task in the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `archive 1`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `archive 2`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Unarchiving a task: `unarchive`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Unarchives a task in the archived list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `unarchive INDEX`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `unarchive 1`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `unarchive 2`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Deletes a task in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `delete 1`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\t* `delete 2`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Fomrat: `bye`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Duke data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": "### Command summary"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FH-30"
        },
        "content": "-------|-------"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FH-30"
        },
        "content": "todo | `todo TASK`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline | `deadline TASK /by dd/mm/yyyy hh:mm`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event | `event TASK /at dd/mm/yyyy hh:mm`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done | `done INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list | `list` or `list -a` to include archived tasks"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "find | `find KEYWORD`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "tasks on | `tasks on dd/mm/yyyy`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "archive | `archive INDEX`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": "unarchive | `unarchive INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete | `delete INDEX`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": "bye | `bye`"
      }
    ],
    "authorContributionMap": {
      "FH-30": 162,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a CLI Program known as Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * @author Francis Hodianto"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String DEFAULT_ARCHIVED_PATH \u003d \"data/archivedTasks.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static final String DEFAULT_MAIN_TASKS_PATH \u003d \"data/mainTasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TaskList mainTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TaskList archivedTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param unarchivedFilePath The path of the file used for storing saved tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Duke(String unarchivedFilePath, String archivedFilePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            storage \u003d new Storage(unarchivedFilePath, archivedFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            archivedTasks \u003d new TaskList(storage.load(true));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            mainTasks \u003d new TaskList(storage.load(false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            archivedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            mainTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            storage \u003d new Storage(DEFAULT_MAIN_TASKS_PATH, DEFAULT_ARCHIVED_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            archivedTasks \u003d new TaskList(storage.load(true));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            mainTasks \u003d new TaskList(storage.load(false));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            archivedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            mainTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Gives the user responses based on the user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return A string representing Duke\u0027s response to the user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert command !\u003d null : \"command should not be null\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return command.execute(mainTasks, archivedTasks, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Initiates Duke on the command line."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                assert command !\u003d null : \"command should not be null\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showMessage(command.execute(mainTasks, archivedTasks, storage));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        new Duke(DEFAULT_MAIN_TASKS_PATH, DEFAULT_ARCHIVED_PATH).run();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 95,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import ui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 13
    }
  },
  {
    "path": "src/main/java/Duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.ArchiveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DoNothingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.TasksOnCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.UnarchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Parser which helps make any sense of the input from the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Converts the input from the user into a Command understandable by Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param command String input from user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return A Command that Duke can execute."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when input from user is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String input \u003d command.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getByeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getDoneCommand(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getDeleteCommand(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getListCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getFindCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"tasks on\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getTasksOnCommand(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"archive\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getArchiveCommand(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"unarchive\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getUnarchiveCommand(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"todo\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || input.startsWith(\"deadline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                || input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getAddCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new DoNothingCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static AddCommand getAddCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            newTask \u003d getTodo(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            newTask \u003d getDeadline(input, dateFormat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            newTask \u003d getEvent(input, dateFormat);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Unidentified Add Command\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new AddCommand(newTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static Task getEvent(String input, DateTimeFormatter dateFormat) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String eventDescription;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        LocalDateTime dateOfEvent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String[] inputComponents \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDescription \u003d inputComponents[0].length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDescription \u003d hasNoDescription || inputComponents[0].substring(6).isBlank();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDescription) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDate \u003d inputComponents.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDate \u003d hasNoDate || inputComponents[1].isBlank();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            dateOfEvent \u003d LocalDateTime.parse(inputComponents[1].trim(), dateFormat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Date should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        eventDescription \u003d inputComponents[0].substring(6).trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Event(eventDescription, dateOfEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static Task getDeadline(String input, DateTimeFormatter dateFormat) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String deadlineDescription;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String[] inputComponents \u003d input.split(\" /by \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDescription \u003d inputComponents[0].length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDescription \u003d hasNoDescription || inputComponents[0].substring(9).isBlank();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDescription) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDate \u003d inputComponents.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDate \u003d hasNoDate || inputComponents[1].isBlank();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            deadlineDate \u003d LocalDateTime.parse(inputComponents[1].trim(), dateFormat);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Date should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        deadlineDescription \u003d inputComponents[0].substring(9).trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Deadline(deadlineDescription, deadlineDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static Task getTodo(String input) throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String todoDescription;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDescription \u003d input.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDescription \u003d hasNoDescription || input.substring(5).isBlank();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDescription) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        todoDescription \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new Todo(todoDescription);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static TasksOnCommand getTasksOnCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoDate \u003d input.length() \u003d\u003d 8;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankDate \u003d hasNoDate || input.substring(9).isBlank();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankDate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Need to specify the date of the tasks\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String dateOfTask \u003d input.substring(9).trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            date \u003d LocalDate.parse(dateOfTask, dateFormat);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Date should be in format dd/mm/yyyy\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new TasksOnCommand(date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static FindCommand getFindCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoKeyword \u003d input.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankKeyword \u003d hasNoKeyword || input.substring(5).isBlank();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankKeyword) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"No keyword specified.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String keywordToFind \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new FindCommand(keywordToFind);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static ListCommand getListCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasHyphenA \u003d input.contains(\"-a\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasTrailingCharacters \u003d input.length() \u003e 4;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasTrailingCharacters \u0026\u0026 !hasHyphenA) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Do you mean list -a?\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new ListCommand(hasHyphenA);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static DeleteCommand getDeleteCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoTaskNumber \u003d input.length() \u003d\u003d 6;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankTaskNumber \u003d hasNoTaskNumber || input.substring(7).isBlank();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankTaskNumber) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"No task number specified.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Task number format invalid, \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    + \"must be a number.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static Command getArchiveCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoTaskNumber \u003d input.length() \u003d\u003d 7;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankTaskNumber \u003d hasNoTaskNumber || input.substring(8).isBlank();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankTaskNumber) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"No task number specified.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(8).trim()) - 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Task number format invalid, \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    + \"must be a number.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new ArchiveCommand(taskNumber);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static Command getUnarchiveCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoTaskNumber \u003d input.length() \u003d\u003d 9;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankTaskNumber \u003d hasNoTaskNumber || input.substring(10).isBlank();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankTaskNumber) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"No task number specified.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(10).trim()) - 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Task number format invalid, \""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    + \"must be a number.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new UnarchiveCommand(taskNumber);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static ByeCommand getByeCommand() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private static DoneCommand getDoneCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNoTaskNumber \u003d input.length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasBlankTaskNumber \u003d hasNoTaskNumber || input.substring(5).isBlank();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasBlankTaskNumber) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"No task number specified.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(5).trim()) - 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"Task number format invalid, \""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    + \"must be a number.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 269
    }
  },
  {
    "path": "src/main/java/Duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Storage where the tasks of the user are stored in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private File mainTasksFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private File archivedTasksFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Storage instance containing the filepath leading to it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param unarchivedTasksFilePath Filepath leading to Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Storage(String unarchivedTasksFilePath, String archivedTasksFilePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.mainTasksFile \u003d new File(unarchivedTasksFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.archivedTasksFile \u003d new File(archivedTasksFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Loads the data from the file in the filepath into an ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return An ArrayList containing data of the user\u0027s previous tasks inputted into Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when it couldn\u0027t locate the file in the specified file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ArrayList\u003cTask\u003e load(boolean isArchive) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            File fileToLoadFrom;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (isArchive) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                fileToLoadFrom \u003d this.archivedTasksFile;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                fileToLoadFrom \u003d this.mainTasksFile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Scanner loadedData \u003d new Scanner(fileToLoadFrom);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            while (loadedData.hasNextLine()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String[] taskParts \u003d loadedData.nextLine().split(\"~\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                assert taskParts.length \u003e\u003d 3 : \"Data format of database invalid\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String identifier \u003d taskParts[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String desc \u003d taskParts[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                LocalDateTime timing \u003d taskParts.length \u003d\u003d 3 ? null : LocalDateTime.parse(taskParts[3]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                boolean isDone \u003d Boolean.parseBoolean(taskParts[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Task savedTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (identifier.equals(\"T\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Todo(desc, isDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } else if (identifier.equals(\"D\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Deadline(desc, timing, isDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Event(desc, timing, isDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                tasks.add(savedTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Adds the task in a recognized format into the Storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param task Task to be added in storage file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException thrown when there is an IOException thrown by FileWriter."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void append(Task task, boolean isArchive) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        File fileToLoadFrom;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom \u003d this.archivedTasksFile;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom \u003d this.mainTasksFile;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileToLoadFrom.getPath(), true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.write(task.getSavingFormat() + System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException((e.getMessage()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Overwrite the existing data in the Storage with data from the Tasks present in the TaskList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param todos TaskList containing Tasks for overwriting the data in Storage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when FileWrite throws an IOException."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void overwrite(TaskList todos, boolean isArchive) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        File fileToLoadFrom;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom \u003d this.archivedTasksFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fileToLoadFrom \u003d this.mainTasksFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileToLoadFrom.getPath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Task todo;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            for (int i \u003d 0; i \u003c todos.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                todo \u003d todos.get(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                fw.write(todo.getSavingFormat() + System.lineSeparator());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 131
    }
  },
  {
    "path": "src/main/java/Duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a TaskList which is a list that stores tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a TaskList using the ArrayList of Tasks given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param tasks ArrayList of Tasks used for initiating TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a TaskList containing no Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Adds a Task into the TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param task Task to be added into TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert task !\u003d null : \"task should not be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Removes a Task from the TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param idx Index of Task to be removed from TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void remove(int idx) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isPositiveIndex \u003d idx \u003e\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isIndexWithinBounds \u003d idx \u003c this.tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert isPositiveIndex \u0026\u0026 isIndexWithinBounds : \"Invalid index\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks.remove(idx);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Retrieves a Task from the TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param idx Index of Task to be retrieved from TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return Task retrieved from TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task get(int idx) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isPositiveIndex \u003d idx \u003e\u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isIndexWithinBounds \u003d idx \u003c this.tasks.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert isPositiveIndex \u0026\u0026 isIndexWithinBounds : \"Invalid index\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Gets the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The number of Tasks in the TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 74
    }
  },
  {
    "path": "src/main/java/Duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Ui which interacts with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays the welcome page of Duke for the user to see when starting the CLI application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays a message to the user indicating that it couldn\u0027t retrieve any saved data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"Failed to load from saved data\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Reads the input from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The input as a String from the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays a line seperator to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays an error message to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param err The error message from an exception."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showError(String err) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.printf(\"%s\\n\", err);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Displays a message to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param message The message to the displayed to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 64
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents an AddCommand for adding new tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of an AddCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param newTask The new task to add."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public AddCommand(Task newTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Adds the task into the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record the new task into the location specified in its path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Relays exception possibly thrown by storage when storing new task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.append(this.newTask, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        mainTasks.add(this.newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"   \" + newTask + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \" Now you have \" + mainTasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after adding a task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 52
    }
  },
  {
    "path": "src/main/java/command/ArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a ArchiveCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param taskIndex The index of the task to archive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ArchiveCommand(int taskIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Archives the task at the specified index from the unarchivedTasks TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will archive the task at the location specified in its path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when task index invalid or relayed from Storage when removing task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNegativeIndex \u003d this.taskIndex \u003c 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasIndexOutOfBounds \u003d this.taskIndex \u003e mainTasks.size() - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasInvalidIndex \u003d hasNegativeIndex || hasIndexOutOfBounds;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasInvalidIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toArchive \u003d mainTasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert toArchive !\u003d null : \"toDelete should not be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        mainTasks.remove(this.taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(mainTasks, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        archivedTasks.add(toArchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(archivedTasks, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Noted. I\u0027ve archived this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"   \" + toArchive + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \" Now you have \" + mainTasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after archiving a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 62
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a ByeCommand for exiting the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Exits the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage for recording tasks passed in by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True since a ByeCommand indicates that the user wants to exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 33
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Executes the Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record changes of tasks into the file specified by its path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when the command from the user is not feasible."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public abstract String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True if the program should exit after execution, otherwise false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 26
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a DeleteCommand for deleting existing tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a DeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param taskIndex The index of the task to delete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Deletes the task at the specified index from the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will delete the task at the location specified in its path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when task index invalid or relayed from Storage when removing task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNegativeIndex \u003d this.taskIndex \u003c 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasIndexOutOfBounds \u003d this.taskIndex \u003e mainTasks.size() - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasInvalidIndex \u003d hasNegativeIndex || hasIndexOutOfBounds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasInvalidIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toDelete \u003d mainTasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert toDelete !\u003d null : \"toDelete should not be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        mainTasks.remove(this.taskIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(mainTasks, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"   \" + toDelete + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \" Now you have \" + mainTasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after removing a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 62
    }
  },
  {
    "path": "src/main/java/command/DoNothingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a DoNothingCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DoNothingCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Does Nothing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record changes of tasks into the file specified by its path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after doing nothing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 33
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a DoneCommand for marking existing tasks as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a DoneCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param taskIndex The index of the task to mark as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Marks the task at the specified index in the TaskList as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will update the task at the location specified in its path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when task index invalid or relayed from Storage when updating task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNegativeIndex \u003d this.taskIndex \u003c 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasIndexOutOfBounds \u003d this.taskIndex \u003e mainTasks.size() - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasInvalidIndex \u003d hasNegativeIndex || hasIndexOutOfBounds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasInvalidIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toChange \u003d mainTasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert toChange !\u003d null : \"toChange should not be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        toChange.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(mainTasks, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"  \" + toChange + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after marking a task as done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 61
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a FindCommand for finding tasks with specific keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param keyword The keyword to search for in the description of the Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Finds the tasks which have the specified keyword in their description and then proceeds to list them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record any changes into the file in its path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\" Here are the tasks containing the keyword \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .append(String.format(\"\\\"%s\\\"\", keyword)).append(\":\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int numbering \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isUnavailable \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (int i \u003d 0; i \u003c mainTasks.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            task \u003d mainTasks.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert task !\u003d null : \"task should not be null\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (task.hasKeyword(keyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (isUnavailable) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    isUnavailable \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                output.append(\" \").append(numbering).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                numbering++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isUnavailable) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return \"There are no tasks containing the keyword \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    + String.format(\"\\\"%s\\\"\", keyword) + \"!\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after listing all the tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *         containing the specified keyword."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 72
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a ListCommand for adding listing all existing tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private boolean listAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param listAll Indicates whether the ListCommand has to list unarchived tasks too when executed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ListCommand(boolean listAll) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.listAll \u003d listAll;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Lists the tasks in the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record any changes into the file in its path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert mainTasks.size() \u003e\u003d 0 : \"unarchivedTasks should not have a negative size\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert archivedTasks.size() \u003e\u003d 0 : \"archivedTasks should not have a negative size\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!this.listAll) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getListMainOutput(mainTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return getListAllOutput(mainTasks, archivedTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private String getListAllOutput(TaskList mainTasks, TaskList archivedTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasArchivedTasks \u003d archivedTasks.size() !\u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String mainOutput \u003d getListMainOutput(mainTasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!hasArchivedTasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return mainOutput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(mainOutput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        output.append(\"\\n\").append(\" Here are your archived tasks:\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d archivedTasks.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Task theTask \u003d archivedTasks.get(i - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert theTask !\u003d null : \"theTask should not be null\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            output.append(\" \").append(i).append(\".\").append(theTask).append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private String getListMainOutput(TaskList mainTasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasMainTasks \u003d mainTasks.size() !\u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (!hasMainTasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return \"Yay! You have nothing to do at the moment! :-)\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\" Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d mainTasks.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Task theTask \u003d mainTasks.get(i - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert theTask !\u003d null : \"theTask should not be null\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            output.append(\" \").append(i).append(\".\").append(theTask).append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on listing all the tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 90
    }
  },
  {
    "path": "src/main/java/command/TasksOnCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a TasksOnCommand for listing Tasks on a specific Date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TasksOnCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a TasksOnCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param date The Date on which all the listed Tasks are on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TasksOnCommand(LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Finds the tasks on the specified Date and then proceeds to list them."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will record any changes into the file in its path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String formattedDate \u003d date.format(formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\" Here are the tasks on \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .append(formattedDate).append(\":\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int numbering \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isFree \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (int i \u003d 0; i \u003c mainTasks.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            task \u003d mainTasks.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert task !\u003d null : \"task should not be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assert this.date !\u003d null : \"date should not be null\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (task.hasSameDate(this.date)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (isFree) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                output.append(\" \").append(numbering).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                numbering++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isFree) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return \"Yay! You have nothing to do on \" + formattedDate + \"! :-)\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after listing all the tasks on a specific Date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 76
    }
  },
  {
    "path": "src/main/java/command/UnarchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an instance of a UnarchiveCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param taskIndex The index of the task to unarchive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public UnarchiveCommand(int taskIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Unarchives the task at the specified index from the archivedTasks TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param mainTasks The TaskList which stores unarchived tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param archivedTasks The TaskList which stores archived tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param storage The Storage which will unarchive the task at the location specified in its path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @throws DukeException Thrown when task index invalid or relayed from Storage when removing task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return The output to be displayed to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String execute(TaskList mainTasks, TaskList archivedTasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasNegativeIndex \u003d this.taskIndex \u003c 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasIndexOutOfBounds \u003d this.taskIndex \u003e archivedTasks.size() - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean hasInvalidIndex \u003d hasNegativeIndex || hasIndexOutOfBounds;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (hasInvalidIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toUnarchive \u003d archivedTasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert toUnarchive !\u003d null : \"toUnarchive should not be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        archivedTasks.remove(this.taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(archivedTasks, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        mainTasks.add(toUnarchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(mainTasks, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \" Noted. I\u0027ve unarchived this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"   \" + toUnarchive + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \" Now you have \" + mainTasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Indicates whether the program should exit after executing this Command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since the program should still go on after unarchiving a task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 62
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a DukeException thrown when something unexpected occurs in the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a instance of a DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param message Message to display to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 16
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Deadline which is a Task which needs to be done before a certain Date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Deadline instance containing a description and a Date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Deadline to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param deadlineDate Date by which the Deadline should be done latest by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Deadline(String description, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, deadlineDate, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Deadline instance containing a description and a Date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Deadline to be done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param deadlineDate Date by which the Deadline should be done latest by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param isDone True if the Deadline is already done otherwise false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Deadline(String description, LocalDateTime deadlineDate, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Format in which the Deadline should be saved in Storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String format of the Deadline for saving in Storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getSavingFormat() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"D\" + \"~\" + super.getSavingFormat() + \"~\" + this.deadlineDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks whether the Deadline has the same Date as specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param theDate Date to check whether the Deadline has occurred on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True if the Deadline occurred on the specified date otherwise false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert theDate !\u003d null : \"theDate should not be null\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return deadlineDate.toLocalDate().equals(theDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the String representation of the Deadline to be displayed to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String representation of Deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadlineDate.format(DATE_FORMAT) + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 66
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents an Event which is a Task that will be happening on a certain Date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private LocalDateTime eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an Event instance containing a description and a Date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Event to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param eventTime Date on which the event will be happening."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Event(String description, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, eventTime, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates an Event instance containing a description and a Date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Event to be done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param eventTime Date on which the event will be happening."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param isDone True if the Event is already done otherwise false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Event(String description, LocalDateTime eventTime, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Format in which the Event should be saved in Storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String format of the Event for saving in Storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getSavingFormat() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"E\" + \"~\" + super.getSavingFormat() + \"~\" + this.eventTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks whether the Event has the same Date as specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param theDate Date to check whether the Event has occurred on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True if the Event occurred on the specified date otherwise false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assert theDate !\u003d null : \"theDate should not be null\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return eventTime.toLocalDate().equals(theDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the String representation of the Event to be displayed to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String representation of Event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime.format(DATE_FORMAT) + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 65
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Task which needs to be done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /** Date format of which the Date of any Tasks will be displayed to the user. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /** Description of the Task to be done. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /** True if the Task is already done otherwise False. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Task instance containing a description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Task to be done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Task instance containing a description and a Date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Task to be done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param isDone True if the Task is already done otherwise false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Gets the appropriate status icon of the Task to be displayed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return A tick if the task is already done otherwise A cross."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Marks the Task as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Formats the Task in the way it should be saved in Storage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String format of the Task for saving in Storage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getSavingFormat() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return isDone + \"~\" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks if the description of the Task has the specified keyword."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param keyword String to check if present in the desciption of the Task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True if the description of the Task has the keyword otherwise false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasKeyword(String keyword) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return this.description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks whether the Task has the same Date as specified."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param theDate Date to check whether the Task has occurred on."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return True if the Task occurred on the specified date otherwise false."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public abstract boolean hasSameDate(LocalDate theDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the String representation of the Task to be displayed to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String representation of Task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 92
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Represents a Todo which is a Task which needs to be done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Todo instance containing a description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Todo to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates a Todo instance containing a description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param description Description of Todo to be done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param isDone True if the Todo is already done otherwise false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Format in which the Todo should be saved in Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String format of the Todo for saving in Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getSavingFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"T\" + \"~\" + super.getSavingFormat();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Checks whether the Todo has the same Date as specified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @param theDate Date to check whether the Todo has occurred on."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return False since a Todo has no Date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Returns the String representation of the Todo to be displayed to the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * @return String representation of Todo."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 59
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Circle myCircleImage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        myCircleImage.setStroke(Color.DARKGREY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        myCircleImage.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tmp.get(1).setStyle(\"-fx-background-color: #e1ad01; \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"-fx-border-radius: 0 20 20 20; \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"-fx-background-radius: 0 20 20 20; \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"-fx-label-padding: 6 10 6 6;\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"-fx-translate-x: 10\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 70
    }
  },
  {
    "path": "src/main/java/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author Madan Sapkota"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            //Reused from https://stackoverflow.com/questions/10275841 with minor modifications"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/Duke-logo.jpg\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 34,
      "-": 4
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User-logo.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke-logo.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                DialogBox.getDukeDialog(\"Greetings from Duke, how may I \\nbe of assistance to you?\", dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (response \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    DialogBox.getDukeDialog(\"Bye. Hope to see you again soon!\\n\", dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            //Solution below adapted from https://stackoverflow.com/questions/27334455"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            boolean isValid \u003d !response.isBlank();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (isValid) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 76
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"82.0\" prefWidth\u003d\"403.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"2.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #000080; -fx-border-radius: 20 0 20 20; -fx-background-radius: 20 0 20 20; -fx-label-padding: 6 6 6 6;\" text\u003d\"Test\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cFont name\u003d\"PT Sans\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" top\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "      \u003cCircle fx:id\u003d\"myCircleImage\" fill\u003d\"DODGERBLUE\" radius\u003d\"26.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FH-30": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Write a message...\" style\u003d\"-fx-background-color: #d3d3d3; -fx-border-color: #0A0A0A;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cFont name\u003d\"PT Sans\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"559.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #4169E1; -fx-border-color: #0A0A0A;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            \u003cFont name\u003d\"Helvetica\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #0A0A0A;\" stylesheets\u003d\"@../css/scrollpane.css\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "FH-30": 26
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DoNothingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import command.TasksOnCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void canExitDuke_bye_byeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void markTestAsDone_done1_doneCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDoneNumber_doneA_throwException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"done A\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tTask number format invalid, must be a number.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDoneNumber_done_throwException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"done          \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deleteTask_delete1_deleteCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDeleteNumber_deleteA_throwException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"delete A\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tTask number format invalid, must be a number.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDeleteNumber_delete_throwException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"delete          \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void listTasks_list_listCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void listTasksOnDate_tasksOn30082001_tasksOnCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"tasks on 30/08/2001\") instanceof TasksOnCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDateFormat_tasksOn3082001_throwException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"tasks on 30/8/2001\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDate_tasksOn_throwException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"tasks on          \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNeed to specify the date of the tasks\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addTodo_todoWashCar_addCommand() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"todo wash car\") instanceof AddCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void todoNoDescription_todo_throwException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"todo       \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addDeadline_deadlineReturnBookTiming_addCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"deadline return book /by 22/08/2020 18:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineNoDescription_deadlineTiming_throwException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline          /by 22/08/2020 18:00\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineNoTiming_deadlineReturnBook_throwException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline return book /by         \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineDateInvalid_deadlineReturnBookInvalidTiming_throwException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline return book /by 22/8/2020 1800\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addEvent_eventReturnBookTiming_addCommand() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"event return book /at 22/08/2020 18:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventNoDescription_deadlineTiming_throwException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event          /at 22/08/2020 18:00\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventNoTiming_eventReturnBook_throwException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event return book /at         \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventDateInvalid_eventReturnBookInvalidTiming_throwException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event return book /at 22/8/2020 1800\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void randomCommand_hello_throwException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"Hello\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tI don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void pressEnter_enter_doNothingCommand() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"\\n\") instanceof DoNothingCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 225
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addTask_todo_sizeOne() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Eat Breakfast\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void getTask_todo_todoEqualToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Do CS2103T iP\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.get(0).toString(), todo.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void removeTask_todo_sizeZero() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.size(), 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 39
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline return book /by 22/08/2020 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event project meeting /at 22/10/2020 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline          /by Monday 4PM"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline Wash Car"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline Wash Car /by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event /at Monday 6-8 PM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event Wedding Party"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event Wedding Party /at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 10000"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete 10000"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "FH-30": 27
    }
  }
]
