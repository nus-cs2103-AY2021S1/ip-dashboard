[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "mainClassName \u003d \u0027Duke.java\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "test {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 32
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  a | happy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  b | "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "E | 0 | c  | asd | sad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "E | 0 | d  | asdasda | "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "D | 0 |  e | 2012-02-02 | "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "D | 0 |  f | 1880-02-03 | too_old"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 84
    }
  },
  {
    "path": "src/main/java/Bot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Bot class is the main brain of the program. It takes in the user input via the Scanner object"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * and coordinates with the Parser, Storage, Storage and Printer class to carry out the appropriate"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * output."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Bot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Printer printer \u003d new Printer(); //ui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Storage storage \u003d new Storage(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    LocalDate localDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the greeting when created."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Bot() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.greeting();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Checks for the next line as inputted by the user. Parses the message through parser.getDetails("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * message) which returns an array of size 3 containing the type of message, detail and the date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Date will be null if the message is not of Deadline or Event. The function will then carry out"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * the corresponding action depending on the type of message by interacting with the TaskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * object. The function will also pass the storage and printer object so that TaskList can save"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * the data into duke.txt after completion and also print the corresponding message. Catches"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * undefined and wrong messages exception. Type of commands supported are [bye, list, done, todo,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * event, deadline, delete, find]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String serve(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String s \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String[] parsedInfo \u003d parser.getDetails(s);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String command \u003d parsedInfo[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String commandDetail \u003d parsedInfo[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            String dateInfo \u003d parsedInfo[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"bye\"):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d printer.farewell();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"list\"):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d taskList.printReturns();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"done\"):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d taskList.doneListings(Integer.valueOf(commandDetail), printer, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"todo\"):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (commandDetail \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        throw new NoDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        output \u003d taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"deadline\"):"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (commandDetail \u003d\u003d null || dateInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        throw new NoDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        localDate.parse(dateInfo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        output \u003d taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"event\"):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (commandDetail \u003d\u003d null || dateInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        throw new NoDescriptionException(\"event\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        output \u003d taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"delete\"):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    Integer deleteNumber \u003d Integer.valueOf(parsedInfo[1]) - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (deleteNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        throw new invalidDeleteNumberException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    assert deleteNumber \u003e\u003d 1 : \"Invalid Number\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d taskList.deleteListing(deleteNumber, printer, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"find\"):"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d taskList.find(commandDetail);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                case (\"tag\"):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (commandDetail \u003d\u003d null \u0026 dateInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        throw new invalidTagException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    Integer tagNumber \u003d Integer.valueOf(commandDetail) - 1; //catch bug"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    String tagDetail \u003d dateInfo;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    output \u003d taskList.tagListing(tagNumber, tagDetail, printer, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    throw new UndefinedException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (DateTimeParseException e) { // wrong dates"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.dateTimeParseExceptionMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (NoDescriptionException e) { //incomplete messages"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.noDescriptionMessage(e.s);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (UndefinedException e) { //unknown commands"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.undefinedExceptionMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (invalidDeleteNumberException e) { //invalid date number"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.invalidDeleteNumberExceptionMessage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (java.lang.NumberFormatException e) { //parsed a date number that is not a number"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.invalidDeleteNumberExceptionMessage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (invalidTagException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.invalidTagExceptionMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (AssertionError e) { //assertion"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return printer.assertionErrorMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 115
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Deadline class is a type of listing that contains a String as the detail of the listing, a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * boolean called isDone and a LocalDate object called deadLine."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Deadline extends Listing {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private LocalDate deadLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new Deadline object by passing s as the Listing message and parsing deadline to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * LocalDate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s        detail of the listing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param deadLine in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A DeadLine object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Deadline(String s, String deadLine) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d LocalDate.parse(deadLine);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new Deadline object using an extra string parameter doneness. Used when creating *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Event objects are loading from storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param doneness can be 0 or 1 and which gets passed to setDoneness that converts \\ it to a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *                 boolean"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s        detail of the listing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param doneness in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A DeadLine object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Deadline(String doneness, String s, String time, String tagList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e(Arrays.asList(tagList));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Deadline(String doneness, String s, String time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns a string array of size 4 containing a code, doneness, detail and time to be saved by"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Storage.java. The code will always be \"D\" for \"Deadline\" and doneness wil be 1 or 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * corresponding to the object boolean value."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A size 4 String array consisting of the details of the object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] details \u003d new String[5];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[0] \u003d \"D\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[1] \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[2] \u003d this.title;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[3] \u003d this.deadLine.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[4] \u003d this.tags.toString().substring(1, this.tags.toString().length() - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return this object in string format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return this.tags.isEmpty() ? \"[D]\" + super.doneness() + this.title + \" (by:\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + deadLine.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                : \"[D]\" + super.doneness() + this.title + \" (by:\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + deadLine.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\" + \" tags:\" + this.tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 79
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * A personalized chat bot that is designed to help users manage their schedule. There are three"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * different types of listings - ToDos, Deadlines and Events."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * @author Gabriel Sim"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * @since 2020-09-02"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/Poring.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Poro.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Bot bot \u003d new Bot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Iteration 3: Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * reply and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Dialog boxes are now alternating"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * You should have your own function to generate a response to user input. Replace this stub with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * your completed method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String getResponse(String input) { //where to get response"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d bot.serve(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return \"Duke heard: \" + output;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//    Bot bot \u003d new Bot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//    bot.serve();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 67,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Event class is a type of listing that contains a String as the detail of the listing, a"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * boolean called isDone and a String called deadLine."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Event extends Listing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String deadLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new Event object by passing s as the Listing message and deadline as the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Note that deadline is not in a strict localDate format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s        detail of the listing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param deadLine deadline of the listing in any form of a string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A Event object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Event(String s, String deadLine) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new Event object using an extra string parameter doneness. Used when creating Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * objects are loading from storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param doneness can be 0 or 1 and which gets passed to checkDoneness that converts \\ it to a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *                 boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s        detail of the listing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param doneness in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A Event object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Event(String doneness, String s, String time, String tagList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e(Arrays.asList(tagList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Event(String doneness, String s, String time) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.deadLine \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns a string array of size 4 containing a code, doneness, detail and time to be saved by"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Storage.java. The code will always be \"D\" for \"Deadline\" and doneness wil be 1 or 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * corresponding to the object boolean value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return A size 4 String array consisting of the details of this object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] details \u003d new String[5];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[0] \u003d \"E\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[1] \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[2] \u003d this.title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[3] \u003d this.deadLine;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[4] \u003d this.tags.toString().substring(1, this.tags.toString().length() - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return This object in string format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return this.tags.isEmpty() ? \"[E]\" + super.doneness() + \" \" + this.title + \"(at:\" + this.deadLine + \")\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                : \"[E]\" + super.doneness() + \" \" + this.title + \"(at:\" + this.deadLine + \")\" + \" tags:\" + this.tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 74
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 12
    }
  },
  {
    "path": "src/main/java/Listing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Listing class is the parent class of Event.java, Deadline.java and ToDo.java. It contains"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * a String that represent the details and a Boolean called isDone that is by default set to false."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * It contains helper functions such as doneness() and checkDoneness() that are used by Printer.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * and TaskList.java respectively."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Listing {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Listing(String s) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.title \u003d s;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a String checkbox that represents if the listing is done or not"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String doneness() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return \"[Y]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return \"[N]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Sets the isDone boolean based on the input String s."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s which can be either 0 or 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setDoneness(String s) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (s.equals(\"1\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return new String[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 55
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//Optional for now"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "// import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "// * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//    try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//    } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//      e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//  }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/Poring.jpg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Poro.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 50
    }
  },
  {
    "path": "src/main/java/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An exception that is reported when the Bot.java detects no descriptions in the user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public NoDescriptionException(String s) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.s \u003d s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Parser object is in charge of separating the details of the user input into a String array."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Typically, the command is split into [command, detail, deadline]."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns a string array containing the command type, command details and date details. If there"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * are no details then the array slot is left as null. Reads the raw input from the user as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * a string and split the based on whitespace."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param String input from the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a size 3 string array containing command type, command detail and date detail"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] getDetails(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] rawData \u003d s.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] extractedDetails \u003d extractDetails(rawData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return extractedDetails;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Returns a size 3 array containing command type, command detail and command date. Any array"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * slots that have no inputs are left as null. The original raw input is split and processed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * depending on the command type. The command types available are todo, deadline, event, done and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * delete."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param string array of the raw user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a size 3 array containing command type, command detail and date detail."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] extractDetails(String[] details) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String type \u003d details[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] s \u003d new String[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s1 \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s2 \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                if (details.length \u003d\u003d 1) { //empty todo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[1] \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                } else { // form a single string of detail"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    for (int i \u003d 1; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s1 \u003d s1 + \" \" + details[i];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[1] \u003d s1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                for (; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (details[counter].equals(\"/by\")) { //base case for task details"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s[1] \u003d s1;  //enter detail into extracted details array"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s1 \u003d s1 + \" \" + details[counter]; //build a string of task details"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                for (counter++; counter \u003c details.length; counter++) {//build a string of time detail"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (counter \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s2 \u003d s2 + details[counter];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s2 \u003d s2 + details[counter] + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                s[2] \u003d s2; //enter time detail into extracted detail array"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                for (; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (details[counter].equals(\"/at\")) { //base case for task details"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s[1] \u003d s1; // enter detail into final array"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s1 \u003d s1 + details[counter] + \" \"; //build string of detail"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                for (counter++; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (counter \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s2 \u003d s2 + details[counter];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        s2 \u003d s2 + details[counter] + \" \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                s[2] \u003d s2; //enter time detail into final array"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"done\"):"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                s[1] \u003d details[1]; //expected to be an int"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"delete\"):"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                s[1] \u003d details[1]; //expected to be an int"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"bye\"):"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"find\"):"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                s[1] \u003d details[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"tag\"):"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                if (details.length \u003c 3) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[1] \u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[2] \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[1] \u003d details[1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s[2] \u003d details[2];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[0] \u003d type;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 113
    }
  },
  {
    "path": "src/main/java/Printer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Printer object is in charge of printing out the various statements after TaskList.java and"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * Storage.java has completed their tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String GREETING \u003d \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            + \"     What can I do for you?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String GOODBYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String GOT_IT \u003d \"     Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private static final String WHITE_SPACE_SEVEN \u003d \"       \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Printer() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the greeting message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected void greeting() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s \u003d LINE + \"\\n\" + GREETING + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the farewell message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String farewell() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s \u003d LINE + \"\\n\" + GOODBYE + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the listing size message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param l    a listing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param size the current size of the ArrayList in TaskList.java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String printListing(Listing l, int size) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d LINE + \"\\n\" + GOT_IT + \"\\n\" + WHITE_SPACE_SEVEN + l.toString() +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                \"\\n\" + \"     Now you have \" + size + \" tasks in the list.\" + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the undefinedExceptionMessage message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String undefinedExceptionMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d LINE + \"\\n\" + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the noExceptionMessage message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s the type of event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String noDescriptionMessage(String s) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d (LINE + \"\\n\" + \"     ): OOPS!!! The description of a \" + s + \" cannot be empty.\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the undefinedExceptionMessage message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String dateTimeParseExceptionMessage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d (LINE + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"     ): OOPS!!! I\u0027m sorry, but that date is invalid. Try using a new date in the format YYYY-MM-DD :-(\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the delete message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param size    the current size of the ArrayList in TaskList.java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param listing the detail of the listing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String deleteMessage(int size, String listing) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d (LINE + \"\\n\" + \"     Noted. I\u0027ve removed this task: \\n\" + WHITE_SPACE_SEVEN"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + listing + \"\\n\" + \"     Now you have \" + size + \" tasks in the list.\\n\" + LINE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the delete message"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param size    the current size of the ArrayList in TaskList.java"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param listing the detail of the listing"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String tagMessage(String tagDetails, String listing) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d (LINE + \"\\n\" + \"     Noted. I\u0027ve tagged this task: \\n\" + WHITE_SPACE_SEVEN"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + listing + \"\\n\" + \"     with \" + tagDetails + \"!\\n\" + LINE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the assertion error message"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String assertionErrorMessage() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d (LINE + \"\\n\" + \"     Assertion error detected \\n\" + WHITE_SPACE_SEVEN"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the assertion error message"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String invalidDeleteNumberExceptionMessage() {//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d (LINE + \"\\n\" + \"     Sorry, that number/character isn\u0027t valid! ): \\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"try writing tag (number) (message) instead! \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + WHITE_SPACE_SEVEN + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the assertion error message"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String invalidTagExceptionMessage() {//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d (LINE + \"\\n\" + \"     Sorry, that tag command isn\u0027t valid! ): \\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + WHITE_SPACE_SEVEN + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the done message"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s the detail of the listing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String doneMessage(String s) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d (LINE + \"\\n\" + \"     Nice! I\u0027ve marked this task as done: \\n\" + \"     \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + s + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 148
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The Storage class is tasked with checking that the a duke.txt file is created given the file path"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * initially and creating it if it is not found. It also manages the saving and loading of duke.txt."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Storage { //deals with loading task and saving task in file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private String filePath; "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new Storage object. Storage is initialised with filepath passed from Bot.java."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Filepath is assigned to this.filePath. Storage checks if there is a file named duke.txt (from"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * the file path) that exists. If it does, the file is assigned to this.file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param filePath file path of duke.txt (or other file name as determined by creator)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a Storage object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            File myFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            boolean exists \u003d myFile.exists();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (!exists) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                myFile.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                this.file \u003d myFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                System.out.println(\"new duke.txt created\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else if (exists) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                this.file \u003d myFile;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                System.out.println(\"file exists\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a new ArrayList\u003cListing\u003e. If this.file contains a non-empty file, the lines are parsed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * and split using a Scanners to return a string array of size 3 containing the code, isDone,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * details and timedetail if applicable (or left null if none is available). The corresponding"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Listing is then created and added to the Arraylist which is then returned. If file is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * then an empty ArrayList is returned."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return An ArrayList\u003cListing\u003e based after parsing duke.txt"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ArrayList\u003cListing\u003e load() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ArrayList\u003cListing\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                String[] details \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                switch (details[0]) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        if (details.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new ToDo(details[1], details[2], details[3]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new ToDo(details[1], details[2]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        if (details.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new Deadline(details[1], details[2], details[3], details[4]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new Deadline(details[1], details[2], details[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        if (details.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new Event(details[1], details[2], details[3], details[4]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                            list.add(new Event(details[1], details[2], details[3]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Takes in an ArrayList\u003cListing\u003e and loops through the list, writing the details of each listing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * separated by a \" | \" into this.file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param list the ArrayList\u003cListing\u003e from TaskList.java"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public void save(ArrayList\u003cListing\u003e list) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            for (Listing listing : list) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                String[] details \u003d listing.toArray();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                String s \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s \u003d s + details[i];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    if (i \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                    s \u003d s + \" | \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                fileWriter.write(s + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 122
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The TaskList class manages the adding, completion, finding, deletion and printing of the listings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * using an ArrayList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ArrayList\u003cListing\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Takes in a new Arraylist\u003cListing\u003e and initialises list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a new TaskList object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public TaskList(ArrayList\u003cListing\u003e l) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.list \u003d l;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Prints the toString() value of each listing in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    protected String printReturns() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s +\u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"     Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s +\u003d \"     \" + (i + 1) + \".\" + list.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s +\u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Modifies the done boolean in the listing objects inside the list. Print the correct message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * through printer * and updates storage through the storage input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param value   used to find the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *                listing *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param printer to print the object message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String doneListings(Integer value, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Listing item \u003d list.get(value - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        item.complete();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d printer.doneMessage(item.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Deletes the listing object from the list . Print the correct message through printer and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * updates storage through the storage input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param num     used to find the listing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param printer to print the object message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String deleteListing(Integer num, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d printer.deleteMessage(list.size() - 1, list.get(num).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.remove((int) num);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Tags the listing object from the list . Print the correct message through printer and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * updates storage through the storage input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param tagNum  used to find the listing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param printer to print the object message"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String tagListing(Integer tagNum, String tagDetail, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output \u003d printer.tagMessage(tagDetail, list.get(tagNum).toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.get((int) tagNum).tags.add(tagDetail);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Adds the listing object to the list . Print the correct message through printer and updates"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * storage through the storage input"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param details used to provide the details to the listing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param printer to print the object message"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String addListings(String[] details, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        int size \u003d list.size() + 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String taskInfo \u003d details[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String dateInfo \u003d details[2];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        switch (details[0]) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"todo\"):"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                ToDo todo \u003d new ToDo(taskInfo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                list.add(todo);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                output \u003d printer.printListing(todo, size);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"deadline\"):"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                Deadline deadline \u003d new Deadline(taskInfo, dateInfo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                list.add(deadline);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                output \u003d printer.printListing(deadline, size);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            case (\"event\"):"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                Event event \u003d new Event(taskInfo, dateInfo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                output \u003d printer.printListing(event, size);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Takes in a string and loops the list for the message (inside listing.title) using"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * String.get(message) then prints out the corresponding messages."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param message the message requested by the user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String find(String message) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output +\u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                + \"     Here are the matching tasks and their corresponding order!:\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Listing listing \u003d list.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (list.get(i).title.contains(message)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                output +\u003d \"     \" + (i + 1) + \".\" + listing.toString() + \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        output +\u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 146
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * The ToDo class is a type of listing that contains a String as the detail of the listing and a"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * boolean called isDone."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class ToDo extends Listing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a ToDo object by passing the string s as the Todo message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s the detail of the ToDo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a ToDo object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Creates a ToDo object by passing a string doneness which gets converted to a boolean and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * assigned to this.isDone. String s gets passed as the message detail"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param doneness a string of either 1 or 0 that gets converted to boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @param s        the message detail"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a ToDo object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ToDo(String doneness, String s, String tagList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e(Arrays.asList(tagList));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public ToDo(String doneness, String s) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        setDoneness(doneness);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * Summarises the details of the ToDo object into a size 3 string array containing a code \"T\" that"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * represents ToDO, isDone boolean in the form of a string and the detail message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return a size 3 String array containing the code of the ToDo object, the isDone in string the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * detail of the object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] details \u003d new String[4];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[0] \u003d \"T\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[1] \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[2] \u003d this.title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        details[3] \u003d this.tags.toString().substring(1, this.tags.toString().length() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     * @return Returns the ToDo object in string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        return this.tags.isEmpty() ? \"[T]\" + super.doneness() + this.title"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "                : \"[T]\" + super.doneness() + this.title + \" tags:\" + this.tags.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 64
    }
  },
  {
    "path": "src/main/java/UndefinedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * An exception that is reported when the Bot.java detects an undefined command in the user"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " * input"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class UndefinedException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    public UndefinedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 11
    }
  },
  {
    "path": "src/main/java/invalidDeleteNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class invalidDeleteNumberException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 3
    }
  },
  {
    "path": "src/main/java/invalidTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class invalidTagException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 2
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cfx:root minHeight\u003d\"-Infinity\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"500.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 14
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class ParserTest { //parser tests"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserGetDetails_validTodoInput_trueReturned() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.getDetails(\"todo event\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"todo\", \" event\", null};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserGetDetails_validDeadLineInput_trueReturned() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.getDetails(\"deadline event /by 2012-02-2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"deadline\", \" event\", \"2012-02-2\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserExtractDetails_validDeadLineInput_trueReturned() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.extractDetails(new String[]{\"deadline\", \"event\", \"/by\", \"2012-02-2\"});"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"deadline\", \" event\", \"2012-02-2\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 39
    }
  }
]
