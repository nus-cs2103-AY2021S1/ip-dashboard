[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "# junimo.Junimo project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/junimo.Junimo.java` file, right-click it, and choose `Run junimo.Junimo.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This generated file contains a sample Java project to get you started."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Apply the java plugin to add support for Java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Apply the application plugin to add support for building a CLI application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use jcenter for resolving dependencies."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // You can declare any Maven/Ivy/file repository here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // This dependency is used by the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation \u0027com.google.guava:guava:29.0-jre\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use JUnit Jupiter API for testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use JUnit Jupiter Engine for testing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "application {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Define the main class for the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    mainClassName \u003d \u0027Launcher\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Use junit platform for unit tests"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 72
    }
  },
  {
    "path": "data/saved-tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event book event /at library"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "false"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "true"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline write book /by 2020-12-12"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo eat ice cream"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "false"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 8
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if exist \"%JAVA_EXE%\" goto execute"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":end"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 89
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.6.1/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 10
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.ui.Main;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 11
    }
  },
  {
    "path": "src/main/java/junimo/Junimo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.backend.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.interaction.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.interaction.Greeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * The junimo.Junimo Class handles all the internal (non-GUI) logic of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * The program is a CLI Application that allows users to:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eAdd new tasks (Deadline, Event or Todo)\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eView a list of their tasks\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eMark tasks as done\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eDelete tasks\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *     \u003cli\u003eSave tasks in the hard disk automatically\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jeffry Lum"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jiachen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * @author Jeanne Toh"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Junimo {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Junimo(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error: file not created. \" + e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return Greeting.welcome();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getBye() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return Greeting.exit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String parseInputCommand(String inputCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return parser.parseInputCommand(inputCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 56,
      "-": 2
    }
  },
  {
    "path": "src/main/java/junimo/backend/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with loadings tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance Storage object, that loads and saves tasks to file specified by filePath."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * If file and/or parent directories does not exist yet, creates them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param filePath Specifies pathname of file to save tasks to and load tasks from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void createFile(File file) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String dir \u003d file.getParent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            File dirFile \u003d new File(dir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Create file and parent directories if they do not exist yet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            dirFile.mkdirs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Loads file into a BufferedReader and returns the BufferedReader for use by TaskList to populate the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return BufferedReader reading from saved task file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @throws FileNotFoundException If file of the Storage object is not found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public BufferedReader load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FileReader f \u003d new FileReader(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new BufferedReader(f);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Saves Tasks from taskList onto hard drive."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overwrites saved txt file each time with updated values."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskList TaskList containing list of tasks to save."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Delete old saved file if it exists"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            boolean isDeleted \u003d file.delete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (isDeleted) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                createFile(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // Write tasks to new file overwriting the old file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            List\u003cTask\u003e tl \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            for (Task t : tl) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                fw.write(t.getParsedTask());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error writing to file: \" + e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 80
    }
  },
  {
    "path": "src/main/java/junimo/interaction/Greeting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.interaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with basic interaction with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Contains methods that greets user on start and exit of program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Greeting {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String STAR_LINE \u003d \"*******************************************************\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints welcome greeting to user at start of program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String welcomeMessage \u003d STAR_LINE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nWelcome! I am Junimo!\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\nHere are some magic words to get you going:\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To add a todo, say: \u0027todo \u003ctask description\u003e\u0027.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To add a deadline, say:\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n       \u0027deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\u0027.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To add an event, say:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n       \u0027event \u003cevent description\u003e /at \u003cevent location\u003e\u0027.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To view your tasks, say: \u0027list\u0027.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To check off a task, say: \u0027done \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"\\n* To find tasks, say: \u0027find \u003cword\u003e\u0027.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + STAR_LINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(welcomeMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return welcomeMessage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints farewell greeting to user at end of program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String exit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String exitMessage \u003d \"Bye!! Hope you have a productive day ahead! :))\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(exitMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return exitMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 38
    }
  },
  {
    "path": "src/main/java/junimo/interaction/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.interaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Deals with parsing and making sense of user commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Parser that adds, retrieves and delete tasks from taskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskList taskList that contains and handles the user\u0027s list of Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Parses user input commands and handles them appropriately."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Feedbacks to user if commands are not understandable/ in the wrong format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the following command types: bye, done, delete, todo, deadline and event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String parseInputCommand(String inputCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // \"bye\" breaks the while loop and causes the program to exit()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!inputCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String[] splitNext \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            // \"list\" prints the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (inputCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                return taskList.list();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                // \"done\" checks off boxes, need to check for input errors"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return taskList.markTaskAsDone(splitNext[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    String errMessage \u003d \"Please indicate which task you\u0027d like to check off!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(errMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return errMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                // to \"delete\" tasks from the taskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return taskList.deleteTask(splitNext[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    String errMessage \u003d \"Please indicate which task you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(errMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return errMessage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                if (splitNext.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return taskList.find(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return taskList.find(splitNext[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                // for ToDos, Deadlines, Events"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (splitNext[0].equals(\"todo\") || splitNext[0].equals(\"deadline\") || splitNext[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return taskList.add(inputCommand, false, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    String errMessage \u003d ex.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    System.out.println(errMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    return errMessage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String errMessage \u003d \"Sorry I don\u0027t know what that means!\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                System.out.println(errMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                return errMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return Greeting.exit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 78
    }
  },
  {
    "path": "src/main/java/junimo/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Deadline object which inherits from Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Deadline object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param by Due date for task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS! The deadline in an incorrect format! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"Please indicate the date as \u003cyyyy-mm-dd\u003e\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Deadline object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"deadline \" + description + \" /by \" + by + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object and Task equals method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Deadline object with the same description, by and isDone fields. False otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherDeadline.description)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 isDone \u003d\u003d otherDeadline.isDone"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 by.equals(otherDeadline.by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 61
    }
  },
  {
    "path": "src/main/java/junimo/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Deadline object which inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Event object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param at Location of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether event is done or not."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Event object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"event \" + description + \" /at \" + at + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object and Task equals method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also an Event object with the same description, at and isDone fields. False otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 isDone \u003d\u003d otherEvent.isDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u0026\u0026 at.equals(otherEvent.at);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 52
    }
  },
  {
    "path": "src/main/java/junimo/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents an abstract Task object. Inherited by Deadline, Event and Todo classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DEADLINE(\"deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        EVENT(\"event \u003cevent description\u003e /at \u003cevent location\u003e\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TODO(\"todo \u003ctask description\u003e\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final String format;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskType(String format) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.format \u003d format;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String getFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return this.format;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns format of command to add a specific task type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param taskTypeString String indicating task type (event, deadline or todo)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return Format of command to add task of type as specified by taskTypeString."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String getFormat(String taskTypeString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return TaskType.valueOf(taskTypeString.toUpperCase()).getFormat();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns task in String format that is suitable for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of task in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract String getParsedTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns checkbox with tick/cross representing if task is done (tick) or not (cross)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String representing checkbox with unicode character CHECK MARK (U+2713) if task is done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or HEAVY BALLOT X (U+2718) if task is not done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getCheckBox() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return \"[\\u2713]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return \"[\\u2718]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setDoneAsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return getCheckBox() + \" \" + description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object equals method."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Task object with the same description and isDone fields. False otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherTask.description) \u0026\u0026 isDone \u003d\u003d otherTask.isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 87
    }
  },
  {
    "path": "src/main/java/junimo/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Contains and handles the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of TaskList with an empty task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of TaskList populated with saved tasks read from BufferedReader."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param bufferedReader Reader that reads from a saved file with previously saved tasks, if such a file exists."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TaskList(BufferedReader bufferedReader) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            boolean isFileCorrupted \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(bufferedReader.readLine());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    add(line, isDone, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    if (!isFileCorrupted) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        System.out.println(\"WARNING: Your stored data appears to be in a corrupted format. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                                + \"Some tasks may be lost.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        isFileCorrupted \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(\"Error populating task list with saved tasks: \" + e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the task list containing the user\u0027s task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return List containing the user\u0027s Task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private String printList(List\u003cTask\u003e list, String listObjectDescription) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        response.append(String.format(\"Here are the %s in your list:\", listObjectDescription));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            response.append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            response.append(printTask(i + 1, list.get(i)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(response.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints a list of the user\u0027s tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return printList(list, \"tasks\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints a specific task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndex Index of the task as shown in the printed list (starting from 1)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String printTask(int listIndex, Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String taskString \u003d String.format(\"%d. %s\", listIndex, task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return taskString;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Prints the task added and number of tasks in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param task The task added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String echo(String task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String echo \u003d String.format(\"added: %s.\\nNow you have %d tasks in the list.\", task, list.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        System.out.println(echo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return echo;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void throwEmptyFieldException(String taskType, String ... fields) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StringBuilder emptyFields \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        boolean isFirstField \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (String field: fields) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (isFirstField) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                emptyFields.append(field);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                isFirstField \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                emptyFields.append(\"/\").append(field);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new IllegalArgumentException(\"OOPS! The \" + emptyFields + \" of \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void throwInvalidTaskSyntaxException(String taskType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        throw new IllegalArgumentException(String.format(\"OOPS! Invalid syntax. To add a %s, use:\\n%s\", taskType,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task.getFormat(taskType)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private String addTaskToList(Task task, boolean shouldEcho) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (shouldEcho) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return echo(task.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles user input command related to adding new task to the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Throws errors to be caught and handled by parser if user input commands are in an invalid format."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param input User input command for adding the task (unprocessed)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param shouldEcho Whether or not to echo the task added."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String add(String input, boolean isDone, boolean shouldEcho) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String[] splitInput \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String taskType \u003d splitInput[0];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"todo (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Todo(splitInput[1], isDone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                return addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"todo\\\\p{Blank}?\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"todo\", \"description\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"todo\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"deadline (\\\\S+\\\\s?)+ /by (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String[] splitDeadline \u003d splitInput[1].split(\" /by \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String deadlineDesc \u003d splitDeadline[0];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String by \u003d splitDeadline[1];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Deadline(deadlineDesc, by, isDone);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                return addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"deadline.+/by\\\\p{Blank}?\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    || input.matches(\"deadline\\\\p{Blank}+/by.?\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"deadline\", \"description\", \"date\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"deadline\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (input.matches(\"event (\\\\S+\\\\s?)+ /at (\\\\S+\\\\s?)+\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String[] splitEvent \u003d splitInput[1].split(\" /at \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String eventDesc \u003d splitEvent[0];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                String at \u003d splitEvent[1];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                Task newTask \u003d new Event(eventDesc, at, isDone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                return addTaskToList(newTask, shouldEcho);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else if (input.matches(\"event.+/at\\\\p{Blank}?\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    || input.matches(\"event\\\\p{Blank}+/at.?\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwEmptyFieldException(\"event\", \"description\", \"location\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                throwInvalidTaskSyntaxException(\"event\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"OOPS! There is no task of type \" + taskType + \"!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the marking of tasks in the list as done. Feedbacks to user if list index of task is invalid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndexString List index of task to mark as done (starting from 1)."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String markTaskAsDone(String listIndexString) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            int listIndexNumber \u003d Integer.parseInt(listIndexString);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task task \u003d list.get(listIndexNumber - 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            task.setDoneAsTrue();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", task);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) { // if list index is not in the list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d \"OOPS! This task index does not exist! Type \u0027list\u0027 to check out your tasks.\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (NumberFormatException ex) { // if list index string is not an integer"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d \"OOPS! The keyword \u0027done\u0027 is used to check off tasks as follows:\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"   done \u003ctask index\u003e\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Handles the deleting of tasks from task list. Feedbacks to user if list index of task is invalid."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param listIndexString List index of task to delete (starting from 1)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String deleteTask(String listIndexString) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            int listIndexNumber \u003d Integer.parseInt(listIndexString);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Task task \u003d list.get(listIndexNumber - 1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            list.remove(listIndexNumber - 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d \"The following task has been deleted:\\n\" + task;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d \"OOPS! This task index does not exist! Type \u0027list\u0027 to check out your tasks.\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (NumberFormatException ex) { // if list index string is not an integer"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String response \u003d \"OOPS! The keyword \u0027delete\u0027 is used to delete tasks as follows:\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    + \"   delete \u003ctask index\u003e\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a list of Task with descriptions containing the keyword."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param keyword The keyword used to filter Task descriptions."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return A list of Task with descriptions containing the keyword."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return printList(matchingTasks, \"matching tasks\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 241
    }
  },
  {
    "path": "src/main/java/junimo/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a Todo object which inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs an instance of Todo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param isDone Whether task is done or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Implements method specified by abstract class Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return String of Todo object in format for saving to and retrieving from hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String getParsedTask() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"todo \" + description + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Overrides Object equals method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param other Object compared to."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @return True if other is also a Todo object with the same description and isDone fields. False otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (other instanceof Todo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return description.equals(otherTodo.description) \u0026\u0026 (isDone \u003d\u003d otherTodo.isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 47
    }
  },
  {
    "path": "src/main/java/junimo/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 61
    }
  },
  {
    "path": "src/main/java/junimo/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.Junimo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Junimo junimo \u003d new Junimo(\"./data/saved-tasks.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Font.loadFont(Main.class.getResource(\"/fonts/rainyhearts.ttf\").toExternalForm(), 18);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Font.loadFont(Main.class.getResource(\"/fonts/Stardew_Valley.ttf\").toExternalForm(), 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            stage.setTitle(\"Junimo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(junimo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        junimo.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 43
    }
  },
  {
    "path": "src/main/java/junimo/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.Junimo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.ui.DialogBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Controller for junimo.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Junimo junimo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Blue-Junimo.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Image junimoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Purple-Junimo.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setDuke(Junimo d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        junimo \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                DialogBox.getDukeDialog(junimo.getWelcome(), junimoImage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String response \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                DialogBox.getDukeDialog(response, junimoImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Generates a response to user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return junimo.parseInputCommand(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 65
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"500.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #eca65f; -fx-border-color: #85361a; -fx-border-radius: 3; -fx-border-width: 3; -fx-background-radius: 3;\" text\u003d\"label\" textFill\u003d\"#56160c\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "             \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cFont name\u003d\"rainyhearts\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "             \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "             \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "             \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #85361a;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"junimo.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"420.0\" style\u003d\"-fx-background-color: #eca65f; -fx-border-color: #85361a; -fx-border-width: 4;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cFont name\u003d\"Stardew Valley Regular\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"420.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"80.0\" style\u003d\"-fx-background-color: #eca65f; -fx-border-color: #85361a; -fx-border-width: 4;\" text\u003d\"Send\" textFill\u003d\"#56160c\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cFont name\u003d\"Stardew Valley Regular\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" opacity\u003d\"0.9\" prefHeight\u003d\"558.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background: transparent; -fx-background-image: url(\u0027images/background.png\u0027); -fx-background-size: 100% 180%; "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                -fx-background-position: bottom center;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"488.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "src/test/java/junimo/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Write paper\", \"2022-01-21\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", deadline1.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(LocalDate.parse(\"2020-12-12\"), deadline1.by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, deadline1.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", deadline2.description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(LocalDate.parse(\"2022-01-21\"), deadline2.by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, deadline2.isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void invalidDateConstructorTest1() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with incorrect arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Eat Ice cream\", \"2023-90-23\", true));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void invalidDateConstructorTest2() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Do work\", \"wrong date\", false));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"deadline Eat Apple /by 2020-12-12\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, deadline.getParsedTask());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[D][\\u2713] Eat Apple (by: Dec 12 2020)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, deadline.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Eat Apple\", \"2020-12-12\", true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(deadline1.equals(deadline2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 61
    }
  },
  {
    "path": "src/test/java/junimo/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event1 \u003d new Event(\"Eat Apple\", \"NUS\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event2 \u003d new Event(\"Write paper\", \"Matt\u0027s House\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", event1.description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"NUS\", event1.at);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, event1.isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", event2.description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Matt\u0027s House\", event2.at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, event2.isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"event Eat Apple /at NUS\" + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, event.getParsedTask());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[E][\\u2713] Eat Apple (at: NUS)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, event.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event1 \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Event event2 \u003d new Event(\"Eat Apple\", \"NUS\", true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(event1.equals(event2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 46
    }
  },
  {
    "path": "src/test/java/junimo/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public enum SampleTask {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        DEADLINE(\"deadline Math Test /by 2020-08-31\", true,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Deadline(\"Math Test\", \"2020-08-31\", true)),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        EVENT(\"event Pool Party /at Matt\u0027s House\", false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Event(\"Pool Party\", \"Matt\u0027s House\", false)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TODO(\"todo Write English Essay\", false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                new Todo(\"Write English Essay\", false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final String command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        SampleTask(String command, boolean isDone, Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String getStoredString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return this.command + System.lineSeparator() + this.isDone + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static String getCorrectFormatSampleData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sample : SampleTask.values()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            data.append(sample.getStoredString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cTask\u003e getCorrectFormatExpectedTaskList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sample : SampleTask.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList.add(sample.task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void emptyConstructorTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), taskList.getTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addCorrectFormatTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (SampleTask sampleTask : SampleTask.values()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            taskList.add(sampleTask.command, sampleTask.isDone, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(getCorrectFormatExpectedTaskList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void correctFormatBufferedReaderConstuctorTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(getCorrectFormatExpectedTaskList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void markTaskAsDoneTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        taskList.markTaskAsDone(\"1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"[\\u2713]\", taskList.getTaskList().get(0).getCheckBox());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void deleteTaskTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new StringReader(getCorrectFormatSampleData()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TaskList taskList \u003d new TaskList(br);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        taskList.deleteTask(\"2\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTask\u003e expectedTaskList \u003d getCorrectFormatExpectedTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedTaskList.remove(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedTaskList, taskList.getTaskList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 97
    }
  },
  {
    "path": "src/test/java/junimo/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getFormatTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"deadline \u003ctask description\u003e /by \u003cyyyy-mm-dd\u003e\", Task.getFormat(\"deadline\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"event \u003cevent description\u003e /at \u003cevent location\u003e\", Task.getFormat(\"event\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"todo \u003ctask description\u003e\", Task.getFormat(\"todo\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 16
    }
  },
  {
    "path": "src/test/java/junimo/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package junimo.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import junimo.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Test with correct arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo1 \u003d new Todo(\"Eat Apple\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo2 \u003d new Todo(\"Write paper\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Eat Apple\", todo1.description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(false, todo1.isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(\"Write paper\", todo2.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(true, todo2.isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getParsedTaskTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedParsedTask \u003d \"todo Eat Apple\" + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + \"true\" + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedParsedTask, todo.getParsedTask());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        String expectedToString \u003d \"[T][\\u2713] Eat Apple\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedToString, todo.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo1 \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Todo todo2 \u003d new Todo(\"Eat Apple\", true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(todo1.equals(todo2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo eat chocolate"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline project /by 2020-05-22"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event meeting tomorrow /at home"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event run a marathon /at sentosa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline code website /by tonight"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo write book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo wash dishes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event book event /at library"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete this task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "find book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "find"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "delete 8"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "event event without location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "deadline deadline without date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\junimo.Junimo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "java -classpath ..\\bin junimo.Junimo \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "if ! javac -cp ../src/main/java/duke/*/*.java -Xlint:none -d ../bin ../src/main/java/*.java ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "# delete created \"data\" folder and \"saved-tasks.txt\" file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "rm -r data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "cp ACTUAL.TXT ACTUAL-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "dos2unix ACTUAL-UNIX.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "diff ACTUAL-UNIX.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 9,
      "-": 35
    }
  }
]
