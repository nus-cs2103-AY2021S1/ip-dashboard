[
  {
    "path": "data/dukeInvalid.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "rubbish"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "hehhee"
      }
    ],
    "authorContributionMap": {
      "munharsha": 2
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Class that makes a deadline reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param by          The due date of this deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException If date is not in the right format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Deadline(String description, String by) throws DateTimeParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localDate \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline object information in the format to be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Deadline information in a string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + localDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 45
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Main class where Duke program is run."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs the duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks \u003d storage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: File Loading error!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Duke dukeMessager \u003d new Duke();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        dukeMessager.run();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Runs the duke program and will terminate upon input \"bye\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeUnknownInputException      If users inputs invalid input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyToDoException         If todo is empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventException        If event is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineException     If deadline is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeInvalidDoneNumException    If done number entered is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyDeadlineTimeException If the deadline time is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeEmptyEventTimeException    If the event time is empty."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DukeDeleteException            If there are any other exceptions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException         If there is time passed in the wrong format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printGreeting();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            while (!Parser.isBye(input)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    if (Parser.isList(input)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printListOfTasks(this.tasks.getTasks());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isDone(input)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        int doneTask \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (doneTask + 1 \u003e tasks.numOfTasks() || doneTask \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeInvalidDoneNumException(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        tasks.markAsDone(doneTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isToDo(input)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyToDoException(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String tasker \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        ToDo todoTask \u003d new ToDo(tasker);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        tasks.addTask(todoTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printTaskAdd(todoTask, tasks.numOfTasks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isDeadline(input)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyDeadlineException(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String deadliner \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String[] deadlinerparts \u003d deadliner.split(\" /by \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (deadlinerparts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyDeadlineTimeException(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        Deadline deadlineTask \u003d new Deadline(deadlinerparts[0], deadlinerparts[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        tasks.addTask(deadlineTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printTaskAdd(deadlineTask, tasks.numOfTasks());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isEvent(input)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyEventException(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String eventer \u003d Parser.stringBuilder(input.split(\" \"), 1, input.split(\" \").length - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String[] eventParts \u003d eventer.split(\" /at \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (eventParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyEventTimeException(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        Event eventTask \u003d new Event(eventParts[0], eventParts[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printTaskAdd(eventTask, this.tasks.numOfTasks());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isDelete(input)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        int deleteTask \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (deleteTask + 1 \u003e tasks.numOfTasks() || deleteTask \u003c 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeDeleteException(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printDeleteMessage(tasks.getTask(deleteTask), tasks.numOfTasks() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        tasks.deleteTask(deleteTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else if (Parser.isFind(input)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        String[] findParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        if (findParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                            throw new DukeEmptyFindException(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        UI.printKeywordTasks(findParts[1], this.tasks.getTasks());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        throw new DukeUnknownInputException(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeUnknownInputException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyToDoException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyEventException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyDeadlineException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeInvalidDoneNumException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The invalid done number.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyDeadlineTimeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The description of a deadline time cannot be empty.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyEventTimeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The description of a event time cannot be empty.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeDeleteException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The invalid delete number.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"OOPS!!! The invalid date format has been keyed in. PLease enter in dd-MM-yyyy HH:mm format\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeNoMatchesExcpetion e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"ERROR: No matches found!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } catch (DukeEmptyFindException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    UI.printFormattedMessage(\"ERROR: Empty find body!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (sc.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printByeMessage();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        storage.save(storage.convertArrayToSaveFormat(this.tasks));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 135,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeDeleteException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeDeleteException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeDeleteException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyDeadlineException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyDeadlineTimeException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyDeadlineTimeException(String s) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 5
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty time for an event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyEventTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyEventTimeException with a relevant detail message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyEventTimeException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeEmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyFindException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyFindException(String s){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 5
    }
  },
  {
    "path": "src/main/java/DukeEmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an empty ToDo reminder."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeEmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeEmptyToDoException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeEmptyToDoException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid duke command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/DukeInvalidDoneNumException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid done number."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeInvalidDoneNumException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeInvalidDoneNumException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeInvalidDoneNumException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/DukeNoMatchesExcpetion.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeNoMatchesExcpetion extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeNoMatchesExcpetion(String s){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 6
    }
  },
  {
    "path": "src/main/java/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Thrown to indicate that the user has put in an invalid command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a DukeUnknownInputException with a relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param s Represents the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DukeUnknownInputException(String s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an event reminder."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The time/date of the event in terms of LocalDateTimeObject."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected LocalDateTime localTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs an Event object with the specified description and date and/or time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param at          The date/time of this event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws DateTimeParseException Throws if there is a wrong format of date/time passed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.localTime \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for saving."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for saving."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, at);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns the String representation of this event for the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return The String representation of this event for the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + localTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 51
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a parser that parses the different user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"bye\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"bye\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isBye(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.BYE.label);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"list\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"list\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isList(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.equals(TaskElement.LIST.label);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDone(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isToDo(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDeadline(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isEvent(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isDelete(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"done\"."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"done\"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDone(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DONE.label);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"todo\"."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"todo\"."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseToDo(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.TODO.label);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"deadline\"."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"deadline\"."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDeadline(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DEADLINE.label);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the remaining input to check for \"event\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"event\"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseEvent(String input) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.EVENT.label);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Parses the input to check for \"delete\"."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param input Input of the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return True if there is \"delete\"."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean parseDelete(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.DELETE.label);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Builds up a string ."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param arr   Array of the strings seperated."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param start Starting Index."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param end   Ending Index."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return Returns the string that is built."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static String stringBuilder(String[] arr, int start, int end) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (i \u003d\u003d end) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                store +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isFind(String input){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return input.split(\" \")[0].equals(TaskElement.FIND.label);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 126
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String DEFAULT_PATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Storage() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        path \u003d Paths.get(DEFAULT_PATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        File file \u003d new File(DEFAULT_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList load() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return convertTextToTask(Files.readAllLines(path));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: There is an error in reading the files\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: There is an error with the inputs from the txt file\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cString\u003e convertArrayToSaveFormat(TaskList tasklist) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (Task tasks : tasklist.getTasks()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            strings.add(tasks.writeSaveFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList convertTextToTask(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String[] currLine \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                Task currTask \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new ToDo(currLine[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Deadline(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                } else if (currLine[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask \u003d new Event(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                if (currLine[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    currTask.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                tasks.addTask(currTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: Incorrect inputs in data file!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void save(ArrayList\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            Files.write(path, strings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: There is error in writing to file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 81
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents an Task reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * If teh task is done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a task object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param description The description of this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Marks if the task is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printMarkAsDone(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Generates the string format for saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @return String format fro saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String store \u003d \"D |\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 1 |\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            store +\u003d \" 0 |\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        store +\u003d \" \" + this.description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean containsKeyword(String substring){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.description.contains(substring);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "munharsha": 65
    }
  },
  {
    "path": "src/main/java/TaskElement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public enum TaskElement {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private TaskElement(String label) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 17
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void markAsDone(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks.get(value).markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: Invalid Done Number!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void deleteTask(int value) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            this.tasks.remove(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: Invalid Done Number!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int numOfTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Task getTask(int value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.tasks.get(value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 43
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String writeSaveFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 17
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printFormattedMessage(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printHorizontalLine() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printByeMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printFormattedMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printTaskAdd(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printDeleteMessage(Task task, int sizeStore) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Now you have \" + String.valueOf(sizeStore) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printListOfTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        int sizeStore \u003d tasks.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            System.out.println(i + \".\" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printMarkAsDone(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static void printKeywordTasks(String substring, ArrayList\u003cTask\u003e stringStore) throws DukeNoMatchesExcpetion {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (int i \u003d 0; i \u003c stringStore.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if(stringStore.get(i).containsKeyword(substring)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                keywordTasks.add(stringStore.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if(keywordTasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new DukeNoMatchesExcpetion(\"ERROR: No matches found!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            printHorizontalLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            int sizeStore \u003d keywordTasks.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            for (int i \u003d 1; i \u003c sizeStore + 1; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                System.out.println(i + \".\" + keywordTasks.get(i - 1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            printHorizontalLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (DukeNoMatchesExcpetion e){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            UI.printFormattedMessage(\"ERROR: No matches found!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 92
    }
  },
  {
    "path": "src/test/UITest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class UITest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final InputStream ORIGINAL_IN \u003d System.in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String LINE \u003d \" ____________________________________________________________\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        System.setIn(ORIGINAL_IN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testShowGreeting() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printGreeting();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d \"Hello from\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                logo +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\nHello! I\u0027m Duke\\nWhat can I do for you?\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintTaskAdd(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printTaskAdd(new ToDo(\"Read Book\"), 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Task toDo \u003d new ToDo(\"Read Book\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Got it. I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                toDo.toString() +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Now you have \" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String.valueOf(1) +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \" tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testPrintDeleteMessage(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printDeleteMessage(new ToDo(\"Read Book\"), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Task toDo \u003d new ToDo(\"Read Book\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Noted. I\u0027ve removed this task:\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                toDo.toString() +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Now you have \" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                String.valueOf(1) +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \" tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void testByeMessage(){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        UI.printByeMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        String expected \u003d LINE +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"Bye. Hope to see you again soon!\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 101
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "blah"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 23-02-2020 00:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "deadline return book /by 123456789"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at 01-01-2020 12:30"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "event project meeting /at hello"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "munharsha": 15
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    rm help.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "munharsha": 4,
      "-": 36
    }
  }
]
