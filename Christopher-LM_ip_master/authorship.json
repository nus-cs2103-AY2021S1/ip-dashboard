[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"    mainClassName \u003d \"duke.tasks.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"    archiveBaseName \u003d \"duke_ip\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Christopher-LM":18,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":"Duke is a minimalistic task manager CLI app. It can add 3 different types of task which are todo, event and deadline. You can set a date for deadline and event tasks. You are also able to mark each task as complete or remove them from the list. This app serves to help you keep track of things in your life."},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"### `todo \u003cdescription\u003e`"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"Add a todo task to the list of tasks."},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"Example of usage:"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"`todo buy fish`"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"Expected outcome:"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"[T][âœ˜] buy fish"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"Now you have 3 tasks in the list."},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"### `deadline \u003cdescription\u003e /by \u003cdate\u003e`"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"Add a deadline task to the list of tasks. \u003cbr /\u003e"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"Note: `\u003cdate\u003e` must be of the format `YYYY-MM-DD`"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"Example of usage:"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"`deadline buy fish /by 2018-05-05`"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"Expected outcome:"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"[D][] buy fish (by: May 5 2018)"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"Now you have 7 tasks in the list."},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"### `event \u003cdescription\u003e /at \u003cdate\u003e`"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"Add an event task to the list.\u003cbr /\u003e"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"Note: `\u003cdate\u003e` must be in the format `YYYY-MM-DD`"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"Example of usage:"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"`event fly kite /at 2019-05-05`"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"Expected outcome:"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"[E][] fly kite (at: May 5 2019)"},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"Now you have 9 tasks in the list."},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"### `list`"},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"Shows all the tasks stored in the list."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":"Expected usage:"},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"`list`"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"Here are the tasks in your list:"},{"lineNumber":62,"author":{"gitId":"Christopher-LM"},"content":"1. [T][] buy books"},{"lineNumber":63,"author":{"gitId":"Christopher-LM"},"content":"2. [T][] fly kite"},{"lineNumber":64,"author":{"gitId":"Christopher-LM"},"content":"3. [E][] run 5km (by: Dec 2 2019)"},{"lineNumber":65,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":66,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":67,"author":{"gitId":"Christopher-LM"},"content":"### `done \u003ctask number\u003e`"},{"lineNumber":68,"author":{"gitId":"Christopher-LM"},"content":"Mark a task as done.\u003cbr /\u003e"},{"lineNumber":69,"author":{"gitId":"Christopher-LM"},"content":"Note: `\u003ctask number\u003e` must be within the number of tasks in the list."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"Christopher-LM"},"content":"Example of usage:"},{"lineNumber":72,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":73,"author":{"gitId":"Christopher-LM"},"content":"`done 2`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Christopher-LM"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":78,"author":{"gitId":"Christopher-LM"},"content":"This task has been marked as done:"},{"lineNumber":79,"author":{"gitId":"Christopher-LM"},"content":"[T][] fly kite"},{"lineNumber":80,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":81,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":82,"author":{"gitId":"Christopher-LM"},"content":"### `delete \u003ctask number\u003e`"},{"lineNumber":83,"author":{"gitId":"Christopher-LM"},"content":"Remove a task from the list.\u003cbr /\u003e"},{"lineNumber":84,"author":{"gitId":"Christopher-LM"},"content":"Note: `\u003ctask number\u003e` must be within the number of tasks in the list."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Christopher-LM"},"content":"`delete 1`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":93,"author":{"gitId":"Christopher-LM"},"content":"This task has been removed:"},{"lineNumber":94,"author":{"gitId":"Christopher-LM"},"content":"[T][] buy books"},{"lineNumber":95,"author":{"gitId":"Christopher-LM"},"content":"Now you have 4 tasks left in the list."},{"lineNumber":96,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":97,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":98,"author":{"gitId":"Christopher-LM"},"content":"### `find \u003ckeyword\u003e`"},{"lineNumber":99,"author":{"gitId":"Christopher-LM"},"content":"Searches the list of tasks to find tasks matching the keyword."},{"lineNumber":100,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":101,"author":{"gitId":"Christopher-LM"},"content":"Example of usage:"},{"lineNumber":102,"author":{"gitId":"Christopher-LM"},"content":"` find book`"},{"lineNumber":103,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":104,"author":{"gitId":"Christopher-LM"},"content":"Expected outcome:"},{"lineNumber":105,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":106,"author":{"gitId":"Christopher-LM"},"content":"Here are the matching tasks in your list:"},{"lineNumber":107,"author":{"gitId":"Christopher-LM"},"content":"1. [T] buy books"},{"lineNumber":108,"author":{"gitId":"Christopher-LM"},"content":"2. [E] return books to dad (at: May 12 2017)"},{"lineNumber":109,"author":{"gitId":"Christopher-LM"},"content":"```"},{"lineNumber":110,"author":{"gitId":"Christopher-LM"},"content":"###  `bye`"},{"lineNumber":111,"author":{"gitId":"Christopher-LM"},"content":"Terminates the app and closes the chat window."}],"authorContributionMap":{"Christopher-LM":91,"-":20}},{"path":"src/main/java/duke/tasks/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Bye Command. This command handles the bye input from users"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * to exit Duke."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    public ByeCommand() { }"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"        return null;"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":16}},{"path":"src/main/java/duke/tasks/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Command. This Command executes the necessary input from"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * the user."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"        return null;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * Returns if the command requires Duke to terminate."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     * @return if Duke is to be terminated."},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    public boolean isExit() {"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":21}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Deadline task that is created upon user input."},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"    protected String by;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor for a Deadline Task which stores the description of"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * the task and the deadline of it."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * @param description Task description."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * @param by Task deadline."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"        this.by \u003d by;"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        this.date \u003d LocalDate.parse(this.by);"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"     * Prints out an error when the format of the deadline is incorrect."},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"    public static String invalidInput() {"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"        return \"OOPS!!! The format of the Deadline is wrong.\";"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + this.dateFormatted() + \")\";"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":36}},{"path":"src/main/java/duke/tasks/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Represents a deadline command. This command handles the deadline input"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    private String deadlineTask;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the deadline string."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * @param deadline input from user."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public DeadlineCommand(String deadline) {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        this.deadlineTask \u003d deadline;"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"            //add event task to list of tasks"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            tasks.deadline(this.deadlineTask);"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            return Deadline.invalidInput();"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        //write to file"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"        String s \u003d storage.genList(tasks.getTaskLs());"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"        storage.writeToFile(\"data/duke.rtf\", s);"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        //Return String to print"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.deadlineString(this.deadlineTask);"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":37}},{"path":"src/main/java/duke/tasks/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Delete Command. This command handles the delete input"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    protected String toDelete;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the string to be deleted."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * @param delete string to be removed from list of tasks."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public DeleteCommand(String delete) {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        this.toDelete \u003d delete;"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"            String command \u003d this.toDelete.replaceAll(\"[^\\\\d.]\", \"\");"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"            int i \u003d Integer.parseInt(command.trim());"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            Task deletedTask \u003d tasks.taskLs.get(i - 1);"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"            int numTask \u003d tasks.taskLs.size();"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            String printGui \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + \"Noted. I\u0027ve removed this task: \" + \"\\n\";"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + deletedTask + \"\\n\";"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + \"Now you have \" + numTask + \" tasks in the list.\";"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"            //delete task from list of tasks"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"            tasks.delete(this.toDelete);"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"            //write to file"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"            String s \u003d storage.genList(tasks.getTaskLs());"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"            storage.writeToFile(\"data/duke.rtf\", s);"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"            return printGui;"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"            return \"Either input number is out of range of the list \" +"},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"                    \"of tasks or the input is not a number\";"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":45}},{"path":"src/main/java/duke/tasks/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Christopher-LM"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Christopher-LM"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Christopher-LM"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Christopher-LM"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":61}},{"path":"src/main/java/duke/tasks/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Done Command. This command handles the done input"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    private String done;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    public DoneCommand(String done) {"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"        this.done \u003d done;"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"            //remove event task from list of tasks"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"            tasks.done(this.done);"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"            return \"Either input number is out of range of the list \" +"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"                    \"of tasks or the input is not a number\";"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        //write to file"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"        String s \u003d storage.genList(tasks.getTaskLs());"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        storage.writeToFile(\"data/duke.rtf\", s);"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.doneString(this.done);"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    public abstract static class Command {"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        public void execute(TaskList tasks, UI ui, Storage storage) throws IOException { }"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"        public boolean isExit() {"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"            return false;"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":40}},{"path":"src/main/java/duke/tasks/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Represents the Duke Program. Helps manage user\u0027s tasks and keeps them in check."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    private UI ui;"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"    private Parser parser;"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"     * Creates the Duke object with its attributes."},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"     * @throws FileNotFoundException File containing list of task may not be found."},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    public Duke() throws FileNotFoundException {"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        ui \u003d new UI();"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"        parser \u003d new Parser();"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            storage \u003d new Storage(tasks);"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            System.out.println(e);"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"     * Replace this stub with your completed method."},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"    protected String getResponse(String input) throws IOException, DukeException {"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"        Command resultCommand \u003d parser.parse(input);"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"        return resultCommand.execute(tasks, ui, storage);"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"    public static void main(String[] args) throws DukeException, IOException {"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":45,"-":1}},{"path":"src/main/java/duke/tasks/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":" * Represents an Error when input is invalid."},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"    DukeException(String s) {"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"        super(s);"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":10}},{"path":"src/main/java/duke/tasks/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"public class ErrorCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"    protected String errorMsg;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"    public ErrorCommand() {"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"        this.errorMsg \u003d \"Sorry the input is of a wrong format\";"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"        return this.errorMsg;"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":16}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents an Event task that is created upon user input."},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"    protected String at;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor for an Event Task which stores the description"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * of the task and the specific timing of it."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * @param description Task description."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * @param at Task timing."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public Event(String description, String at) {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"        this.at \u003d at;"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        this.date \u003d LocalDate.parse(this.at);"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"     * Getter for the specific timing of the Event."},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"     * @return Task timing."},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"    public String getAt() {"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        return this.at;"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"     * Prints out an error when the format of the deadline is incorrect."},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"    public static String invalidInput() {"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"        return \"OOPS!!! The format of the Event is wrong.\";"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + this.dateFormatted() + \")\";"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":44}},{"path":"src/main/java/duke/tasks/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Represents an Event Command. This command handles the event input"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"public class EventCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    private String eventTask;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the event string."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * @param event input from user."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public EventCommand(String event) {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        this.eventTask \u003d event;"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"            //add event task to list of tasks"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            tasks.event(this.eventTask);"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            return Event.invalidInput();"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        //write to file"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"        String s \u003d storage.genList(tasks.getTaskLs());"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"        storage.writeToFile(\"data/duke.rtf\", s);"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.eventString(this.eventTask);"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":37}},{"path":"src/main/java/duke/tasks/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Find Command. This command handles the find input"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    private String toFind;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the find command string."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * @param toFind input from user."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public FindCommand(String toFind) {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        this.toFind \u003d toFind;"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        //find tasks with matching keywords in the string"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.find(this.toFind);"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":25}},{"path":"src/main/java/duke/tasks/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a help command. This command displays a list of"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * commands for the user."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    private String helpList;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the help string."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    public HelpCommand() {"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        //gets the list of help commands"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.help();"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":23}},{"path":"src/main/java/duke/tasks/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":9}},{"path":"src/main/java/duke/tasks/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":" * Represents a list command. This command handles the list input"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":" * from the user."},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"    private String listTask;"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the list string."},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    public ListCommand() { }"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        //gets the list of tasks"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.list();"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":20}},{"path":"src/main/java/duke/tasks/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    public Main() throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    public void start(Stage stage) {"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"            stage.setScene(scene);"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IOException | DukeException e) {"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":35}},{"path":"src/main/java/duke/tasks/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Jerry.jpg\"));"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Tom.jpg\"));"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"    public void setDuke(Duke d) throws IOException, DukeException {"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"        printHelp();"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"    private void handleUserInput() throws IOException, DukeException {"},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"        if (input.startsWith(\"bye\")) {"},{"lineNumber":50,"author":{"gitId":"Christopher-LM"},"content":"            Platform.exit();"},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"Christopher-LM"},"content":"            assert response !\u003d null : \"No response to be printed\";"},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"                    DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"Christopher-LM"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":58,"author":{"gitId":"Christopher-LM"},"content":"            );"},{"lineNumber":59,"author":{"gitId":"Christopher-LM"},"content":"            userInput.clear();"},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":63,"author":{"gitId":"Christopher-LM"},"content":"    private void printHelp() throws IOException, DukeException {"},{"lineNumber":64,"author":{"gitId":"Christopher-LM"},"content":"        String response \u003d duke.getResponse(\"help\");"},{"lineNumber":65,"author":{"gitId":"Christopher-LM"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":66,"author":{"gitId":"Christopher-LM"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":67,"author":{"gitId":"Christopher-LM"},"content":"        );"},{"lineNumber":68,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":69}},{"path":"src/main/java/duke/tasks/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":" * Represents a parser where the inputs from the user is filtered according to"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":" * the command issued."},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a command that is specified by the user. The command will be"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"     * executed in the main program."},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint input from the user."},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * @return type of command to be executed."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    public static Command parse(String toPrint) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"        assert toPrint !\u003d null : \"Input cannot be empty\";"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        if (toPrint.startsWith(\"list\")) {"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"            return new ListCommand();"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"done\")) {"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"            return new DoneCommand(toPrint);"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"delete\")) {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"            return new DeleteCommand(toPrint);"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"todo\")) {"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"            return new TodoCommand(toPrint);"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"event\")) {"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"            return new EventCommand(toPrint);"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"deadline\")) {"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"            return new DeadlineCommand(toPrint);"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"bye\")) {"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"            return new ByeCommand();"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"find\")) {"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"            return new FindCommand(toPrint);"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        } else if (toPrint.startsWith(\"help\")) {"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"            return new HelpCommand();"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"            return new ErrorCommand();"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":41}},{"path":"src/main/java/duke/tasks/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Storage system where the tasks lists and its content are"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":" * being stored in."},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    private static String rtfPath \u003d \"data/duke.rtf\";"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    private static String newLine \u003d System.lineSeparator();"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    public Storage(TaskList tasksLs) throws FileNotFoundException {"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        readFromFile(rtfPath, tasksLs);"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"     * Stores the list of tasks in a rtf file before Duke is terminated."},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"     * @param filePath location of rtf file."},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"     * @param textToAdd tasks to be added to the rtf file."},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"     * @throws IOException file may not be found in the path."},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"    public static void writeToFile(String filePath, String textToAdd) throws IOException {"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"        assert textToAdd !\u003d null : \"List of tasks cannot be empty\";"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"        fw.write(textToAdd);"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"        fw.close();"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"     * Loads the list of tasks from the rtf file when Duke is launched."},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"     * @param filePath location of rtf file."},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"     * @param taskLs tasks lists where tasks are being loaded into."},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"     * @throws FileNotFoundException file may not be found in the path."},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"    public static void readFromFile(String filePath, TaskList taskLs) throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"        checkDirectory(new File(\"data\"));"},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"        File f \u003d new File(rtfPath);"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"            f.createNewFile();"},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"Christopher-LM"},"content":"            e.printStackTrace();"},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":53,"author":{"gitId":"Christopher-LM"},"content":"        while (s.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":"            String eachTask \u003d s.nextLine();"},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":"            if (eachTask.startsWith(\"[T]\")) {"},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"                String[] description \u003d eachTask.split(\"%\");"},{"lineNumber":57,"author":{"gitId":"Christopher-LM"},"content":"                Todo todoTask \u003d new Todo(description[2]);"},{"lineNumber":58,"author":{"gitId":"Christopher-LM"},"content":"                markTaskDone(todoTask, description[1]);"},{"lineNumber":59,"author":{"gitId":"Christopher-LM"},"content":"                taskLs.add(todoTask);"},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":"            } else if (eachTask.startsWith(\"[D]\")) {"},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"                String[] description \u003d eachTask.split(\"%\");"},{"lineNumber":62,"author":{"gitId":"Christopher-LM"},"content":"                Deadline deadlineTask \u003d new Deadline(description[2], description[3]);"},{"lineNumber":63,"author":{"gitId":"Christopher-LM"},"content":"                markTaskDone(deadlineTask, description[1]);"},{"lineNumber":64,"author":{"gitId":"Christopher-LM"},"content":"                taskLs.add(deadlineTask);"},{"lineNumber":65,"author":{"gitId":"Christopher-LM"},"content":"            } else if (eachTask.startsWith(\"[E]\")) {"},{"lineNumber":66,"author":{"gitId":"Christopher-LM"},"content":"                String[] description \u003d eachTask.split(\"%\");"},{"lineNumber":67,"author":{"gitId":"Christopher-LM"},"content":"                Event eventTask \u003d new Event(description[2], description[3]);"},{"lineNumber":68,"author":{"gitId":"Christopher-LM"},"content":"                markTaskDone(eventTask, description[1]);"},{"lineNumber":69,"author":{"gitId":"Christopher-LM"},"content":"                taskLs.add(eventTask);"},{"lineNumber":70,"author":{"gitId":"Christopher-LM"},"content":"            } else { }"},{"lineNumber":71,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":74,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Christopher-LM"},"content":"     * Checks if task is done and marks it complete."},{"lineNumber":76,"author":{"gitId":"Christopher-LM"},"content":"     * @param addToList task to be added to task list."},{"lineNumber":77,"author":{"gitId":"Christopher-LM"},"content":"     * @param done string containing true or false."},{"lineNumber":78,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Christopher-LM"},"content":"    public static void markTaskDone(Task addToList, String done) {"},{"lineNumber":80,"author":{"gitId":"Christopher-LM"},"content":"        if (done.equalsIgnoreCase(\"true\")) {"},{"lineNumber":81,"author":{"gitId":"Christopher-LM"},"content":"            addToList.markAsDone();"},{"lineNumber":82,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":85,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Christopher-LM"},"content":"     * Checks if the file exists else create the data file."},{"lineNumber":87,"author":{"gitId":"Christopher-LM"},"content":"     * @param directory location of file."},{"lineNumber":88,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Christopher-LM"},"content":"    private static void checkDirectory(File directory) {"},{"lineNumber":90,"author":{"gitId":"Christopher-LM"},"content":"        if (!directory.exists()) {"},{"lineNumber":91,"author":{"gitId":"Christopher-LM"},"content":"            directory.mkdir();"},{"lineNumber":92,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":95,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Christopher-LM"},"content":"     * Generates the format for the type of tasks to be displayed in a list format."},{"lineNumber":97,"author":{"gitId":"Christopher-LM"},"content":"     * @param itemsLs list of tasks to be made into a string."},{"lineNumber":98,"author":{"gitId":"Christopher-LM"},"content":"     * @return string containing the tasks in the list of tasks."},{"lineNumber":99,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Christopher-LM"},"content":"    public static String genList(ArrayList\u003cTask\u003e itemsLs) {"},{"lineNumber":101,"author":{"gitId":"Christopher-LM"},"content":"        String s \u003d \"\";"},{"lineNumber":102,"author":{"gitId":"Christopher-LM"},"content":"        int i \u003d 1;"},{"lineNumber":103,"author":{"gitId":"Christopher-LM"},"content":"        for (Task n : itemsLs) {"},{"lineNumber":104,"author":{"gitId":"Christopher-LM"},"content":"            if (n instanceof Todo) {"},{"lineNumber":105,"author":{"gitId":"Christopher-LM"},"content":"                s \u003d s + \"[T]\" + \"%\" + n.isDone + \"%\" + n.description + newLine;"},{"lineNumber":106,"author":{"gitId":"Christopher-LM"},"content":"            } else if (n instanceof Deadline) {"},{"lineNumber":107,"author":{"gitId":"Christopher-LM"},"content":"                s \u003d s + \"[D]\" + \"%\" + n.isDone + \"%\" + n.description + \"%\" + ((Deadline) n).by + newLine;"},{"lineNumber":108,"author":{"gitId":"Christopher-LM"},"content":"            } else if (n instanceof Event) {"},{"lineNumber":109,"author":{"gitId":"Christopher-LM"},"content":"                s \u003d s + \"[E]\" + \"%\" + n.isDone + \"%\" + n.description + \"%\" + ((Event) n).at + newLine;"},{"lineNumber":110,"author":{"gitId":"Christopher-LM"},"content":"            } else { }"},{"lineNumber":111,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":113,"author":{"gitId":"Christopher-LM"},"content":"        return s;"},{"lineNumber":114,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":116,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":116}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Task that is created upon user input."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor which stores the description of the task"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"     * and initialises the completion of it to be false."},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"     * @param description Task description."},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        this.date \u003d null;"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"     * Formats the date into a certain pattern."},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"     * @return the date in string format."},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"    public String dateFormatted() {"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"     * Returns a string as a tick or a cross."},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"     * @return String representing a tick or a cross."},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"    public String getStatusIcon() {"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"     * Marks the task as completed."},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"    public void markAsDone() {"},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"        this.isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"     * Checks if the task is completed."},{"lineNumber":50,"author":{"gitId":"Christopher-LM"},"content":"     * @return if the task is completed."},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"    public boolean isDone() {"},{"lineNumber":53,"author":{"gitId":"Christopher-LM"},"content":"        return this.isDone;"},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Christopher-LM"},"content":"     * Getter for the description of the task."},{"lineNumber":58,"author":{"gitId":"Christopher-LM"},"content":"     * @return String representation of the description."},{"lineNumber":59,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":"    public String getDescription() {"},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"        return this.description;"},{"lineNumber":62,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":64,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":65,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Christopher-LM"},"content":"     * Prints out the error message when the input is invalid."},{"lineNumber":67,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Christopher-LM"},"content":"    public static String invalidInput() {"},{"lineNumber":69,"author":{"gitId":"Christopher-LM"},"content":"        return null;"},{"lineNumber":70,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":72,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"Christopher-LM"},"content":"    public String toString() {"},{"lineNumber":74,"author":{"gitId":"Christopher-LM"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + this.description;"},{"lineNumber":75,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":76}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Represents a TaskList of all the tasks managed in Duke."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    protected ArrayList\u003cTask\u003e taskLs;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"        taskLs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public ArrayList\u003cTask\u003e getTaskLs() {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        return this.taskLs;"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    public void add(Task toAdd) {"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        this.taskLs.add(toAdd);"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"     * Prints out a statement to inform users that the input"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"     * is invalid."},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"    public static void confused() {"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"        String str \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        System.out.println(str);"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"     * Removes the task from the list of tasks."},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"     * @param toDelete task to be removed."},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"    public void delete(String toDelete) {"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"        String command \u003d toDelete.replaceAll(\"[^\\\\d.]\", \"\");"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"        int i \u003d Integer.parseInt(command.trim());"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"        Task deletedTask \u003d this.taskLs.get(i - 1);"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"        this.taskLs.remove(i - 1);"},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":44,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Christopher-LM"},"content":"     * List all the tasks in the task list."},{"lineNumber":46,"author":{"gitId":"Christopher-LM"},"content":"     * @return output for the console."},{"lineNumber":47,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Christopher-LM"},"content":"    public String list() {"},{"lineNumber":49,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":50,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Here are the tasks in your list: \" + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"Christopher-LM"},"content":"        int size \u003d this.taskLs.size();"},{"lineNumber":52,"author":{"gitId":"Christopher-LM"},"content":"        int i \u003d 1;"},{"lineNumber":53,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":54,"author":{"gitId":"Christopher-LM"},"content":"        while (i !\u003d (size + 1)) {"},{"lineNumber":55,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + i + \". \" + this.taskLs.get(i - 1) + \"\\n\";"},{"lineNumber":56,"author":{"gitId":"Christopher-LM"},"content":"            i++;"},{"lineNumber":57,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":59,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":61,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Christopher-LM"},"content":"     * Marks the task as done."},{"lineNumber":63,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint contains int to mark the specific task as done."},{"lineNumber":64,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Christopher-LM"},"content":"    public void done(String toPrint) {"},{"lineNumber":66,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"Christopher-LM"},"content":"            String command \u003d toPrint.replaceAll(\"[^\\\\d.]\", \"\");"},{"lineNumber":68,"author":{"gitId":"Christopher-LM"},"content":"            int indexCommand \u003d Integer.parseInt(command.trim());"},{"lineNumber":69,"author":{"gitId":"Christopher-LM"},"content":"            Task completedTask \u003d this.taskLs.get(indexCommand - 1);"},{"lineNumber":70,"author":{"gitId":"Christopher-LM"},"content":"            completedTask.markAsDone();"},{"lineNumber":71,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":72,"author":{"gitId":"Christopher-LM"},"content":"            throw e;"},{"lineNumber":73,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":76,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a String for a done input to print out on the console."},{"lineNumber":78,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint user input."},{"lineNumber":79,"author":{"gitId":"Christopher-LM"},"content":"     * @return output for the console."},{"lineNumber":80,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Christopher-LM"},"content":"    public String doneString(String toPrint) {"},{"lineNumber":82,"author":{"gitId":"Christopher-LM"},"content":"        String command \u003d toPrint.replaceAll(\"[^\\\\d.]\", \"\");"},{"lineNumber":83,"author":{"gitId":"Christopher-LM"},"content":"        int indexCommand \u003d Integer.parseInt(command.trim());"},{"lineNumber":84,"author":{"gitId":"Christopher-LM"},"content":"        Task completedTask \u003d this.taskLs.get(indexCommand - 1);"},{"lineNumber":85,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":86,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Nice! I\u0027ve marked this task as done: \" + \"\\n\";"},{"lineNumber":88,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"[\" + completedTask.getStatusIcon() + \"] \" + completedTask.description;"},{"lineNumber":89,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":90,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":92,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a todo task and adds it to the list of tasks."},{"lineNumber":94,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint Description of task."},{"lineNumber":95,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Christopher-LM"},"content":"    public void todo(String toPrint) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"Christopher-LM"},"content":"            toPrint \u003d toPrint.substring(4);"},{"lineNumber":99,"author":{"gitId":"Christopher-LM"},"content":"            if (toPrint.isEmpty() | toPrint.length() \u003d\u003d 1) {"},{"lineNumber":100,"author":{"gitId":"Christopher-LM"},"content":"                throw new DukeException(\"\");"},{"lineNumber":101,"author":{"gitId":"Christopher-LM"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"Christopher-LM"},"content":"            Todo taskTodo \u003d new Todo(toPrint);"},{"lineNumber":103,"author":{"gitId":"Christopher-LM"},"content":"            this.taskLs.add(taskTodo);"},{"lineNumber":104,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":105,"author":{"gitId":"Christopher-LM"},"content":"        } catch (DukeException e) {"},{"lineNumber":106,"author":{"gitId":"Christopher-LM"},"content":"            throw e;"},{"lineNumber":107,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":110,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a string for a todo input to print out on the console"},{"lineNumber":112,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint user input"},{"lineNumber":113,"author":{"gitId":"Christopher-LM"},"content":"     * @return output for the console"},{"lineNumber":114,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"Christopher-LM"},"content":"    public String todoString(String toPrint) {"},{"lineNumber":116,"author":{"gitId":"Christopher-LM"},"content":"        toPrint \u003d toPrint.substring(4);"},{"lineNumber":117,"author":{"gitId":"Christopher-LM"},"content":"        Todo taskTodo \u003d new Todo(toPrint);"},{"lineNumber":118,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":119,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Got it. I\u0027ve added this task:\" + \"\\n\";"},{"lineNumber":120,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + taskTodo + \"\\n\";"},{"lineNumber":121,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Now you have \" + this.taskLs.size() + \" tasks in the list.\";"},{"lineNumber":122,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":123,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":125,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a event task and adds it to the list of tasks."},{"lineNumber":127,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint Description and at of task."},{"lineNumber":128,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Christopher-LM"},"content":"    public void event(String toPrint) {"},{"lineNumber":130,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"Christopher-LM"},"content":"            toPrint \u003d toPrint.substring(5);"},{"lineNumber":132,"author":{"gitId":"Christopher-LM"},"content":"            String[] arrToPrint \u003d toPrint.split(\"/at \");"},{"lineNumber":133,"author":{"gitId":"Christopher-LM"},"content":"            Event taskEvent \u003d new Event(arrToPrint[0], arrToPrint[1]);"},{"lineNumber":134,"author":{"gitId":"Christopher-LM"},"content":"            this.taskLs.add(taskEvent);"},{"lineNumber":135,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":136,"author":{"gitId":"Christopher-LM"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":137,"author":{"gitId":"Christopher-LM"},"content":"            throw e;"},{"lineNumber":138,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":141,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a string for a event input to print out on the console"},{"lineNumber":143,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint user input"},{"lineNumber":144,"author":{"gitId":"Christopher-LM"},"content":"     * @return output for the console"},{"lineNumber":145,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"Christopher-LM"},"content":"    public String eventString(String toPrint) {"},{"lineNumber":147,"author":{"gitId":"Christopher-LM"},"content":"        toPrint \u003d toPrint.substring(5);"},{"lineNumber":148,"author":{"gitId":"Christopher-LM"},"content":"        String[] arrtoPrint \u003d toPrint.split(\"/at \");"},{"lineNumber":149,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":150,"author":{"gitId":"Christopher-LM"},"content":"        Event taskEvent \u003d new Event(arrtoPrint[0], arrtoPrint[1]);"},{"lineNumber":151,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":152,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Got it. I\u0027ve added this task:\" + \"\\n\";"},{"lineNumber":153,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + taskEvent + \"\\n\";"},{"lineNumber":154,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Now you have \" + this.taskLs.size() + \" tasks in the list.\";"},{"lineNumber":155,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":156,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":158,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a deadline task and adds it to the list of tasks."},{"lineNumber":160,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint Description and by of task."},{"lineNumber":161,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"Christopher-LM"},"content":"    public void deadline(String toPrint) {"},{"lineNumber":163,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"Christopher-LM"},"content":"            toPrint \u003d toPrint.substring(8);"},{"lineNumber":165,"author":{"gitId":"Christopher-LM"},"content":"            String[] arrtoPrint \u003d toPrint.split(\"/by \");"},{"lineNumber":166,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":167,"author":{"gitId":"Christopher-LM"},"content":"            Deadline taskDeadline \u003d new Deadline(arrtoPrint[0], arrtoPrint[1]);"},{"lineNumber":168,"author":{"gitId":"Christopher-LM"},"content":"            this.taskLs.add(taskDeadline);"},{"lineNumber":169,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":170,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":171,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":172,"author":{"gitId":"Christopher-LM"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":173,"author":{"gitId":"Christopher-LM"},"content":"            throw e;"},{"lineNumber":174,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":177,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"Christopher-LM"},"content":"     * Creates a string for a deadline input to print out on the console"},{"lineNumber":179,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint user input"},{"lineNumber":180,"author":{"gitId":"Christopher-LM"},"content":"     * @return output for the console"},{"lineNumber":181,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"Christopher-LM"},"content":"    public String deadlineString(String toPrint) {"},{"lineNumber":183,"author":{"gitId":"Christopher-LM"},"content":"        toPrint \u003d toPrint.substring(8);"},{"lineNumber":184,"author":{"gitId":"Christopher-LM"},"content":"        String[] arrtoPrint \u003d toPrint.split(\"/by \");"},{"lineNumber":185,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":186,"author":{"gitId":"Christopher-LM"},"content":"        Deadline taskDeadline \u003d new Deadline(arrtoPrint[0], arrtoPrint[1]);"},{"lineNumber":187,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":188,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Got it. I\u0027ve added this task:\" + \"\\n\";"},{"lineNumber":189,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + taskDeadline + \"\\n\";"},{"lineNumber":190,"author":{"gitId":"Christopher-LM"},"content":"        printGui \u003d printGui + \"Now you have \" + this.taskLs.size() + \" tasks in the list.\";"},{"lineNumber":191,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":192,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":194,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"Christopher-LM"},"content":"     * Finds the tasks in the list of tasks matching the keyword."},{"lineNumber":196,"author":{"gitId":"Christopher-LM"},"content":"     * @param toPrint keyword entered by the user"},{"lineNumber":197,"author":{"gitId":"Christopher-LM"},"content":"     * @return String of tasks to be printed on the console"},{"lineNumber":198,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"Christopher-LM"},"content":"    public String find(String toPrint) {"},{"lineNumber":200,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"Christopher-LM"},"content":"            TaskList duplicateTaskLs \u003d new TaskList();"},{"lineNumber":202,"author":{"gitId":"Christopher-LM"},"content":"            duplicateTaskLs.taskLs \u003d new ArrayList\u003c\u003e(this.getTaskLs());"},{"lineNumber":203,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":204,"author":{"gitId":"Christopher-LM"},"content":"            toPrint \u003d toPrint.substring(4);"},{"lineNumber":205,"author":{"gitId":"Christopher-LM"},"content":"            String finalToPrint \u003d toPrint;"},{"lineNumber":206,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":207,"author":{"gitId":"Christopher-LM"},"content":"            duplicateTaskLs.taskLs.removeIf(n -\u003e !n.getDescription().contains(finalToPrint));"},{"lineNumber":208,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":209,"author":{"gitId":"Christopher-LM"},"content":"            String printGui \u003d \"\";"},{"lineNumber":210,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + \"Here are the matching tasks in your list: \" + \"\\n\";"},{"lineNumber":211,"author":{"gitId":"Christopher-LM"},"content":"            return duplicateTaskLs.findList(printGui);"},{"lineNumber":212,"author":{"gitId":"Christopher-LM"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":213,"author":{"gitId":"Christopher-LM"},"content":"            return \"Format of find command is incorrect\";"},{"lineNumber":214,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":217,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"Christopher-LM"},"content":"     * Lists the task from the task list."},{"lineNumber":219,"author":{"gitId":"Christopher-LM"},"content":"     * @param printGui Intro before listing the matching tasks."},{"lineNumber":220,"author":{"gitId":"Christopher-LM"},"content":"     * @return String of tasks in the task list."},{"lineNumber":221,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"Christopher-LM"},"content":"    public String findList(String printGui) {"},{"lineNumber":223,"author":{"gitId":"Christopher-LM"},"content":"        int size \u003d this.taskLs.size();"},{"lineNumber":224,"author":{"gitId":"Christopher-LM"},"content":"        int i \u003d 1;"},{"lineNumber":225,"author":{"gitId":"Christopher-LM"},"content":"        while (i !\u003d (size + 1)) {"},{"lineNumber":226,"author":{"gitId":"Christopher-LM"},"content":"            printGui \u003d printGui + i + \". \" + this.taskLs.get(i - 1) + \"\\n\";"},{"lineNumber":227,"author":{"gitId":"Christopher-LM"},"content":"            i++;"},{"lineNumber":228,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":230,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":232,"author":{"gitId":"Christopher-LM"},"content":"    public String help() {"},{"lineNumber":233,"author":{"gitId":"Christopher-LM"},"content":"        String printGui \u003d \"\";"},{"lineNumber":234,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"Here are the available commands: \" + \"\\n\";"},{"lineNumber":235,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"todo \u003cinstructions\u003e e.g todo read book\" + \"\\n\";"},{"lineNumber":236,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"deadline \u003cinstructions\u003e e.g deadline fly /by 2018-03-03\" + \"\\n\";"},{"lineNumber":237,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"event \u003cinstructions\u003e e.g event jog /at 2017-04-02\" + \"\\n\";"},{"lineNumber":238,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"done \u003cinteger\u003e e.g done 2 to mark the second task as done\" + \"\\n\";"},{"lineNumber":239,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"find \u003ckeyword\u003e e.g find book to find all tasks matching the keyword\" + \"\\n\";"},{"lineNumber":240,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"type list to see your current task list\" +\"\\n\";"},{"lineNumber":241,"author":{"gitId":"Christopher-LM"},"content":"        printGui +\u003d \"type bye to terminate Duke\";"},{"lineNumber":242,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":243,"author":{"gitId":"Christopher-LM"},"content":"        return printGui;"},{"lineNumber":244,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":246,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":246}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":" * Represents a Todo task that is created upon user input."},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor for a Todo task which stores the description"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"     * of the task."},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"     * @param description Task description."},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"     * Prints out an error when the format of the Todo is incorrect."},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    public static String invalidInput() {"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        return \"OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":28}},{"path":"src/main/java/duke/tasks/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents a todo command. This command handles the todo input"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * from users."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class TodoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    private String todoTask;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor that stores the description string."},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * @param todo input from user."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public TodoCommand(String todo) {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        this.todoTask \u003d todo;"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"    public String execute(TaskList tasks, UI ui, Storage storage) throws IOException {"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"            //add todo task to list of tasks"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"            tasks.todo(this.todoTask);"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"        } catch (DukeException e){"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"            return Todo.invalidInput();"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"        //write task to file"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        String s \u003d storage.genList(tasks.getTaskLs());"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"        storage.writeToFile(\"data/duke.rtf\", s);"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"        return tasks.todoString(this.todoTask);"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":35}},{"path":"src/main/java/duke/tasks/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":" * Represents the UI to be displayed on the console."},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":" * Prints out the format for the divider lines."},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"public class UI {"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    protected Scanner myObj;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"     * Constructor for the UI object that initialises a scanner for"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"     * user inputs."},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    public UI() {"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"        this.myObj \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"     * Takes in the user\u0027s next input and returns it as a string."},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"     * @return string format of user input."},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    public String nextInput() {"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"        return this.myObj.nextLine();"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"     * Prints the formatting line before and after a list of task is displayed."},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    public static void dividerLine() {"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":"        System.out.println(\"______________________________________________________\");"},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"     * Duke\u0027s intro when a user starts up Duke."},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":"    public static void intro() {"},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"        //Intro"},{"lineNumber":40,"author":{"gitId":"Christopher-LM"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":41,"author":{"gitId":"Christopher-LM"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":42,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":43}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"            \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Christopher-LM":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.tasks.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":"            \u003cFont name\u003d\"Monaco\" size\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"            \u003ccontent\u003e"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #FF8E76#FF8E76;\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"            \u003c/content\u003e"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"         \u003cfont\u003e"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":"            \u003cFont name\u003d\"Helvetica\" size\u003d\"11.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    \u003c/children\u003e"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Christopher-LM":26}},{"path":"src/test/java/duke/TasksTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":8,"author":{"gitId":"Christopher-LM"},"content":"import duke.tasks.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"Christopher-LM"},"content":"import duke.tasks.Event;"},{"lineNumber":10,"author":{"gitId":"Christopher-LM"},"content":"import duke.tasks.TaskList;"},{"lineNumber":11,"author":{"gitId":"Christopher-LM"},"content":"import duke.tasks.Todo;"},{"lineNumber":12,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":13,"author":{"gitId":"Christopher-LM"},"content":"public class TasksTest {"},{"lineNumber":14,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":15,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"    public void add_addTodoTask_todoTaskAdded() {"},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"        TaskList testTaskList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"        Todo testTask \u003d new Todo(\"borrow lamp\");"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"        testTaskList.add(testTask);"},{"lineNumber":21,"author":{"gitId":"Christopher-LM"},"content":"        assertEquals(\"borrow lamp\", testTaskList.getTaskLs().get(0).getDescription());"},{"lineNumber":22,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":24,"author":{"gitId":"Christopher-LM"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Christopher-LM"},"content":"    public void event_checkStatusOfTask_eventTaskDone() {"},{"lineNumber":26,"author":{"gitId":"Christopher-LM"},"content":"        TaskList testTaskList \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"Christopher-LM"},"content":"        Event testTask \u003d new Event(\"borrow books\", \"2018-08-08\");"},{"lineNumber":28,"author":{"gitId":"Christopher-LM"},"content":"        testTaskList.add(testTask);"},{"lineNumber":29,"author":{"gitId":"Christopher-LM"},"content":"        testTaskList.getTaskLs().get(0).markAsDone();"},{"lineNumber":30,"author":{"gitId":"Christopher-LM"},"content":"        assertEquals(true, testTaskList.getTaskLs().get(0).isDone());"},{"lineNumber":31,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":33,"author":{"gitId":"Christopher-LM"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"Christopher-LM"},"content":"    public void doneCommand_checkIfExitDuke_falseExit() {"},{"lineNumber":35,"author":{"gitId":"Christopher-LM"},"content":"        DoneCommand testDoneCommand \u003d new DoneCommand(\"testing\");"},{"lineNumber":36,"author":{"gitId":"Christopher-LM"},"content":"        assertEquals(false, testDoneCommand.isExit());"},{"lineNumber":37,"author":{"gitId":"Christopher-LM"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Christopher-LM"},"content":""},{"lineNumber":39,"author":{"gitId":"Christopher-LM"},"content":"}"}],"authorContributionMap":{"Christopher-LM":39}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Christopher-LM"},"content":"if"},{"lineNumber":17,"author":{"gitId":"Christopher-LM"},"content":"  ! ("},{"lineNumber":18,"author":{"gitId":"Christopher-LM"},"content":"    find ../src/main/java -name \"*.java\" \u003esources.txt"},{"lineNumber":19,"author":{"gitId":"Christopher-LM"},"content":"    javac -cp ../src -Xlint:none -d ../bin @sources.txt"},{"lineNumber":20,"author":{"gitId":"Christopher-LM"},"content":"  )"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":30,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":34,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"then"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":39,"author":{"gitId":"-"},"content":"else"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":42,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Christopher-LM":5,"-":37}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/TaskList.java"},{"lineNumber":2,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/Event.java"},{"lineNumber":3,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/Task.java"},{"lineNumber":4,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/Duke.java"},{"lineNumber":5,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/Deadline.java"},{"lineNumber":6,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/Todo.java"},{"lineNumber":7,"author":{"gitId":"Christopher-LM"},"content":"../src/main/java/DukeException.java"}],"authorContributionMap":{"Christopher-LM":7}}]
