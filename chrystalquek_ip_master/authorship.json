[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * AddCommand is a request to add a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final Date date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic AddCommand(TaskType taskType, String description, Date date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.taskType \u003d taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Adds a task to the TaskList, alerts user that a task is added, updates storage with added task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be modified."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage to be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tTask task \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tif (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttask \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttask \u003d new Deadline(description, date, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttask \u003d new Event(description, date, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tif (task !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttasks.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tui.showAddTask(task, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tstorage.saveList(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 43
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * A Command is a parsed request from the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Modifies tasks, ui and storage of the Duke instance depending on the type of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be modified."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage to be activated if there are any changes to TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Returns false for all commands except ExitCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @return Whether Command is an ExitCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 24
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Deadline is a type of Task but with a time limit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Deadline(String description, Date by, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.DEADLINE, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.getSavedString() + \" | \" + Ui.formatDate(by);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return date.equals(by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.toString() + \" (by: \" + Ui.formatDate(by) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 29
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DeleteCommand is a request to delete a Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final int idx;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic DeleteCommand(int idx) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.idx \u003d idx;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Deletes a task from the TaskList, alerts user that a task is deleted, updates storage with deleted task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be modified."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage to be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tui.showDeletedTask(tasks.removeTask(idx), tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tstorage.saveList(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 26
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DoneCommand is a request to mark a Task as done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final int idx;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic DoneCommand(int idx) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.idx \u003d idx;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Marks a task from the TaskList as done, alerts user that a task is marked as done, updates storage about"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * finished task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be modified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttasks.markAsDone(idx);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tui.showDoneTask(tasks.getTask(idx));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tstorage.saveList(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 29
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Duke is the application that the user is aware of."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks \u003d new TaskList(storage.initializeTasks());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Starts an execution of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * There is a Welcome, a series of Commands and finally a Goodbye from Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } catch (DukeException | TaskException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ui.showResponse(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 35,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(\"\\u2639 OOPS!!! I\u0027m sorry, but \" + msg + \" :-(\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Event is a type of Task but with a date when it is held."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Event(String description, Date at, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.EVENT, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.getSavedString() + \" | \" + Ui.formatDate(at);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return date.equals(at);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.toString() + \" (at: \" + Ui.formatDate(at) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 30
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DeleteCommand is a request to stop Duke from running."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * No action is required from ExitCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be modified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage to be activated if there are any changes to TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 22
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * ListCommand is a request to display all current tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final Date on;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final String keyWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic ListCommand(Date on, String keyWord) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.on \u003d on;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Displays all current tasks with their TaskType, done status and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks TaskList to be printed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param ui Ui to be used to display feedback messages."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param storage Storage is not activated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tui.showTaskList(tasks, on, keyWord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 28
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parser takes in a variety of strings, makes sense of the strings and creates relevant objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Parses dates that are of the accepted date formats."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param str String to parse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @return Date if successfully parsed, null if wrong date format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic static Date parseDate(String str) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tList\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-M-dd\", \"dd/M/yyyy HHmm\", \"dd/M/yyyy\", \"MMM d yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tfor (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new SimpleDateFormat(formatString).parse(str);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} catch (ParseException e) {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Parses in user inputs and generates commands based on the inputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param display User input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @return Command based on display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws TaskException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic static Command parse(String display) throws DukeException, TaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tif (display.equals(\"list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new ListCommand(null, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (display.length() \u003e\u003d 4 \u0026\u0026 display.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tint idx \u003d Integer.parseInt(String.valueOf(display.charAt(5))) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new DoneCommand(idx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tthrow new DukeException(\"task index is not a valid number\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (display.length() \u003e\u003d 6 \u0026\u0026 display.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tint idx \u003d Integer.parseInt(String.valueOf(display.charAt(7))) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new DeleteCommand(idx);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tthrow new DukeException(\"task index is not a valid number\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (display.length() \u003e\u003d 12 \u0026\u0026 display.startsWith(\"tasks due on\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (parseDate(display.substring(13)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tthrow new DukeException(\"time is of the wrong format\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new ListCommand(parseDate(display.substring(13)), null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (display.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (display.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tthrow new DukeException(\"keyword is absent\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new ListCommand(null, display.substring(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (display.equals(\"bye\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (display.length() \u003e\u003d 4 \u0026\u0026 display.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tif (display.length() \u003d\u003d 4 || display.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tthrow new TaskException(TaskType.TODO, \"description\",  \"cannot be empty.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\treturn new AddCommand(TaskType.TODO, display.substring(5), null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} else if (display.length() \u003e\u003d 8 \u0026\u0026 display.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tint idx \u003d display.indexOf(\" /by \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tif (idx \u003d\u003d -1 || display.length() \u003d\u003d idx + 5 || display.substring(idx + 5).isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tthrow new TaskException(TaskType.DEADLINE, \"time\", \"cannot be identified.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t} else if (idx \u003c\u003d 9 || display.substring(9, idx).isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tthrow new TaskException(TaskType.DEADLINE, \"description\", \"cannot be empty.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tif (parseDate(display.substring(idx + 5)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\tthrow new TaskException(TaskType.DEADLINE, \"time\", \"format is wrong.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\treturn new AddCommand(TaskType.DEADLINE, display.substring(9, idx),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\t\t\tparseDate(display.substring(idx + 5)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} else if (display.length() \u003e\u003d 5 \u0026\u0026 display.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tint idx \u003d display.indexOf(\" /at \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tif (idx \u003d\u003d -1 || display.length() \u003c idx + 5 || display.substring(idx + 5).isBlank()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tthrow new TaskException(TaskType.EVENT, \"time\", \"cannot be identified.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t} else if (idx \u003c\u003d 6 || display.substring(6, idx).isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tthrow new TaskException(TaskType.EVENT, \"description\", \"cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\tif (parseDate(display.substring(idx + 5)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\tthrow new TaskException(TaskType.EVENT, \"time\", \"format is wrong.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\treturn new AddCommand(TaskType.EVENT, display.substring(6, idx),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t\t\t\tparseDate(display.substring(idx + 5)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tthrow new DukeException(\"I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 108
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Storage ensures that the current tasks are always backed up in a separate file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Parses in a line from the storage file and returns a Task based on the details retrieved from that line."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param display A line from the storage file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @return Task based on the details retrieved from display."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate Task addTaskFromStorage(String display) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tString[] taskDetails \u003d display.split(\" \\\\| \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tString taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tboolean isDone \u003d taskDetails[1].equals(\"1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tString description \u003d taskDetails[2];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tif (taskType.equals(TaskType.TODO.getSymbol())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new ToDo(description, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (taskType.equals(TaskType.DEADLINE.getSymbol())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new Deadline(description, Parser.parseDate(taskDetails[3]), isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else if (taskType.equals(TaskType.EVENT.getSymbol())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new Deadline(description, Parser.parseDate(taskDetails[3]), isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tthrow new DukeException(\"I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * When Duke is just started up, it reads from the storage file, goes through each line, each corresponding to a"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * task, and returns the tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @return ArrayList of Tasks according to the storage file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e initializeTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tFile file \u003d new File(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (!file.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\treturn new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tScanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\twhile (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\ttasks.add(addTaskFromStorage(sc.nextLine()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (IOException | DukeException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tUi.showResponse(ex.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Overwrites the current storage file with updated taskList, or creates a new storage file with updated taskList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * if it currently does not exist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param taskList Details of TaskList are gotten from."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void saveList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tString[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tint nested \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tFile dir \u003d new File(directories[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tif (nested \u003c directories.length) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (!dir.exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tdir.mkdir();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tdir \u003d new File(String.join(\"/\", Arrays.copyOfRange(directories, 0, nested++)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tFile file \u003d new File(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (!file.exists()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tfile.createNewFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tFileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tString contents \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tfor (Task task : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tcontents +\u003d task.getSavedString() + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tfw.write(contents);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tfw.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (IOException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tthrow new DukeException(\"I could not save tasks.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 100
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Task is part of a TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected final TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Task(String description, TaskType taskType, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\"; //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Used by Storage to record the details of a Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String that contains the details of a Task and is saved in a specified file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return taskType.getSymbol() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean fulfilCriteria(Date date, String keyWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return (date \u003d\u003d null || isOccuringOn(date)) \u0026\u0026 (keyWord \u003d\u003d null || description.toLowerCase().contains(keyWord.toLowerCase()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"[\" + taskType.getSymbol() + \"]\" + getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 48
    }
  },
  {
    "path": "src/main/java/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public TaskException(TaskType taskType, String taskProperty, String msg) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(\"\\u2639 OOPS!!! The \" + taskProperty + \" of a \" + taskType.toString() + \" \" + msg);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 6
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * TaskList contains all the tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic Task getTask(int idx) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn tasks.get(idx);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tthrow new DukeException(\"task index out of bounds\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void markAsDone(int idx) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tgetTask(idx).markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic Task removeTask(int idx) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn tasks.remove(idx);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tthrow new DukeException(\"task index out of bounds\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttasks.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic int getCount() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn tasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic ArrayList\u003cString\u003e toString(Date date, String keyWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tint i \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tfor (Task task: tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tif (task.fulfilCriteria(date, keyWord)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\tlst.add((i++) + \". \" + task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn lst;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 56
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * TaskType that is allowed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tTODO{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String getSymbol() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tDEADLINE{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String getSymbol() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tEVENT{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String getSymbol() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"E\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t@Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tpublic String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\treturn \"event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic abstract String getSymbol();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 36
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * ToDo is the simplest kind of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.TODO, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 9
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Ui handles interactions with the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tthis.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic static String formatDate(Date date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn (new SimpleDateFormat(\"MMM d yyyy\")).format(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showWelcome() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showGoodbye(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn sc.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Each feedback message from Duke is properly formatted, e.g. enclosed in two lines"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param response ArrayList of feedback messages."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic static void showResponse(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tSystem.out.println(INDENT + LINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tfor (String resp: response) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tSystem.out.println(INDENT + \" \" + resp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tSystem.out.println(INDENT + LINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tSystem.out.println();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Overloaded formtResponse, takes in a variable number of strings, puts them in a ArrayList and passes it to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * other formatResponse method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param response Variable number of feedback messages."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic static void showResponse(String ...response) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tfor (String resp: response) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tlst.add(resp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(lst);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic String showListCount(TaskList tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\treturn \"Now you have \" + tasks.getCount() + \" task\" + (tasks.getCount() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * Displays all the tasks, based on date if date is not null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param tasks Tasks to display."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t * @param date Date to filter tasks by."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showTaskList(TaskList tasks, Date date, String keyWord) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tArrayList\u003cString\u003e lst \u003d tasks.toString(date, keyWord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tlst.add(0, \"Here are the \" + ((keyWord \u003d\u003d null) ? \"\" : \"matching \") + \"tasks in your list\" + ((date \u003d\u003d null) ?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\"\" :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\t\t\" that occur on \" + formatDate(date)) + \":\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(lst);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showDoneTask(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(\"Nice! I\u0027ve marked this task as done:\", INDENT + task.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showDeletedTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(\"Noted. I\u0027ve removed this task: \", INDENT + task.toString(), showListCount(taskList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void showAddTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tshowResponse(\"Got it. I\u0027ve added this task: \", INDENT + task.toString(), showListCount(taskList));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 91
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void run() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tInputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tByteArrayInputStream in \u003d new ByteArrayInputStream(\"bye\".getBytes());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tSystem.setIn(in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tnew Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tSystem.setIn(sysInBackup);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 15
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void parseDate_differentDateFormats() throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tDate date \u003d new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(Parser.parseDate(\"2020-03-04\"), date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(Parser.parseDate(\"04/03/2020 0000\"), date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(Parser.parseDate(\"04/03/2020\"), date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(Parser.parseDate(\"Mar 04 2020\"), date);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void parse_doneCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tParser.parse(\"done junknumber\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tassertEquals(ex.getMessage(), \"\\u2639 OOPS!!! I\u0027m sorry, but task index is not a valid number :-(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void parse_addCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tParser.parse(\"deadline return books /by\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tassertEquals(\"\\u2639 OOPS!!! The time of a deadline cannot be identified.\", ex.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tParser.parse(\"deadline   /by 2020-03-04\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tassertEquals(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\", ex.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void parse_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tParser.parse(\"junk input\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t} catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t\tassertEquals(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", ex.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 50
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tprivate final String description \u003d \"description\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void markAsDone_correctDoneStatusShown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tToDo todo \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(todo.toString(), \"[\" + todo.taskType.getSymbol() + \"]\" + \"[\\u2718]\" + \" \" + description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\ttodo.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertEquals(todo.toString(), \"[\" + todo.taskType.getSymbol() + \"]\" + \"[\\u2713]\" + \" \" + description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\tpublic void getIsOccuringOn_eventAgainstTwoDates() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tEvent event \u003d new Event(description, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\"), false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertTrue(event.isOccuringOn(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t\tassertFalse(event.isOccuringOn(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-04-04\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "if ! ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "chrystalquek": 4
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/ToDo.java"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 5
    }
  }
]
