[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-params\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    archiveBaseName \u003d \"yuki\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "//    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    File file \u003d new File(\"./text-ui-test/input.txt\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    standardInput \u003d new FileInputStream(file)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    File outputFile \u003d new File(\"./text-ui-test/ACTUAL.txt\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    standardOutput \u003d new FileOutputStream(outputFile)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Runtime.getRuntime().exec(\"./text-ui-test/runtest.sh\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 27,
      "-": 41
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 52
    }
  },
  {
    "path": "src/main/java/DialogBoxUser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DialogBoxUser extends HBox {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private DialogBoxUser(String text, Image img) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBoxUser.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static DialogBoxUser getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new DialogBoxUser(text, img);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 35
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Entry point to the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 12
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Yuki duke \u003d new Yuki();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setYuki(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Yuki yuki;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bot.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void setYuki(Yuki d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        yuki \u003d d;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (yuki.storage.isNew()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            dialogContainer.getChildren().add(DialogBox.getDukeDialog(yuki.printFormat(Yuki.UI.fileCreationSuccess()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    dukeImage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            dialogContainer.getChildren().add(DialogBox.getDukeDialog(yuki.printFormat(Yuki.UI.welcome()), dukeImage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String response \u003d yuki.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        response \u003d yuki.printFormat(response);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DialogBoxUser.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 50
    }
  },
  {
    "path": "src/main/java/Yuki.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.UndoableCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eYuki\u003c/code\u003e class starts the bot by creating a \u003ccode\u003eYuki\u003c/code\u003e object and checking for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * existing tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Yuki {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected static final List\u003cUndoableCommand\u003e PREV_COMMANDS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected static final Ui UI \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Yuki() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.storage \u003d Storage.createStorage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (storage.isNew()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                UI.print(UI.fileCreationSuccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                UI.print(UI.welcome());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Runs the whole program by taking in input commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Terminates only when an \u003cCode\u003eExitCommand\u003c/Code\u003e is given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        while (!isExit \u0026\u0026 input.hasNextLine()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String commandMessage \u003d input.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Command c;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (commandMessage.equalsIgnoreCase(\"undo\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    int latestCommand \u003d PREV_COMMANDS.size() - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    c \u003d new UndoCommand(PREV_COMMANDS.get(latestCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    PREV_COMMANDS.remove(latestCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    c \u003d Parser.parse(commandMessage.trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    if (c instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        PREV_COMMANDS.add((UndoableCommand) c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String s \u003d c.execute(storage, UI, taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                UI.print(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (c instanceof ExitCommand) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    input.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                UI.print(\" There\u0027s no more actions to undo! *woof*\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                UI.print(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a \u003ccode\u003eYuki\u003c/code\u003e object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param args array for command-line arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Yuki yuki \u003d new Yuki();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        yuki.run();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string containing the text in a specific format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param text to be included"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string containing the text in a specific format"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String printFormat(String text) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String headerLine \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return headerLine + text + \"\\n\" + headerLine;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Generates a response from \u003ccode\u003eYuki\u003c/code\u003e from user\u0027s input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param input command from user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return string representation of response from \u003ccode\u003eYuki\u003c/code\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            input \u003d input.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Command c;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (input.equalsIgnoreCase(\"undo\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                int latestCommand \u003d PREV_COMMANDS.size() - 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                c \u003d new UndoCommand(PREV_COMMANDS.get(latestCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                PREV_COMMANDS.remove(latestCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (c instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    PREV_COMMANDS.add((UndoableCommand) c);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String s \u003d c.execute(storage, Yuki.UI, taskList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (c instanceof ExitCommand) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                PauseTransition delay \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                delay.play();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \"Error: There\u0027s no more actions to undo! *woof*\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \"ERROR: \" + ex.getMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 140,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Thrown to indicate that a method call has resulted in an error and command is unable to complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Constructs an \u003ccode\u003eDukeException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.CheckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * The \u003ccode\u003eParser\u003c/code\u003e reads a command from user and perform various checks to determine the next action."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String IGNORE_CASE \u003d \"(?i)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String WILDCARD \u003d \"(.*)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eCommandState\u003c/code\u003e is an enum representing all possible command direction from user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    enum CommandState {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        LIST, DONE, BYE, TODO, DEADLINE, EVENT, DELETE, CHECK, FIND, HELP"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Obtain an instance of \u003ccode\u003eCommand\u003c/code\u003e from a text string input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003cp\u003eThe string must represent a valid command input in the correct format of \"command taskDetails\".\u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command the text to parse"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the command desired by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the command is unidentifiable"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Command currCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(IGNORE_CASE + CommandState.BYE.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.LIST.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.DONE.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new DoneCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.CHECK.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new CheckCommand(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.DELETE.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new DeleteCommand(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.FIND.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new FindCommand(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.HELP.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Task t \u003d checkAction(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            currCommand \u003d new AddCommand(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return currCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Obtain an instance of \u003ccode\u003eTask\u003c/code\u003e from a text string input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command the task command to be parse"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e to be acted on"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if task command is unidentifiable"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Task checkAction(String command) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(IGNORE_CASE + CommandState.DEADLINE.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Deadline.createTask(command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.EVENT.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Event.createTask(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(IGNORE_CASE + CommandState.TODO.name() + WILDCARD)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Todo.createTask(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String errMessage \u003d \" I\u0027m sorry but i do not know what you want to do. *woof*\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 87
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Storage for Tasks. A \u003ccode\u003eStorage\u003c/code\u003e represents a system that manages the storage and retrieval of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTask\u003c/code\u003e from a file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected final boolean isNew;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Storage(File file, boolean isNew) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.isNew \u003d isNew;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eStorage\u003c/code\u003e system containing a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a new file at the given directory if the file does not exists. Else, retrieves all tasks from the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * given file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param filePath FilePath representing the location of the file where all \u003ccode\u003eTask\u003c/code\u003e are saved"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return \u003ccode\u003eStorage\u003c/code\u003e object with all previous \u003ccode\u003eTask\u003c/code\u003e saved, if applicable"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if file cannot be created/ retrieved"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Storage createStorage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage \u003d \"Woof woof... I can\u0027t seem to create a file to store your tasks...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \"Your tasks would be forgotten at this rate...\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] pathNames \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String dirName \u003d pathNames[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String fileName \u003d pathNames[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Path currDir \u003d Paths.get(home);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Path targetPath \u003d Paths.get(currDir.toString(), filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            File directory \u003d new File(Paths.get(currDir.toString(), dirName).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            boolean isDirCreated;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            boolean isFileCreated;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (!java.nio.file.Files.exists(targetPath)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (directory.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isDirCreated \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File file \u003d new File(Paths.get(currDir.toString(), dirName, fileName).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File dir \u003d new File(Paths.get(currDir.toString(), dirName).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isDirCreated \u003d dir.mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File file \u003d new File(Paths.get(currDir.toString(), dirName, fileName).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (isDirCreated \u0026\u0026 isFileCreated) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    return new Storage(new File(targetPath.toString()), true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return new Storage(new File(targetPath.toString()), false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (InvalidPathException | DukeException | IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Loads all \u003ccode\u003eTask\u003c/code\u003e saved in file into the \u003ccode\u003eTaskList\u003c/code\u003e, if applicable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns a list of \u003ccode\u003eTask\u003c/code\u003e from previous inputs, if applicable"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003ccode\u003eTask\u003c/code\u003e cannot be retrieved due \u003ccode\u003eFileNotFound\u003c/code\u003e exception"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e temporaryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String taskType \u003d task.substring(0, 3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String status \u003d task.substring(3, 6);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                boolean isDone \u003d status.equals(\"[\" + \"\\u2713\" + \"]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (taskType.equals(\"[T]\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    t \u003d new Todo(task.substring(7), isDone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else if (taskType.equals(\"[D]\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    int indOfTime \u003d task.lastIndexOf(\"(FINISH by: \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    t \u003d new Deadline(task.substring(7, indOfTime),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            task.substring(indOfTime + 11, task.lastIndexOf(\")\")).trim(), isDone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    int indOfTime \u003d task.lastIndexOf(\"(APPEAR at: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    t \u003d new Event(task.substring(7, indOfTime),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            task.substring(indOfTime + 11, task.lastIndexOf(\")\")).trim(), isDone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                temporaryList.add(t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return temporaryList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Saves the given \u003ccode\u003eTask\u003c/code\u003e to file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList Task to be added to file"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003ccode\u003eTask\u003c/code\u003e fails to save"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e listOfTask \u003d taskList.getList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            for (Task task : listOfTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(task.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String s \u003d \" Unable to access file... *woof*\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(s);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns true is the file os new, else otherwise."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return Returns true is the file os new, else otherwise"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean isNew() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return isNew;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 154
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains the list of \u003ccode\u003eTask\u003c/code\u003e object. \u003ccode\u003eTaskList\u003c/code\u003e saves all existing \u003ccode\u003eTask\u003c/code\u003e in a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * list and contains functionalities that supports the addition and deletion of individual \u003ccode\u003eTask\u003c/code\u003e in the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final List\u003cTask\u003e listOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.listOfTask \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Adds the specified \u003ccode\u003eTask\u003c/code\u003e into the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the total number of existing \u003ccode\u003eTask\u003c/code\u003e objects in the list at this point in time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public int addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return listOfTask.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes the \u003ccode\u003eTask\u003c/code\u003e at the specified index in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e deleted from the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws IndexOutOfBoundsException if an invalid index is given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Task deleteTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t \u003d listOfTask.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the list containing all \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return Returns the list containing all \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return listOfTask;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the total number of \u003ccode\u003eTask\u003c/code\u003e in the list at this point in time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return Returns the total number \u003ccode\u003eTask\u003c/code\u003e in the list at this point in time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public int total() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return listOfTask.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks the specified \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e in list to be marked as completed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws IndexOutOfBoundsException if invalid index is given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String markDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d listOfTask.get(index).markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert listOfTask.get(index).getStatusIcon().equals(\"\\u2713\") : \"Failed to mark done!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through the whole list of \u003ccode\u003eTask\u003c/code\u003e and returns a list containing all \u003ccode\u003eTask\u003c/code\u003e on"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * the specified date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date Date to be checked"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a list containing all \u003ccode\u003eTask\u003c/code\u003e on that day."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e checkDate(LocalDate date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e sameDates \u003d new ArrayList\u003c\u003e(listOfTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        sameDates \u003d sameDates.stream().filter((task) -\u003e task.compareDate(date)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return sameDates;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through the whole list of \u003ccode\u003eTask\u003c/code\u003e and returns a list containing all \u003ccode\u003eTask\u003c/code\u003e with"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * the specified keyword."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param keywords to be searched"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a list containing all \u003ccode\u003eTask\u003c/code\u003e with the keyword."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e searchTask(String ... keywords) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Function\u003cTask, String\u003e parseString \u003d (t) -\u003e t.toString().toLowerCase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e validTask \u003d new ArrayList\u003c\u003e(listOfTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        validTask \u003d validTask.stream().filter((task) -\u003e Arrays.stream(keywords)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .anyMatch(keyword -\u003e parseString.apply(task).contains(keyword.toLowerCase())))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return validTask;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 108
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eUi\u003c/code\u003e deals with all the interactions with the user. A \u003ccode\u003eUi\u003c/code\u003e object contains all the methods"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * required to print out messages to users, specifically, it specifies a format of print in the \u003ccode\u003eprint\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * method that takes in a \u003ccode\u003eString\u003c/code\u003e object and prints the string in the desired format to users."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String LINES \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void print (String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(LINES + message + LINES);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String printFormat (String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return LINES + message + LINES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of a message to inform user that a new file has been successfully created."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String fileCreationSuccess() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" Woof! I am Yuki your assigned Task Manager!\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" I have just created a new file to store all your tasks!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" If you ever get stuck, enter help and I will be here for you!\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" So... What is my first assignment?\\n *Woof woof*\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of a message to welcome users back."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" Hello! I\u0027m Yuki *Woof*\\n What can I do for you?\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" Remember if you ever get stuck,\\n enter help and I will be here for you!\\n *Woof woof*\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of the total number of \u003ccode\u003eTask\u003c/code\u003e in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param total the number of \u003ccode\u003eTask\u003c/code\u003e in a list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the total number of \u003ccode\u003eTask\u003c/code\u003e in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String displayTotal(int total) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" Now you have \" + total + \" tasks in the list. Keep going!!\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 47
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eAddCommand\u003c/code\u003e executes a command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * to add a specific task as specified by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddCommand implements UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Task t;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public AddCommand(Task t) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to add the specified task as requested by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to add the specified task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int totalTaskBefore \u003d taskList.total();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int totalTask \u003d taskList.addTask(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert totalTask \u003d\u003d totalTaskBefore + 1 : \"Failed to add task!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" *WOOF* I have added:\\n   \" + t + \"\\n\" + ui.displayTotal(totalTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Undo this command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to remove the specified task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String undo(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String command \u003d \"delete\" + (taskList.getList().indexOf(this.t) + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d new DeleteCommand(command).execute(storage, ui, taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String header \u003d \" Add a task:\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String todoCommand \u003d \"  todo \u003cname\u003e\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String deadlineCommand \u003d \"  deadline \u003cname\u003e /by \u003cYYYY:MM:DD {HH:MM}\u003e\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String eventCommand \u003d \"  event \u003cname\u003e /at \u003cYYYY:MM:DD\\n  HH:MM-HH:MM\u003e\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return header + todoCommand + deadlineCommand + eventCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eAddCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eAddCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eAddCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof AddCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 81
    }
  },
  {
    "path": "src/main/java/duke/command/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eCheckCommand\u003c/code\u003e runs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a search in the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e occurring on this"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * specific date as specified by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class CheckCommand implements Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CheckCommand(String command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to run a search on the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * occurring on this specific date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to execute search"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String parseCommand \u003d command.substring(5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String[] inputDate \u003d parseCommand.trim().split(\"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            LocalDate dateFormat \u003d LocalDate.parse(formatDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e sameDates \u003d taskList.checkDate(dateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (sameDates.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return \" You have no task on this day! Have a good break! *Woof*\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                StringBuilder print \u003d new StringBuilder(\" Here is the list of ongoing tasks on \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(dateFormat) + \":\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                for (Task t : sameDates) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    print.append(\"   \").append(sameDates.indexOf(t) + 1).append(\". \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            .append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return print.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String message \u003d \" Please enter date in YYYY/MM/DD format! *Woof woof*\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" check \u003ckeyword1\u003e {...} : checks for tasks\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eCheckCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eCheckCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eCheckCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof CheckCommand;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 87
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eCommand\u003c/code\u003e interface provides a \u003ccode\u003eexecute\u003c/code\u003e method to execute the specified command. To"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * implement this interface, it is necessary to provide a definition for the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes this \u003ccode\u003eCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if command fails to execute"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eDeleteCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to delete a specific task as specified by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteCommand implements UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to delete the specified task as requested by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to delete the specified task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int totalTaskBefore \u003d taskList.total();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int ind \u003d Integer.parseInt(command.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Task t \u003d taskList.deleteTask(ind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            deletedTask \u003d t;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assert taskList.total() \u003d\u003d totalTaskBefore - 1 : \"Failed to delete task!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" *WOOF* I have removed:\\n   \" + t + \"\\n\" + ui.displayTotal(taskList.total());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String message \u003d \" *Woof!* This task does not exist!\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String message \u003d \" *Woof!* Please enter an integer value! I can\u0027t really read...\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Undo this command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to add the specified task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String undo(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (deletedTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(\" *Woof!* This task does not exist!\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Command undoCommand \u003d new AddCommand(deletedTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d undoCommand.execute(storage, ui, taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" delete \u003ctask number\u003e : deletes a task\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eDeleteCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eDeleteCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eDeleteCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof DeleteCommand;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 90
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eDoneCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to specify a specific \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DoneCommand implements UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Task doneTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to mark a specified task as completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to mark the specified task as completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfDescription \u003d command.indexOf(\"done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int taskInd \u003d Integer.parseInt(command.substring(indOfDescription + 4).trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String s \u003d taskList.markDone(taskInd - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            doneTask \u003d taskList.getList().get(taskInd - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String message \u003d \" *Woof!* This task does not exist!\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Undo this command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to unmark the specified task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String undo(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (doneTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(\" *Woof!* This task does not exist!\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d this.doneTask.undoDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" done \u003ctask number\u003e : mark as completed\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eDoneCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eDoneCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eDoneCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof DoneCommand;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 88
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eExitCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to close the \u003ccode\u003eScanner\u003c/code\u003e object and terminate program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to close \u003ccode\u003eScanner\u003c/code\u003e object and terminate program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" Bye. Hope to see you again soon! *Woof woof*\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" bye : terminates the program\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eExitCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eExitCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eExitCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof ExitCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eFindCommand\u003c/code\u003e runs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a search in the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e with specific"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * keywords specified by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to run a search on the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * with specific keywords."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to execute search"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String searchName \u003d command.substring(command.indexOf(\"find\") + 5).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e results \u003d taskList.searchTask(searchName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (results.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return \" I can\u0027t seem to find any task with this keyword! *woof*\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                StringBuilder s \u003d new StringBuilder(\" Here is the list of matching tasks in your storage:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                for (Task t : results) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    s.append(\"   \").append(results.indexOf(t) + 1).append(\". \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            .append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return s.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String message \u003d \" Please enter a keyword that you wish to search for...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Or you can just enter *list* to see all your task! *Woof woof!*\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" find \u003cYYYY:MM:DD\u003e : tasks on this day\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eFindCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eFindCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eFindCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof FindCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 82
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eHelpCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * specifies a list of all commands format to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to print format of all commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String userGuide \u003d \"Enter the following to execute the corresponding commands:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String end \u003d \"That\u0027s all! Have fun!!! *Woof woof*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return userGuide + AddCommand.commandToExecute() + DeleteCommand.commandToExecute()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DoneCommand.commandToExecute() + UndoCommand.commandToExecute()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + FindCommand.commandToExecute() + CheckCommand.commandToExecute()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + ListCommand.commandToExecute() + ExitCommand.commandToExecute()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + commandToExecute() + end;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" help : list all commands\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eListCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to list all \u003ccode\u003eTask\u003c/code\u003e stored in database."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to list all \u003ccode\u003eTask\u003c/code\u003e stored in database."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e listOfTask \u003d taskList.getList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert listOfTask !\u003d null : \"Failed to obtain list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (listOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" You have no task to complete! *WOOF*\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            StringBuilder s \u003d new StringBuilder(\" Here are the tasks in your list *Woof*:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            for (Task task : listOfTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                s.append(\"   \").append(listOfTask.indexOf(task) + 1).append(\".\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        .append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" list : list all tasks\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eListCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eListCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eListCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return o instanceof ListCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 66
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eUndoCommand\u003c/code\u003e undo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a previous \u003ccode\u003eCommand\u003c/code\u003e specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class UndoCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final UndoableCommand prevCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates an \u003ccode\u003eUndoCommand\u003c/code\u003e containing a previous \u003ccode\u003eCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param prevCommand the previous command to undo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public UndoCommand(UndoableCommand prevCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.prevCommand \u003d prevCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to undo a previous command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to undo the specified command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (prevCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" There\u0027s no command to undo! *woof*\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return prevCommand.undo(storage, ui, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation informing user how to execute this command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation informing users how to execute this command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String commandToExecute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" undo : undo an action\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 49
    }
  },
  {
    "path": "src/main/java/duke/command/UndoableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eUndoableCommand\u003c/code\u003e interface provides a \u003ccode\u003eundo\u003c/code\u003e method to undo the specified command. To"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * implement this interface, it is necessary to provide a definition for the \u003ccode\u003eundo\u003c/code\u003e method and methods in"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * its parent class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public interface UndoableCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Undo this command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param taskList List of task for this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to undo this action"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String undo(Storage storage, Ui ui, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eDeadline\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents the a \u003ccode\u003eTask\u003c/code\u003e with a deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * for completion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalDate toDoBy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Deadline(String description, LocalDate toDoBy, LocalTime time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d toDoBy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Deadline(String description, LocalDate toDoBy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d toDoBy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e object with the following states."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param description the description of this task to be stored"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param toDoBy the deadline of this task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param isDone the status of this task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Deadline(String description, String toDoBy, Boolean isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] scheduledTime \u003d toDoBy.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d LocalDate.of(Integer.parseInt(scheduledTime[2]),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Month.valueOf(scheduledTime[1].trim().toUpperCase()).getValue(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Integer.parseInt(scheduledTime[0]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (scheduledTime.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.time \u003d LocalTime.parse(scheduledTime[3].trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eDeadline\u003c/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e object must be in the form of \"Deadline description /by YYYY/MM/DD\" or"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \"Event description /by YYYY/MM/DD HH:MM\"."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create an \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return an \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Deadline createTask(String message) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage1 \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage2 \u003d \" Oops!! You gonna forget what this is about if you\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage3 \u003d \" Oops!! You did not state when you wanna finish this by...\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" Are you planning to procrastinate? *woof*\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String messageLowerCase \u003d message.toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfDescription \u003d messageLowerCase.indexOf(\"deadline\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d messageLowerCase.indexOf(\"/by\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(indOfDescription + 8, indOfTime).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String deadline \u003d message.substring(indOfTime + 3).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank() \u0026\u0026 deadline.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (deadline.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (description.isBlank()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String[] splitDeadline \u003d deadline.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] inputDate \u003d splitDeadline[0].trim().split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(formatDate, formatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    if (splitDeadline.length !\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        LocalTime time \u003d LocalTime.parse(splitDeadline[1].trim());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        return new Deadline(description, date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String errMessage \u003d \" Please input deadline in following format:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                                    + \"   YYYY/MM/DD HH:MM!\\n\" + \" *Woof woof*\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eDeadline\u003c/code\u003e task with the specified date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eDeadline\u003c/code\u003e task is same as the specified date. Else,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return toDoBy.compareTo(date) \u003d\u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eDeadline\u003c/code\u003e object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d \"[D]\" + super.toString() + \" (FINISH by: \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(toDoBy);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \")\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \" \" + time.toString() + \")\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 138
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eEvent\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents a \u003ccode\u003eTask\u003c/code\u003e with a specified"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * duration."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalDate schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Event(String description, LocalDate schedule, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Constructs a \u003ccode\u003eEvent\u003c/code\u003e object with the following states."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param description the description of this event to be stored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param schedule the time at which this event occurs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param isDone the status of this event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Event(String description, String schedule, Boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] scheduledTime \u003d schedule.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.schedule \u003d LocalDate.of(Integer.parseInt(scheduledTime[2]),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Month.valueOf(scheduledTime[1].trim().toUpperCase()).getValue(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Integer.parseInt(scheduledTime[0]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] times \u003d scheduledTime[3].split(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.startTime \u003d LocalTime.parse(times[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.endTime \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eEvent\u003c/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e object must be in the form of \"Event description /by YYYY/MM/DD HH:MM-HH:MM\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create an \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return an \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Event createTask(String message) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage1 \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage2 \u003d \" Oops!! Are you planning to ghost the event?\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" You didnt state the time of this event... *woof*\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage3 \u003d \" Oops!! You gonna forget what this is about if you\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String messageLowerCase \u003d message.toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfDescription \u003d messageLowerCase.indexOf(\"event\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d messageLowerCase.indexOf(\"/at\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(indOfDescription + 5, indOfTime).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String at \u003d message.substring(indOfTime + 3).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank() \u0026\u0026 at.isBlank()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (at.isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (description.isBlank()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String[] splitEventTime \u003d at.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] inputDate \u003d splitEventTime[0].split(\"/\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(formatDate, formatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] times \u003d splitEventTime[1].trim().split(\"-\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalTime startTime \u003d LocalTime.parse(times[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalTime endTime \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    return new Event(description, date, startTime, endTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String errMessage \u003d \" Please input event time in the following format:\\n \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            + \"   YYYY/MM/DD HH:MM-HH:MM!\\n\" + \" *Woof woof*\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eEvent\u003c/code\u003e task with the specified date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eEvent\u003c/code\u003e task is same as the specified date."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Else, otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return schedule.compareTo(date) \u003d\u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eEvent\u003c/code\u003e object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[E]\" + super.toString() + \" (APPEAR at: \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(schedule)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" \" + startTime + \"-\" + endTime + \")\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 123
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTask\u003c/code\u003e object represents a task containing a description. It contains a boolean \u003ccode\u003eisDone\u003c/code\u003e to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * state whether a particular task has been completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Task(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.description \u003d message.stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Task(String message, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.description \u003d message.stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the status icon of this \u003ccode\u003eTask\u003c/code\u003e depending on whether or not it has been completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the status icon of this \u003ccode\u003eTask\u003c/code\u003e depending on whether or not it has been completed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks this \u003ccode\u003eTask\u003c/code\u003e as completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" You have already completed this task! *Woof woof*\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" Good Job!!! You cleared this task:\\n\" + \"   [\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + this.getStatusIcon() + \"] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks this \u003ccode\u003eTask\u003c/code\u003e as incomplete."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of the message informing user if the command has been successfully executed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String undoDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" I\u0027ve have unmarked this task:\\n\" + \"   [\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + this.getStatusIcon() + \"] \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return \" This task is not done! *Woof woof*\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eTask\u003c/code\u003e with the specified date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eTask\u003c/code\u003e is same as the specified date. Else, otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTodo\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents the most basic form of a \u003ccode\u003eTask\u003c/code\u003e,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * consisting of only a description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Todo(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eTodo\u003c/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eTodo\u003c/code\u003e object must be in the form of \"todo description\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create a \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Todo createTask(String message) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage \u003d \" Oops!! You forgot to tell me what this task is about... *woof*\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfDescription \u003d message.toLowerCase().indexOf(\"todo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(indOfDescription + 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return new Todo(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eTodo\u003c/code\u003e object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 54
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: EDE6F9; -fx-background-radius: 15;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"#596186\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cFont name\u003d\"Chalkboard\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxUser.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: FBF4F9; -fx-background-radius: 15;\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: F9DBDB; -fx-padding: 2 10; -fx-background-radius: 10;\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"#596186\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003cFont name\u003d\"Chalkboard\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: DFFAF6;\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: DFFAF6;\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #9FE4DA; -fx-background-radius: 10;\" text\u003d\"Send!\" textFill\u003d\"#596186\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cFont name\u003d\"Chalkboard SE Light\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #C4CBF2;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: FBF4F9;\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 25
    }
  },
  {
    "path": "src/test/java/duke/ParserStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.CheckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ParserStub {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String ignoreCase \u003d \"(?i)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String wildcard \u003d \"(.*)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    enum CommandState {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + Parser.CommandState.BYE.name())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.LIST.name())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.DONE.name() + wildcard)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DoneCommand(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.CHECK.name() + wildcard)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new CheckCommand(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.DELETE.name() + \"(.*)\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DeleteCommand(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.FIND.name() + \"(.*)\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            checkAction(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new AddCommand(Todo.createTask(\"todo buy books\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String checkAction(String command) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + CommandState.DEADLINE.name() + wildcard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Deadline\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.EVENT.name() + wildcard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Event\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.TODO.name() + wildcard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Todo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String errMessage \u003d ui.printFormat(\" I\u0027m sorry but i do not know what you want to do. *woof*\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 55
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.CheckCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_nonActionCommands_success() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] commands \u003d new String[]{\"Bye\", \"list\", \"DoNe\", \"CheCK\", \"Delete\", \"fiNd\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Command[] expected \u003d new Command[]{new ExitCommand(), new ListCommand(), new DoneCommand(\"\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new CheckCommand(\"\"), new DeleteCommand(\"\"), new FindCommand(\"s\")};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cCommand\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (String s : commands) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            response.add(Parser.parse(s));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int ind \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isSame \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Command r : response) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (!r.equals(expected[ind])) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                isSame \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ind++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(isSame);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_invalidCommands_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Parser.parse(\"deaLine\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" I\u0027m sorry but i do not know what you want to do. *woof*\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"DeadLine\", \"Event\", \"ToDo\"})"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void checkActionTest_actionCommands_success(String s) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(ParserStub.checkAction(s).equalsIgnoreCase(s));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"DeadLine\", \"Event\", \"ToDo\"})"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_actionAddCommands_success(String s) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new AddCommand(Todo.createTask(\"todo buy books\")), ParserStub.parse(s));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"Delete\"})"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_actionDeleteCommands_success(String s) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new DeleteCommand(\"\"), ParserStub.parse(s));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"todobuy books\", \"   todo    buy books\", \"   todo buy books    \"})"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void executeTest_success(String s) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new AddCommand(Todo.createTask(\"todo buy books\")), ParserStub.parse(s.trim()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 86
    }
  },
  {
    "path": "src/test/java/duke/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class StorageStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static void save(List\u003cTask\u003e listOfTask, File file) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            for (Task t : listOfTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(t.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String s \u003d \" Unable to access file... *woof*\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 28
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.DeadlineStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.EventStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.TodoStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Storage storage \u003d Storage.createStorage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(storage.isNew());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Path currDir \u003d Paths.get(home);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Path targetPath \u003d Paths.get(currDir.toString(), filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        File file \u003d new File(targetPath.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task dTask \u003d DeadlineStub.createTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task eTask \u003d EventStub.createTask();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tTask \u003d TodoStub.createTask();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(dTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(eTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(tTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        StorageStub.save(listOfTask, file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Storage storageDuplicate \u003d Storage.createStorage(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(storageDuplicate.isNew());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Storage storage \u003d Storage.createStorage(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return storage.load();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void saveAndLoadTest() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task dTask \u003d DeadlineStub.createTask();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task eTask \u003d EventStub.createTask();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tTask \u003d TodoStub.createTask();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e listOfTask \u003d load();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task[] arr \u003d new Task[]{dTask, eTask, tTask};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Task t : listOfTask) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String expected \u003d arr[listOfTask.indexOf(t)].toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String actual \u003d t.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 68
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeadlineStub extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalDate toDoBy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    DeadlineStub(String description, LocalDate toDoBy, LocalTime time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d toDoBy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Task createTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new DeadlineStub(\"project\", LocalDate.parse(\"2019-02-20\", formatter),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d \"[D]\" + super.toString() + \" (FINISH by: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(toDoBy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \" \" + time.toString() + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 37
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_withoutTime_success() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"DeAdLine project /by 2019/02/20\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_withTime_success() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"DeAdLine tutorial /by 2019/02/20 12:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] tutorial (FINISH by: 20 February 2019 12:00)\", d.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  /by 2019/02/20 12:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You gonna forget what this is about if you\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDateTime_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  project /by \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You did not state when you wanna finish this by...\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Are you planning to procrastinate? *woof*\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_keyWord_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  project by 2019/02/20 16:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_wrongDateTimeFormat_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"DeAdLine project /by 20/02/2019 1800\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Please input deadline in following format:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \"   YYYY/MM/DD HH:MM!\\n\" + \" *Woof woof*\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d new Deadline(\"project\", \"20 February 2019\", true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✓] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_sameDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d new Deadline(\"project\", \"20 February 2019\", true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(d.compareDate(LocalDate.parse(\"2019-02-20\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_diffDate() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(d.compareDate(LocalDate.parse(\"2019-02-21\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samlsm": 108
    }
  },
  {
    "path": "src/test/java/duke/task/EventStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EventStub extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalDate schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    EventStub(String description, LocalDate schedule, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Locale.setDefault(Locale.UK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Task createTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new EventStub(\"project meeting\", LocalDate.parse(\"2019-02-20\", formatter),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[E]\" + super.toString() + \" (APPEAR at: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(schedule)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" \" + startTime + \"-\" + endTime + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 34
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_success() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT meeting /at      2019/02/20 16:00-18:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✘] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT  /at      2019/02/20 16:00-18:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You gonna forget what this is about if you\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDateTime_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting /at  \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! Are you planning to ghost the event?\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" You didnt state the time of this event... *woof*\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_keyWord_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting  \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_wrongDateTimeFormat_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting /at 2019-02-20 1600-1800 \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Please input event time in the following format:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \"    YYYY/MM/DD HH:MM-HH:MM!\\n\" + \" *Woof woof*\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT       meeting /at 2019/02/20    16:00-18:00 \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✘] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d new Event(\"meeting\", \"20 February 2019 16:00-18:00\", true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✓] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_sameDate() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT meeting /at 2019/02/20 16:00-18:00 \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(e.compareDate(LocalDate.parse(\"2019-02-20\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_diffDate() throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(d.compareDate(LocalDate.parse(\"2019-02-21\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 100
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void getStatusIconTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tDone \u003d new Task(\"buy books\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tNotDone \u003d new Task(\"buy books\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"\\u2713\", tDone.getStatusIcon());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"\\u2718\", tNotDone.getStatusIcon());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markAsDoneTest_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t \u003d new Task(\"buy books\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[✘] buy books\", t.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[✓] buy books\", t.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 25
    }
  },
  {
    "path": "src/test/java/duke/task/TodoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TodoStub extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    TodoStub(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Task createTask() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new TodoStub(\"buy bread\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 17
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_success() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo Buy Books\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"Buy Books\", t.description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Todo.createTask(\"toDo  \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \" Oops!! You forgot to tell me what this task is about... *woof*\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo        BuY BooKs        \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"BuY BooKs\", t.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void toStringTest() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo        BuY BooKs        \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[T][✘] BuY BooKs\", t.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d new Todo(\"buy bread\", true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[T][✓] buy bread\", t.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 47
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "if ! ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "#java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Yuki \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "samlsm": 7,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/DialogBox.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/Main.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/TaskList.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Storage.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Parser.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Ui.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/CheckCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/DukeException.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/MainWindow.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/Launcher.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/Yuki.java"
      }
    ],
    "authorContributionMap": {
      "samlsm": 22
    }
  }
]
