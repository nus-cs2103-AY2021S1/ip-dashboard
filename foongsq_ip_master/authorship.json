[
  {
    "path": "src/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][1] read harry potter"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[E][0] orbital splashdown /at 2020-08-26"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[E][1] family day /at 2020-08-24"
      }
    ],
    "authorContributionMap": {
      "foongsq": 4
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, LocalDate by, String time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() { //format time here"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                by + (time \u003d\u003d null || time.isEmpty() ? \"\" : time) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 48
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static void printTasks(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i).display());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static void printTaskAdded(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Added task: \" + task.display()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + list.size() + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String formatDate(String dateString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (dateString.contains(\"/\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            dateString \u003d dateString.replaceAll(\"\\\\/\", \"-\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String[] dateStringArr \u003d dateString.split(\"-\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dateString \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c dateStringArr.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (dateStringArr[i].length() \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateStringArr[i] \u003d \"0\" + dateStringArr[i];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateString + \"-\" + dateStringArr[i];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateStringArr[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static ArrayList\u003cTask\u003e handleDoneInput(String input, ArrayList\u003cTask\u003e list) throws DukeException{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(4).trim().isEmpty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(4).trim().matches(\"[0-9]+\")) { //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            index \u003d Integer.parseInt(input.substring(4).trim()); //convert string to integer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                Task newTask \u003d list.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.set(index - 1, newTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                System.out.println(\"Marked task as done:\\n\" + newTask.display());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number to mark as done (index is not valid)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to mark as done (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static ArrayList\u003cTask\u003e handleDeleteInput(String input, ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(6).trim().isEmpty()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(6).trim().matches(\"[0-9]+\")) { //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            index \u003d Integer.parseInt(input.substring(6).trim()); //convert string to integer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                Task removed \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.remove(index - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                System.out.println(\"Removed task:\\n\" + removed.display()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        + \"\\nYou have \" + list.size() + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number to delete (index is not valid)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to delete (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static ArrayList\u003cTask\u003e handleTodoInput(String input, ArrayList\u003cTask\u003e list) throws DukeException, IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(4).trim().isEmpty()) { //to make sure to do task is not empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            Task newTask \u003d new Todo(description.trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid todo\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static ArrayList\u003cTask\u003e handleDeadlineInput(String input, ArrayList\u003cTask\u003e list) throws DukeException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(8).trim().isEmpty() //to make sure deadline is not empty"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(8).trim().contains(\"/by\") //to make sure deadline contains /by"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(8).trim().startsWith(\"/by\") //to make sure deadline contains a task description"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(8).trim().endsWith(\"/by\")) { //to make sure deadline contains a deadline"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(8);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.trim().split(\"/by \")[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String by \u003d descriptionAndTime.trim().split(\"/by \")[1].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (by.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d by.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d by.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString); //convert string to integer wrap in try catch?"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                Task newTask \u003d new Deadline(description.trim(), d1, timeString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                list.add(newTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                return list;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the time in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        Task newTask \u003d new Deadline(description.trim(), d1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        list.add(newTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        return list;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    by \u003d formatDate(by);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    Task newTask \u003d new Deadline(description.trim(), d1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(newTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date and time in the format yyyy-mm-dd hhmm (eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid deadline\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static ArrayList\u003cTask\u003e handleEventInput(String input, ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(5).trim().isEmpty() //to make sure event is not empty"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(5).trim().contains(\"/at\") //to make sure event contains at"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(5).trim().startsWith(\"/at\") //to make sure event description is not empty"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(5).trim().endsWith(\"/at\")) { //to make sure event contains a time/date"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.split(\"/at \")[0];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String at \u003d descriptionAndTime.split(\"/at \")[1].trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (at.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d at.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d at.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString); //convert string to integer"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                Task newTask \u003d new Event(description.trim(), d2, timeString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                list.add(newTask);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                return list;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the time in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        Task newTask \u003d new Event(description.trim(), d2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        list.add(newTask);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        return list;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    at \u003d formatDate(at);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    Task newTask \u003d new Event(description.trim(), d2);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(newTask);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    printTaskAdded(newTask, list);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date and time in the format yyyy-mm-dd hhmm (eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid event\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Yooo, I\u0027m Duke.\\nWhat can I do for you today?\\nPlease enter dates and times in this format: yyyy-mm-dd hhmm\"); //Greeting"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d FileClass.readFileContents(\"src/data/duke.txt\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            while (!input.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (input.equalsIgnoreCase(\"bye\")) { //if user types \"bye\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    System.out.println(\"Bye bye!!! See you again next time :)\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    sc.close();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.equalsIgnoreCase(\"list\")) { //if user types \"list\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    printTasks(list);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.toLowerCase().startsWith(\"done\")) { //if user input starts with \"done\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list \u003d handleDoneInput(input, list);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    FileClass.writeListToFile(\"src/data/duke.txt\", list);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.toLowerCase().startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list \u003d handleDeleteInput(input, list);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    FileClass.writeListToFile(\"src/data/duke.txt\", list);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.toLowerCase().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list \u003d handleTodoInput(input, list);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    FileClass.writeListToFile(\"src/data/duke.txt\", list);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.toLowerCase().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list \u003d handleDeadlineInput(input, list);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    FileClass.writeListToFile(\"src/data/duke.txt\", list);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (input.toLowerCase().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list \u003d handleEventInput(input, list);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    FileClass.writeListToFile(\"src/data/duke.txt\", list);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    throw new DukeException(\"Please enter a valid deadline\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(de);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(fnfe);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (IOException ioe){"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(ioe);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 232,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, LocalDate at, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at, String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + (time \u003d\u003d null || time.isEmpty() ? \"\" : \" \" + time) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 47
    }
  },
  {
    "path": "src/main/java/FileClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class FileClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static ArrayList\u003cTask\u003e readFileContents(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (!taskString.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (Character.toString(taskString.charAt(1)).equals(\"T\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (Character.toString(taskString.charAt(4)).equals(\"0\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        list.add(new Todo(taskString.substring(6).trim()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        list.add(new Todo(taskString.substring(6).trim(), true));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else if (Character.toString(taskString.charAt(1)).equals(\"D\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String description \u003d taskString.substring(6).split(\"/by\")[0].trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d taskString.substring(6).split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (Character.toString(taskString.charAt(4)).equals(\"0\")) { //task is marked as not done yet"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Deadline(description, dateObj, time));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } else { //2020-02-03"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Deadline(description, dateObj));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else { //task is marked as done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Deadline(description, true, dateObj, time));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } else { //2020-02-03"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Deadline(description, true, dateObj));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String description \u003d taskString.substring(6).split(\"/at\")[0].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d taskString.substring(6).split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (Character.toString(taskString.charAt(4)).equals(\"0\")) { //task is marked as not done yet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Event(description, dateObj, time));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } else { //2020-02-03"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Event(description, dateObj));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else { //task is marked as done"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Event(description, true, dateObj, time));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } else { //2020-02-03"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            list.add(new Event(description, true, dateObj));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void writeListToFile(String filePath, ArrayList\u003cTask\u003e listToAdd) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        FileWriter resetfw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        resetfw.write(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        resetfw.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c listToAdd.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String task \u003d listToAdd.get(i).toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            task \u003d task.replace(\"(\", \"/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            task \u003d task.replace(\")\", \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            task \u003d task.replace(\":\", \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fw.write(\"\\n\" + task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 94
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return tick or X symbols"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 34
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "foongsq": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 37
    }
  }
]
