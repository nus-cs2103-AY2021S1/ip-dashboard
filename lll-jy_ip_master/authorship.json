[
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "T | 0 | borrow books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "E | 1 | cs2103 project meeting | At: 2020-09-30 12:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "D | 0 | cs2102 tutorial 1 | By: 2020-08-25"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "T | 0 | verify critical data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "T | 0 | return books"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            storage \u003d new ActualStorage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list \u003d storage.getList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ui.output(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.greeting();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        while (flag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                String input \u003d ui.readInput();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                c.execute(ui, list, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                flag \u003d !c.isExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                ui.output(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String path \u003d \"/Users/lijiayu/Desktop/cs2103/ip/data/tasks.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        new Duke(path).run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "lll-jy": 40
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public AddCommand(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int count \u003d list.size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d Parser.generate(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storage.addToList(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(count, task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String temp \u003d count \u003c 1 ? \" task\" : \" tasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String res \u003d \"Got it. I\u0027ve added this task:\\n\\t    \" + task +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \"\\n\\t  Now you have \" + (count + 1) + temp + \" in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.output(res);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof AddCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return input.equals(((AddCommand) obj).input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ByeCommand(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.printList(list, t -\u003e true, \"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 25
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    protected final String input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Command(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    abstract public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof Command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return input.equals(((Command) obj).input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int count \u003d list.size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int m \u003d Parser.isValidDelete(input, count) - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task toDelete \u003d list.get(m);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.remove(toDelete);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storage.reWrite(list);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String temp \u003d count \u003c\u003d 2 ? \" task\" : \" tasks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String str \u003d \"Noted. I\u0027ve removed this task:\\n\\t    \" + toDelete +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                \"\\n\\t  Now you have \" + list.size() + temp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.output(str);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return input.equals(((DeleteCommand) obj).input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 35
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int n \u003d Parser.isValidDone(input, list.size()) - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.get(n).markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        storage.reWrite(list);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t    \" + list.get(n);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.output(str);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return input.equals(((DoneCommand) obj).input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 30
    }
  },
  {
    "path": "src/main/java/duke/command/HappenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class HappenCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public HappenCommand(String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String description \u003d input.substring(7);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String[] detail \u003d description.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DateTimeFormatter parse \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (detail[0].equals(\"on\") \u0026\u0026 detail.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (detail[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, Task::happenToday, \"happening today \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(detail[1], parse);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, t -\u003e t.happenOnDate(date), \"happening on \" + date.format(output) + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (detail[0].equals(\"before\") \u0026\u0026 detail.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (detail[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, Task::happenBeforeToday, \"happening before today \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(detail[1], parse);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, t -\u003e t.happenBeforeDate(date),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                            \"happening before \" + date.format(output) + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (detail[0].equals(\"after\") \u0026\u0026 detail.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (detail[1].equals(\"today\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, Task::happenAfterToday, \"happening after today \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(detail[1], parse);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    return ui.printList(list, t -\u003e t.happenAfterDate(date),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                            \"happening after \" + date.format(output) + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (detail.length \u003d\u003d 3 \u0026\u0026 detail[0].equals(\"in\") \u0026\u0026 detail[2].equals(\"days\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                int n \u003d Integer.parseInt(detail[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (n \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"Please input a positive integer for happen in command.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return ui.printList(list, t -\u003e t.happenIn(n), \"happening in \" + n + \" days \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (detail[0].equals(\"between\") \u0026\u0026 detail.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                LocalDate date1 \u003d LocalDate.parse(detail[1], parse);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                LocalDate date2 \u003d LocalDate.parse(detail[2], parse);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (!date1.isBefore(date2)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"Latter date is before former date for happen between.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return ui.printList(list, t -\u003e t.happenBetween(date1, date2),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                        \"happening between \" + date1.format(output) + \" and \" + date2.format(output) + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"Invalid happen command input.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(\"Invalid date format. Please use yyyy-MM-dd.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof HappenCommand) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return input.equals(((HappenCommand) obj).input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 78
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public InvalidCommandException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 11
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ListCommand(String input) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String execute(Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ui.printList(list, t -\u003e true, \"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return obj instanceof ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 20
    }
  },
  {
    "path": "src/main/java/duke/component/ActualStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ActualStorage implements Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final TaskList list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ActualStorage(String filePath) throws FileNotFoundException, InvalidCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String taskType \u003d sc.next();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String description \u003d sc.next();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            int done \u003d sc.nextInt();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            description \u003d sc.next();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            description \u003d sc.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            while (description.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            description \u003d description.substring(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (taskType.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                toAdd \u003d new ToDo(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                int position \u003d description.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (position \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    System.out.println(taskType + description + \"error!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                String time \u003d description.substring(position + 6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                description \u003d description.substring(0, position - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (taskType.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    toAdd \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else if (taskType.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    toAdd \u003d new Event(description, time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"Invalid input file format\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                toAdd.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public TaskList getList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addToList(Task task) throws InvalidCommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fw.write(task.output());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void reWrite(TaskList list) throws InvalidCommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                fw.write(task.output());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 85
    }
  },
  {
    "path": "src/main/java/duke/component/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static int isValidDone(String cmd, int count) throws InvalidCommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (cmd.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (cmd.length() \u003c 6) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The task to mark as done cannot be empty.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                int n \u003d Integer.parseInt(cmd.substring(5));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (n \u003c 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index should be a positive integer.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else if (n \u003e count) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index does not exist.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return n;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index should be a number.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static int isValidDelete(String cmd, int count) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (cmd.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (cmd.length() \u003c 8) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The task to mark to delete cannot be empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                int n \u003d Integer.parseInt(cmd.substring(7));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                if (n \u003c 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index should be a positive integer.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                } else if (n \u003e count) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index does not exist.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                return n;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The task index should be a number.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Task generate(String cmd) throws InvalidCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (cmd.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (cmd.length() \u003c 5) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.charAt(4) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"Do you mean \u0027todo \" + cmd.substring(4) + \"\u0027\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.length() \u003c 6) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new ToDo(cmd.substring(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (cmd.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (cmd.length() \u003c 9) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.charAt(8) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"Do you mean \u0027deadline \" + cmd.substring(8) + \"\u0027\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.length() \u003c 10) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String description \u003d cmd.substring(9);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            int s \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (s \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! Time should be specified\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (description.length() - s \u003c 4) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"The time specification cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String time \u003d description.substring(s + 4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            description \u003d description.substring(0, s - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new Deadline(description, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (cmd.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (cmd.length() \u003c 6) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.charAt(5) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"Do you mean \u0027event \" + cmd.substring(5) + \"\u0027\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } else if (cmd.length() \u003c 7) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String description \u003d cmd.substring(6);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            int s \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (s \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"\\u2639 OOPS!!! Time should be specified\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (description.length() - s \u003c 4) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                throw new InvalidCommandException(\"The time specification cannot be empty.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String time \u003d description.substring(s + 4);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            description \u003d description.substring(0, s - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new Event(description, time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new ByeCommand(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (input.startsWith(\"happen \")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new HappenCommand(input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return new AddCommand(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 119
    }
  },
  {
    "path": "src/main/java/duke/component/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public TaskList getList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addToList(Task task) throws InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void reWrite(TaskList list) throws InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 12
    }
  },
  {
    "path": "src/main/java/duke/component/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class StorageStub implements Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public TaskList getList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void addToList(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void reWrite(TaskList list) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 18
    }
  },
  {
    "path": "src/main/java/duke/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public int print(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int n \u003d size();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task task \u003d get(i);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            if (predicate.test(task)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                System.out.println(\"\\t  \" + (i + 1) + \".\" + task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 25
    }
  },
  {
    "path": "src/main/java/duke/component/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private static final String horizontalLine \u003d \"\\t\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void print(String str) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void output(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        print(horizontalLine + \"\\n\\t  \" + message + \"\\n\" + horizontalLine + \"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String printList(TaskList list, Predicate\u003cTask\u003e predicate, String note) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        System.out.println(horizontalLine + \"\\n\\t  \" + \"Here are the tasks \" + note + \"in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int n \u003d list.print(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        System.out.println(horizontalLine + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return note + n;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        output(\"Hello! I\u0027m Duke\\n\\t  What can I do for you?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        output(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final LocalDate byTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Deadline(String description, String byTime) throws InvalidCommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.byTime \u003d LocalDate.parse(byTime,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(\"Invalid input date, please input as yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return date.isEqual(byTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenToday() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenOnDate(LocalDate.now());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeDate(LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return byTime.isBefore(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeToday() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenBeforeDate(LocalDate.now());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterDate(LocalDate date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return byTime.isAfter(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterToday() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenAfterDate(LocalDate.now());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBetween(LocalDate date1, LocalDate date2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super.happenBetween(date1, date2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return !byTime.isAfter(date2) \u0026\u0026 !byTime.isBefore(date1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenIn(int n) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super.happenIn(n);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenBetween(LocalDate.now(), LocalDate.now().plusDays(n));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return !isDone \u0026\u0026 byTime.isBefore(LocalDate.now());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"D\" + super.output() + \" | By: \" + byTime + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        String overdue \u003d isOverdue() ? \" This is overdue! The deadline has passed!!!\" : \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                byTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\" + overdue;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline o \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return description.equals(o.description) \u0026\u0026 byTime.isEqual(o.byTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 90
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private final LocalDateTime atTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Event(String description, String atTime) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            this.atTime \u003d LocalDateTime.parse(atTime,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(\"Invalid input datetime, please input as yyyy-MM-dd HH:mm.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return date.isEqual(atTime.toLocalDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenToday() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenOnDate(LocalDate.now());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeDate(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return atTime.toLocalDate().isBefore(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeToday() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenBeforeDate(LocalDate.now());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterDate(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return atTime.toLocalDate().isAfter(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterToday() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenAfterDate(LocalDate.now());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBetween(LocalDate date1, LocalDate date2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate date \u003d atTime.toLocalDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return !date.isAfter(date2) \u0026\u0026 !date.isBefore(date1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenIn(int n) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return happenBetween(LocalDate.now(), LocalDate.now().plusDays(n));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"E\" + super.output() + \" | At: \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                atTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                atTime.format(DateTimeFormatter.ofPattern(\"hh:mm a   MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof Event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event o \u003d (Event) obj;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return description.equals(o.description) \u0026\u0026 atTime.isEqual(o.atTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void markAsDone() throws InvalidCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            throw new InvalidCommandException(\"The task \" + this + \" has already been done.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \" | \" + done + \" | \" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenToday() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeDate(LocalDate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBeforeToday() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterDate(LocalDate date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenAfterToday() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenBetween(LocalDate date1, LocalDate date2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean happenIn(int n) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 68
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"T\" + super.output() + \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else if (obj instanceof ToDo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ToDo o \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return description.equals(o.description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 29
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 12
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysFalse() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new AddCommand(\"anything\").isExit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new AddCommand(\"todo anything\").isExit());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new AddCommand(\"event anything\").isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new AddCommand(\"deadline anything\").isExit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void executeExceptionHelper(String s, Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        AddCommand a \u003d new AddCommand(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            a.execute(ui, list, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Parser.generate(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (Exception e2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                assertEquals(e2.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(new ToDo(\"hello\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"bash\", ui, list, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done\", ui, list, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete\", ui, list, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"happen\", ui, list, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"todo\", ui, list, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"deadline do something\", ui, list, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"event meeting /at\", ui, list, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"event meeting /at 2020-08-09\", ui, list, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validCommand_addTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task2 \u003d new ToDo(\"world\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String res \u003d new AddCommand(\"todo hello\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\\t    \" + task +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \"\\n\\t  Now you have 1 task in the list.\", res);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String res2 \u003d new AddCommand(\"todo world\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task:\\n\\t    \" + task2 +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \"\\n\\t  Now you have 2 tasks in the list.\", res2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 71
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ByeCommand b \u003d new ByeCommand(\"bye\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertTrue(b.isExit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_nothingWrong() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ByeCommand b \u003d new ByeCommand(\"bye\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(\"bye\", b.execute(ui, list, storage));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 27
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysFalse() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DeleteCommand(\"delete \").isExit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DeleteCommand(\"delete 3\").isExit());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DeleteCommand(\"delete 0\").isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DeleteCommand(\"delete -3\").isExit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DeleteCommand(\"delete anything\").isExit());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void executeExceptionHelper(String s, Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DeleteCommand a \u003d new DeleteCommand(s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            a.execute(ui, list, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Parser.isValidDelete(s, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (Exception e2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                assertEquals(e2.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(new ToDo(\"hello\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete 0\", ui, list, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete -3\", ui, list, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete 5\", ui, list, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete anything\", ui, list, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete 3 5\", ui, list, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"delete \", ui, list, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validCommand_deleteTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task1 \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task2 \u003d new ToDo(\"world\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task3 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task:\\n\\t    \" + task1 +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \"\\n\\t  Now you have 2 tasks\", new DeleteCommand(\"delete 1\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task:\\n\\t    \" + task3 +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \"\\n\\t  Now you have 1 task\", new DeleteCommand(\"delete 2\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task:\\n\\t    \" + task2 +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    \"\\n\\t  Now you have 0 task\", new DeleteCommand(\"delete 1\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 73
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysFalse() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DoneCommand(\"done \").isExit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DoneCommand(\"done 3\").isExit());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DoneCommand(\"done 0\").isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DoneCommand(\"done -3\").isExit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new DoneCommand(\"done anything\").isExit());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void executeExceptionHelper(String s, Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        DoneCommand a \u003d new DoneCommand(s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            a.execute(ui, list, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                Parser.isValidDone(s, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            } catch (Exception e2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                assertEquals(e2.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidCommand_throwException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done 0\", ui, list, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done -3\", ui, list, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done 5\", ui, list, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done anything\", ui, list, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done 3 5\", ui, list, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        executeExceptionHelper(\"done \", ui, list, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_markDoneAsDone_throwException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String res \u003d new DoneCommand(\"done 1\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"The task \" + task + \" has already been done.\", e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validCommand_doneTask() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Task task1 \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        list.add(task1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String res \u003d new DoneCommand(\"done 1\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\\t    \" + task1, res);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 87
    }
  },
  {
    "path": "src/test/java/duke/command/HappenCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class HappenCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new HappenCommand(\"happen on today\").isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void unrecognizedCommandHelper(String s, Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new HappenCommand(s).execute(ui, list, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid happen command input.\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_unrecognizedCommand_throwException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen \", ui, list, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen anything\", ui, list, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen onward\", ui, list, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen on 1 2 3\", ui, list, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen after 1 2\", ui, list, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen in 3 months\", ui, list, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen between a b c\", ui, list, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        unrecognizedCommandHelper(\"happen between a\", ui, list, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void invalidDateFormatHelper(String s, Ui ui, TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new HappenCommand(s).execute(ui, list, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid date format. Please use yyyy-MM-dd.\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidDateFormat_throwException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        invalidDateFormatHelper(\"happen on 2020\", ui, list, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        invalidDateFormatHelper(\"happen on tomorrow\", ui, list, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        invalidDateFormatHelper(\"happen before tomorrow\", ui, list, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        invalidDateFormatHelper(\"happen between 2020-08-09 2020/09/01\", ui, list, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_nonPositiveInDays_throwException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new HappenCommand(\"happen in 0 days\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Please input a positive integer for happen in command.\", e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new HappenCommand(\"happen in -3 days\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Please input a positive integer for happen in command.\", e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_invalidBetween_throwException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            new HappenCommand(\"happen between 2020-09-01 2020-08-01\").execute(ui, list, storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Latter date is before former date for happen between.\", e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_validCommand_showList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate later \u003d LocalDate.now().plusDays(2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String lt \u003d later.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"assignment 1\", \"2021-09-01\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"assignment 2\", \"2021-09-02\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"assignemnt 3\", \"2019-09-01\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"today assign 1\", td));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"today assign 2\", td));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Deadline(\"in 2 days\", lt));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Event(\"meeting 1\", \"2021-09-01 11:00\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Event(\"meeting 2\", \"2021-09-01 19:00\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Event(\"today meeting 1\", td + \" 12:00\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            list.add(new Event(\"later meeting\", lt + \" 13:00\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening today 3\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen on today\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening on Sep 1 2021 3\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen on 2021-09-01\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening on Aug 31 2019 0\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen on 2019-08-31\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening before today 1\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen before today\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening before Jan 1 2020 1\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen before 2020-01-01\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening before Jan 1 2018 0\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen before 2018-01-01\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening after today 6\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen after today\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening after Jan 1 2021 4\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen after 2021-01-01\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening in 1 days 3\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen in 1 days\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening in 2 days 5\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen in 2 days\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening in 4 days 5\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen in 4 days\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening between Aug 31 2021 and Sep 30 2021 4\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen between 2021-08-31 2021-09-30\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"happening between Sep 1 2021 and Sep 2 2021 4\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "                    new HappenCommand(\"happen between 2021-09-01 2021-09-02\").execute(ui, list, storage));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 154
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isExit_alwaysFalse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(new ListCommand(\"list\").isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void execute_nothingWrong() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        TaskList list \u003d storage.getList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ListCommand b \u003d new ListCommand(\"list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(\"list\", b.execute(ui, list, storage));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 26
    }
  },
  {
    "path": "src/test/java/duke/component/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_emptyInput_throwException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done \", 5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task to mark as done cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_withoutSpace_returnNegative1() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(-1, Parser.isValidDone(\"done1\", 4));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_nonIntegerInput_throwException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done anything\", 4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done 1.3\", 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_nonPositiveInput_throwException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done 0\", 5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done -3\", 5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_exceedLimit_throwException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDone(\"done 8\", 5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index does not exist.\", e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDone_validInput_indexOutput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(3, Parser.isValidDone(\"done 3\", 5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(5, Parser.isValidDone(\"done 5\", 5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_emptyInput_throwException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete \", 5);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task to mark to delete cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_withoutSpace_returnNegative1() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(-1, Parser.isValidDelete(\"delete1\", 4));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_nonIntegerInput_throwException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete anything\", 4);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete 1.3\", 4);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a number.\", e.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_nonPositiveInput_throwException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete 0\", 5);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete -3\", 5);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index should be a positive integer.\", e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_exceedLimit_throwException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.isValidDelete(\"delete 8\", 5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The task index does not exist.\", e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isValidDelete_validInput_indexOutput() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(3, Parser.isValidDelete(\"delete 3\", 5));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(5, Parser.isValidDelete(\"delete 5\", 5));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_nonTaskInput_throwException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"anything\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_emptyDescription_throwException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"todo\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"todo \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadline\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadline \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"event\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of an event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"event \");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of an event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_noSpace_throwExceptionWithTip() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"todothings\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Do you mean \u0027todo things\u0027\", e.getMessage());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadlinethings\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Do you mean \u0027deadline things\u0027\", e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"eventthings\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Do you mean \u0027event things\u0027\", e.getMessage());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_noTimeIndicator_throwException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadline things\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! Time should be specified\", e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"event things\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! Time should be specified\", e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_noTimeSpecification_throwException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadline things /by\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"The time specification cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"event things /at\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"The time specification cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_invalidDateFormat_throwException() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"deadline assignment /by 2020/08/31\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid input date, please input as yyyy-mm-dd.\", e.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Parser.generate(\"event assignment /at 2020-08-01\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid input datetime, please input as yyyy-MM-dd HH:mm.\", e.getMessage());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void generate_validInput_validTask() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task t \u003d Parser.generate(\"todo task\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task t2 \u003d new ToDo(\"task\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(t2, t);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task d \u003d Parser.generate(\"deadline assignment /by 2020-08-31\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task d2 \u003d new Deadline(\"assignment\", \"2020-08-31\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(d2, d);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task e \u003d Parser.generate(\"event meeting /at 2020-09-01 11:00\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Task e2 \u003d new Event(\"meeting\", \"2020-09-01 11:00\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(e2, e);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_byeCommand_byeCommand() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new ByeCommand(\"bye\"), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_listCommand_listCommand() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new ListCommand(\"list\"), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_deleteCommand_deleteCommand() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(\"delete 3\"), Parser.parse(\"delete 3\"));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(\"delete 0\"), Parser.parse(\"delete 0\"));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(\"delete -3\"), Parser.parse(\"delete -3\"));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(\"delete \"), Parser.parse(\"delete \"));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DeleteCommand(\"delete //\"), Parser.parse(\"delete //\"));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_doneCommand_doneCommand() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DoneCommand(\"done 3\"), Parser.parse(\"done 3\"));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DoneCommand(\"done 0\"), Parser.parse(\"done 0\"));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DoneCommand(\"done -3\"), Parser.parse(\"done -3\"));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DoneCommand(\"done \"), Parser.parse(\"done \"));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new DoneCommand(\"done //\"), Parser.parse(\"done //\"));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_happenCommand_happenCommand() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new HappenCommand(\"happen on 2020-08-31\"), Parser.parse(\"happen on 2020-08-31\"));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new HappenCommand(\"happen \"), Parser.parse(\"happen \"));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_taskCommand_addCommand() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new AddCommand(\"todo homework\"), Parser.parse(\"todo homework\"));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new AddCommand(\"event anything\"), Parser.parse(\"event anything\"));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void parse_unrecognizedCommand_addCommand() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new AddCommand(\"bash\"), Parser.parse(\"bash\"));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertEquals(new AddCommand(\"happen\"), Parser.parse(\"happen\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 354
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void constructor_invalidInput_throwException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020/09/01\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid input date, please input as yyyy-mm-dd.\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenOnDateTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenOnDate(LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenOnDate(LocalDate.parse(\"2020-09-04\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenTodayTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d1.happenToday());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate newDate \u003d LocalDate.now().plusDays(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d2 \u003d new Deadline(\"Assignment 1\", newStr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d2.happenToday());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBeforeDateTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenBeforeDate(LocalDate.parse(\"2020-09-05\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenBeforeDate(LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenBeforeDate(LocalDate.parse(\"2020-08-03\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBeforeTodayTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d1.happenBeforeToday());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d2 \u003d new Deadline(\"Assignment 1\", \"2030-08-01\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d2.happenBeforeToday());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d3 \u003d new Deadline(\"Assignment 1\", \"2020-08-01\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d3.happenBeforeToday());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenAfterDateTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-01\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenAfterDate(LocalDate.parse(\"2020-09-05\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenAfterDate(LocalDate.parse(\"2020-07-01\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenAfterDate(LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenAfterTodayTest() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d1 \u003d new Deadline(\"Assignment 1\", td);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d1.happenAfterToday());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d2 \u003d new Deadline(\"Assignment 1\", \"2030-08-01\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d2.happenAfterToday());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d3 \u003d new Deadline(\"Assignment 1\", \"2020-08-01\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d3.happenAfterToday());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBetweenTest() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-09-03\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenBetween(LocalDate.parse(\"2020-08-01\"), LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenBetween(LocalDate.parse(\"2020-09-01\"), LocalDate.parse(\"2020-09-04\")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenBetween(LocalDate.parse(\"2020-09-03\"), LocalDate.parse(\"2020-09-03\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenInTest() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDate newDate \u003d LocalDate.now().plusDays(2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", newStr);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenIn(3));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.happenIn(2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.happenIn(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void isOverdueTest() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-08-02\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(d.isOverdue());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            d.markAsDone();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(d.isOverdue());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void outputTest() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-08-02\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"D | 0 | Assignment 1 | By: 2020-08-02\\n\", d.output());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            d.markAsDone();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"D | 1 | Assignment 1 | By: 2020-08-02\\n\", d.output());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Deadline d \u003d new Deadline(\"Assignment 1\", \"2020-08-02\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[D][\\u2718] Assignment 1 (by: Aug 2 2020) This is overdue! The deadline has passed!!!\", d.toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            d.markAsDone();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[D][\\u2713] Assignment 1 (by: Aug 2 2020)\", d.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 175
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void constructor_invalidInput_throwException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"Invalid input datetime, please input as yyyy-MM-dd HH:mm.\", e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenOnDateTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenOnDate(LocalDate.parse(\"2020-09-03\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenOnDate(LocalDate.parse(\"2020-09-04\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenTodayTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e1 \u003d new Event(\"Project meeting\", td);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e1.happenToday());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e2 \u003d new Event(\"Project meeting\", newStr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e2.happenToday());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBeforeDateTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenBeforeDate(LocalDate.parse(\"2020-09-05\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenBeforeDate(LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenBeforeDate(LocalDate.parse(\"2020-09-03\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBeforeTodayTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e1 \u003d new Event(\"Project meeting\", td);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e1.happenBeforeToday());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e2 \u003d new Event(\"Project meeting\", newStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e2.happenBeforeToday());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e3 \u003d new Event(\"Project meeting\", \"2020-08-01 11:30\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e3.happenBeforeToday());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenAfterDateTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenAfterDate(LocalDate.parse(\"2020-09-05\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenAfterDate(LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenAfterDate(LocalDate.parse(\"2020-09-03\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenAfterTodayTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime today \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String td \u003d today.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e1 \u003d new Event(\"Project meeting\", td);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e1.happenAfterToday());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e2 \u003d new Event(\"Project meeting\", newStr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e2.happenAfterToday());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e3 \u003d new Event(\"Project meeting\", \"2020-08-01 11:30\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e3.happenAfterToday());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenBetweenTest() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenBetween(LocalDate.parse(\"2020-08-01\"), LocalDate.parse(\"2020-09-01\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenBetween(LocalDate.parse(\"2020-09-01\"), LocalDate.parse(\"2020-09-04\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenBetween(LocalDate.parse(\"2020-09-03\"), LocalDate.parse(\"2020-09-03\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happenInTest() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            LocalDateTime newDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            String newStr \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", newStr);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenIn(3));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertTrue(e.happenIn(2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertFalse(e.happenIn(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void outputTest() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"E | 0 | Project meeting | At: 2020-09-03 11:30\\n\", e.output());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            e.markAsDone();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"E | 1 | Project meeting | At: 2020-09-03 11:30\\n\", e.output());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            Event e \u003d new Event(\"Project meeting\", \"2020-09-03 11:30\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[E][\\u2718] Project meeting (at: 11:30 AM   Sep 3 2020)\", e.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            e.markAsDone();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[E][\\u2713] Project meeting (at: 11:30 AM   Sep 3 2020)\", e.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 165
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void constructor_anyInput_noException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void outputTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"T | 0 | return books\\n\", t.output());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"T | 1 | return books\\n\", t.output());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[T][\\u2718] return books\", t.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"[T][\\u2713] return books\", t.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happen_today_alwaysFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenOnDate(today));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenToday());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeDate(today));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeToday());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterDate(today));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterToday());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBetween(today, today));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenIn(8));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happen_beforeToday_alwaysFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate d1 \u003d LocalDate.parse(\"2019-08-10\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate d2 \u003d LocalDate.parse(\"2010-09-01\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenOnDate(d1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenToday());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeDate(d1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeToday());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterDate(d1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterToday());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBetween(d1, d2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenIn(8));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void happen_afterToday_alwaysFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate d1 \u003d LocalDate.parse(\"2029-08-10\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        LocalDate d2 \u003d LocalDate.parse(\"2030-09-01\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenOnDate(d1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenToday());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeDate(d1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBeforeToday());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterDate(d1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenAfterToday());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenBetween(d1, d2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        assertFalse(t.happenIn(8));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    public void markAsDone_markingDoneAsDone_throwException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            ToDo t \u003d new ToDo(\"return books\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            t.markAsDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "            assertEquals(\"The task [T][\\u2713] return books has already been done.\", e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 102
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "bash"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "todo buy CD"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline cs3230 assignment 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline cs3230 assignment 1 /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline cs3230 assignment 1 /by Thursday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline cs3230 assignment 1 /by 2020-08-22"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "event cs2101 op meeting /at 2020-08-31 12:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline utw2001 final paper /by 2020-11-03"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "todo clean room"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "todo wash clothes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "deadline cs2101 email /by 2020-08-31"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "event family party /at 2020-08-31 19:00"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen on today"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen on 2020-08-31"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen error"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen before today"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen before 2020-09-01"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen after today"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen after 2020-08-25"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen in 10 days"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen in -3 days"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen in x months"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen between 2020-08-30 2020-09-10"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "happen between 2020-09-10 2020-08-30"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lll-jy": 41
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lll-jy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lll-jy"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "lll-jy": 4
    }
  }
]
