[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Rahul0506":1,"-":25}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"sourceSets {"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"    main {"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"        java {"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"            srcDir \"src/java\""},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"        resources {"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"            srcDir \"src/resources\""},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":27,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"### Add tasks"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"Use Duke to add tasks to keep track of. Duke supports adding Todos, Deadlines and Events."},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"- *Todos* are tasks to indicate activities that need to be completed"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"- *Deadlines* are tasks to indicate activities and the deadline they need to be completed by"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"- *Events* are tasks to indicate activities and the time they (should) occur"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"### View your tasks"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"You can ask Duke to display your current tasks, including whether they are completed"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":" or not, and if they have a timing (deadline/ event time) specified. "},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"### Mark tasks"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"You can ask Duke to mark tasks in the list as done after you have completed them!"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"### Delete tasks"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"You can ask Duke to delete tasks that are no longer valid, or those that you don\u0027t want to keep track of anymore."},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"### Search tasks"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"You can ask Duke to search through the list and find tasks that contain your search input."},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"Duke will then display these tasks as a list."},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"### Conduct operations on multiple tasks"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"Duke allows you to conduct some operations, like delete, on multiple tasks"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"at the same time! Simply indicate the operation and the search key to find the tasks"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"to perform the operation on."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"### `todo` - Add a Todo task"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"`todo go to the store`"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"`Added task: [T][\u0026#2717] go to the store`"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"### `deadline` - Add a Deadline task"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"`deadline submit math paper /by 2020-12-1`"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"`Added task: [D][\u0026#2717] submit math paper (by: 1 Dec 2020)`"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"### `event` - Add an Event task"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"`event pizza party /at 2020-12-1`"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"`Added task: [E][\u0026#2717] pizza party (by: 1 Dec 2020)`"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"### `list` - List your tasks"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"Displays currently stored tasks in a list format."},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"`list`"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"[D][\u0026#2717] submit math paper (by: 1 Dec 2020)"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"[E][\u0026#2717] pizza party (by: 1 Dec 2020)"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"### `done` - Mark a task as done"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":"Marks indicated task, using the index in the list, as done."},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":81,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":82,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":83,"author":{"gitId":"Rahul0506"},"content":"`done 1`"},{"lineNumber":84,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":85,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":86,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":87,"author":{"gitId":"Rahul0506"},"content":"`Marked task as done: [D][\u0026#2713] submit math paper (by: 1 Dec 2020)`"},{"lineNumber":88,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":89,"author":{"gitId":"Rahul0506"},"content":"### `delete` - Delete a task"},{"lineNumber":90,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":91,"author":{"gitId":"Rahul0506"},"content":"Deletes the indicated task, using the index in the list, from the list."},{"lineNumber":92,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":93,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":94,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":95,"author":{"gitId":"Rahul0506"},"content":"`delete 1`"},{"lineNumber":96,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":97,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":98,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":99,"author":{"gitId":"Rahul0506"},"content":"`Deleted task: [D][\u0026#2713] submit math paper (by: 1 Dec 2020)`"},{"lineNumber":100,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":101,"author":{"gitId":"Rahul0506"},"content":"### `find` - Search for tasks"},{"lineNumber":102,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":103,"author":{"gitId":"Rahul0506"},"content":"Searches for tasks using the given search key."},{"lineNumber":104,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":105,"author":{"gitId":"Rahul0506"},"content":"Example of usage: "},{"lineNumber":106,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":107,"author":{"gitId":"Rahul0506"},"content":"`find party`"},{"lineNumber":108,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":109,"author":{"gitId":"Rahul0506"},"content":"Expected outcome:"},{"lineNumber":110,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":111,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":112,"author":{"gitId":"Rahul0506"},"content":"Tasks found:"},{"lineNumber":113,"author":{"gitId":"Rahul0506"},"content":"[E][\u0026#2717] pizza party (by: 1 Dec 2020)"},{"lineNumber":114,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":115,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":116,"author":{"gitId":"Rahul0506"},"content":"### `mass` - Conduct operations on multiple tasks"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Rahul0506"},"content":"Searches for tasks using the given search key. Then conducts the specified operation"},{"lineNumber":119,"author":{"gitId":"Rahul0506"},"content":"on all the tasks found."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"Rahul0506"},"content":"`mass done party`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":128,"author":{"gitId":"Rahul0506"},"content":"Tasks marked as done: "},{"lineNumber":129,"author":{"gitId":"Rahul0506"},"content":"[E][\u0026#2717] pizza party (by: 1 Dec 2020)"},{"lineNumber":130,"author":{"gitId":"Rahul0506"},"content":"```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"Rahul0506"},"content":"### `bye` - Exit the program"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"Rahul0506"},"content":"`bye`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"Rahul0506"},"content":"`Program exits`"}],"authorContributionMap":{"Rahul0506":119,"-":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Parser;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":" * Main class to initialise and run the chatbot."},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"    static final String DIR_NAME \u003d \"data\";"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    static final String FILE_NAME \u003d \"duke_data.txt\";"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    private Ui ui;"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    private Parser parser;"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    private TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * Creates a Duke object."},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    public Duke() {"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * Initialises the utility objects."},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * @return welcome message"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"    public String init() {"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"        ui \u003d new Ui();"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"        parser \u003d new Parser();"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"        storage \u003d new Storage(DIR_NAME, FILE_NAME);"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"        taskList \u003d storage.init();"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"        return ui.welcome(storage.isLoaded());"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     * Main running loop (CLI version)"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"    public void run() {"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"        boolean keepGoing \u003d true;"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"        Command command;"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"        String input;"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        while (keepGoing) {"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"            input \u003d ui.readInput();"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"                command \u003d parser.processInput(input);"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"                keepGoing \u003d command.runCLI(taskList, storage, ui);"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"            } catch (DukeException de) {"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"                ui.writeOutput(de.getMessage());"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"     * Processes the input and returns the output message."},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"     * @param input input to be processed"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"    public String getResponse(String input) {"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"        assert input !\u003d null : \"Null input to process\";"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"            Command command \u003d parser.processInput(input);"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"            assert command !\u003d null : \"Parser returned null\";"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"            return command.runGUI(taskList, storage, ui);"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"        } catch (DukeException ex) {"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"            return ex.getMessage();"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Rahul0506":76,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":" * Exception class to define Duke-related exceptions and handle them."},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"     * Creates an exception with the given message."},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"     * @param message Exception message"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"    public DukeException(String message) {"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    public String getMessage() {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"        return String.format(\"OOPS!!! %s\", super.getMessage());"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":21}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.view.MainWindow;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/img_duke.png\")));"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":36}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.TaskType;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define adding Tasks."},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    private final TaskType taskType;"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     * Create AddCommand object."},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"     * @param attributes input attributes from user"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"     * @param taskType TaskType of the Task to add"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    public AddCommand(String attributes, TaskType taskType) {"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"        this.attributes \u003d attributes;"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     * CLI (terminal) version of the command."},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while adding a task to the list"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     * Add the task to the list, depending on its type: Todo, Deadline or Event."},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while adding a task to the list"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"        Task newTask;"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"        if (taskType \u003d\u003d TaskType.TODO) {"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d taskList.addTodo(attributes);"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d taskList.addTimedTask(attributes, false);"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d taskList.addTimedTask(attributes, true);"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"        assert newTask !\u003d null : \"Null return from adding the task\";"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"        storage.storeList(taskList.getList());"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeAdd(newTask, taskList.getSize());"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":67}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":" * Abstract class to define a general command processing class."},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"    protected String attributes;"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     * Execute the command\u0027s process (CLI version)."},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"     * @return true if program should continue after process is executed"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to processing"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    public abstract boolean runCLI(TaskList taskList, Storage storage, Ui ui) throws DukeException;"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * Execute the command\u0027s process (GUI version)."},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     * @return true if program should continue after process is executed"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to processing"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"    public abstract String runGUI(TaskList taskList, Storage storage, Ui ui) throws DukeException;"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":35}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define deleting Tasks."},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     * Create DeleteCommand object."},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     * @param attributes input attributes from user"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    public DeleteCommand(String attributes) {"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"        this.attributes \u003d attributes;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     * CLI (terminal) version of the command."},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while deleting a task from the list"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"     * Delete the task from the list."},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while deleting a task from the list"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        Task deletedTask \u003d taskList.deleteTask(Integer.parseInt(attributes));"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"        assert deletedTask !\u003d null : \"Null return from deleting the task\";"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"        storage.storeList(taskList.getList());"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeDelete(deletedTask, taskList.getSize());"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":55}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define marking Tasks as done."},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     * Create DoneCommand object."},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     * @param attributes input attributes from user"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    public DoneCommand(String attributes) {"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"        this.attributes \u003d attributes;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     * CLI (terminal) version of the command."},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while marking a task as done"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"     * Mark a task as done."},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while marking a task as done"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        Task markedTask \u003d taskList.markDone(Integer.parseInt(attributes));"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"        assert markedTask !\u003d null : \"Null return from marking the task\";"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"        storage.storeList(taskList.getList());"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeDone(markedTask);"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":55}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define exiting the program."},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"    public static final String EXIT_FLAG \u003d \"EXIT\";"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     * Create ExitCommand object."},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    public ExitCommand() {}"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"     * Exits the program."},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     * @return false, end program loop"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"        ui.exit();"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"     * Exits the program."},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"     * @return Flag to indicate system exit"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"        return ExitCommand.EXIT_FLAG;"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":45}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define finding Tasks."},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     * Creates FindCommand object."},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     * @param attributes input attributes from user"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    public FindCommand(String attributes) {"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"        this.attributes \u003d attributes;"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     * CLI (terminal) version of the command"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"     * Finds all the tasks containing the search key."},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"        List\u003cTask\u003e foundTasks \u003d taskList.findTasks(attributes);"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeSearch(foundTasks);"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":51}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define listing current Tasks."},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"     * Create ListCommand object."},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    public ListCommand() {}"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     * List all the tasks currently in the list."},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * List all the tasks currently in the list."},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) {"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeOutput(taskList.listTasks());"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":43}},{"path":"src/main/java/duke/commands/MassOpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Storage;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Ui;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":" * Command sub-type to define performing mass"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":" * operations (operations on multiple tasks at once)."},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"public class MassOpCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    public static final String DONE_OP \u003d \"marked done\";"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    public static final String DELETE_OP \u003d \"deleted\";"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"     * Create MassOpCommand object."},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * @param attributes input attributes from user"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    public MassOpCommand(String attributes) {"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"        this.attributes \u003d attributes;"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * CLI (terminal) version of the command."},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * @return true, continue program loop"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while performing the operation on the tasks found"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"    public boolean runCLI(TaskList taskList, Storage storage, Ui ui) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"        runGUI(taskList, storage, ui);"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"        return true;"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     * Find all tasks that match search key and perform given operation on them."},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList TaskList object handling the current list"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"     * @param storage Storage object to read/write from disk"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"     * @param ui Ui object to handle user interface interactions"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"     * @return Duke output to GUI"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception while performing the operation on the tasks found"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"    public String runGUI(TaskList taskList, Storage storage, Ui ui) throws DukeException{"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"        String[] attrSplit \u003d attributes.strip().split(\"/find\");"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"        if (attrSplit.length !\u003d 2) {"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Invalid mass operation format\");"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"        attrSplit[0] \u003d attrSplit[0].strip();"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"        attrSplit[1] \u003d attrSplit[1].strip();"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"        String op;"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"        if (attrSplit[0].equals(\"done\")) {"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"            op \u003d DONE_OP;"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"        } else if (attrSplit[0].equals(\"delete\")) {"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"            op \u003d DELETE_OP;"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"            System.out.println(attrSplit[0]);"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Invalid operation specified\");"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"        List\u003cTask\u003e foundTasks \u003d taskList.findTasks(attrSplit[1]);"},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"        if (op.equals(DONE_OP)) {"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"            taskList.massMarkDone(foundTasks);"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"            taskList.massDelete(foundTasks);"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"        return ui.writeMassOp(foundTasks, op);"},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":80}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":" * Class to define a deadline."},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"public class Deadline extends TimedTask {"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"     * Creates a Deadline with the given task name and deadline."},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"     * @param ddl deadline"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"    public Deadline(String task, LocalDate ddl) {"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"        super(task, ddl);"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"        return \"[D]\" + super.toString() + String.format(\" (by: %s)\", getDateTime());"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * Returns string representation of the Deadline to store in file."},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @return string representation"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    public String fileString() {"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"        return String.format(\"D|%s|%s\", super.fileString(), ddl.toString());"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":34}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":" * Class to define an Event."},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"public class Event extends TimedTask {"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"     * Creates an Event with the given task name and time"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"     * @param ddl event time"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"    public Event(String task, LocalDate ddl) {"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"        super(task, ddl);"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"        return \"[E]\" + super.toString() + String.format(\" (at: %s)\", getDateTime());"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * Returns string representation of the Event to store in file."},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     * @return string representation"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    public String fileString() {"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"        return String.format(\"E|%s|%s\", super.fileString(), ddl.toString());"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":34}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":" * Parent class to define a task."},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"    private final String task;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"     * Creates a Task with the given task name."},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"    public Task(String task) {"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"     * Marks the task as done."},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    public void markDone() {"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"        isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"        String mark \u003d isDone ? \"\\u2713\" : \"\\u2717\";"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"        return String.format(\"[%s] %s\", mark, task);"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * Returns string representation of the Task to store in file."},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     * @return string representation"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"    public String fileString() {"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"        return String.format(\"%s|%s\", task, isDone ? \"1\" : \"0\");"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"    public boolean search(String key) {"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"        return this.task.contains(key);"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":46}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":" * Enum class to define the types of Task objects to manage."},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":8}},{"path":"src/main/java/duke/tasks/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":" * Intermediate class to define Tasks with a deadline or timing."},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"public class TimedTask extends Task {"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"    LocalDate ddl;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"     * Creates a TimedTask with the given task name and deadline/timing."},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     * @param ddl deadline/timing"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    public TimedTask(String task, LocalDate ddl) {"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"        super(task);"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"        this.ddl \u003d ddl;"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     * Returns deadline/timing in string format"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     * @return string format of deadline/timing"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    protected String getDateTime() {"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"        return ddl.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":32}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":" * Class to define a Todo."},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"     * Creates a Todo with the given task name."},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"    public Todo(String task) {"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"        super(task);"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * Returns string representation of the Todo to store in file."},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     * @return string representation"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    public String fileString() {"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"        return \"T|\" + super.fileString();"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":31}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.AddCommand;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.Command;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.FindCommand;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.ListCommand;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.MassOpCommand;"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.TaskType;"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":" * Class to parse user input and process it."},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    static final String BYE \u003d \"bye\";"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    static final String LIST \u003d \"list\";"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    static final String TODO \u003d \"todo\";"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    static final String DDL \u003d \"deadline\";"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    static final String EVENT \u003d \"event\";"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    static final String DELETE \u003d \"delete\";"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    static final String DONE \u003d \"done\";"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    static final String FIND \u003d \"find\";"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    static final String MASS \u003d \"mass\";"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     * Create a Parser."},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    public Parser() {}"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     * Parses and processes the input string."},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"     * @param input String input from the user"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"     * @return Command object to execute the respective process"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to erroneous inputs"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    public Command processInput(String input) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"        assert input !\u003d null : \"Null input to prcoess\";"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"        if (input.equals(BYE)) {"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"            return new ExitCommand();"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"        } else if (input.equals(LIST)) {"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"            return new ListCommand();"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"            String[] inputSplits \u003d input.split(\" \", 2);"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"            String command \u003d inputSplits[0];"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"            switch (command) {"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"            case TODO:"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"The description of a todo cannot be empty\");"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"                return new AddCommand(inputSplits[1], TaskType.TODO);"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"            case DDL:"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"The description of a deadline cannot be empty\");"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"                return new AddCommand(inputSplits[1], TaskType.DEADLINE);"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"            case EVENT:"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"The description of an event cannot be empty\");"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"                return new AddCommand(inputSplits[1], TaskType.EVENT);"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"            case DONE:"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Task number cannot be empty\");"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"                try {"},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"                    return new DoneCommand(inputSplits[1]);"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"                } catch (NumberFormatException ex) {"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Task number must be a valid integer\");"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"            case DELETE:"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Task number cannot be empty\");"},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"Rahul0506"},"content":"                try {"},{"lineNumber":82,"author":{"gitId":"Rahul0506"},"content":"                    return new DeleteCommand(inputSplits[1]);"},{"lineNumber":83,"author":{"gitId":"Rahul0506"},"content":"                } catch (NumberFormatException ex) {"},{"lineNumber":84,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Task number must be a valid integer\");"},{"lineNumber":85,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"Rahul0506"},"content":"            case FIND:"},{"lineNumber":87,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":88,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Search key cannot be empty\");"},{"lineNumber":89,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"Rahul0506"},"content":"                return new FindCommand(inputSplits[1]);"},{"lineNumber":91,"author":{"gitId":"Rahul0506"},"content":"            case MASS:"},{"lineNumber":92,"author":{"gitId":"Rahul0506"},"content":"                if (inputSplits.length \u003c 2) {"},{"lineNumber":93,"author":{"gitId":"Rahul0506"},"content":"                    throw new DukeException(\"Operation cannot be empty\");"},{"lineNumber":94,"author":{"gitId":"Rahul0506"},"content":"                }"},{"lineNumber":95,"author":{"gitId":"Rahul0506"},"content":"                return new MassOpCommand(inputSplits[1]);"},{"lineNumber":96,"author":{"gitId":"Rahul0506"},"content":"            default:"},{"lineNumber":97,"author":{"gitId":"Rahul0506"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :(\");"},{"lineNumber":98,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":101}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import java.nio.file.FileAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":" * Class to handle storing and reading task data from the disk."},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    private Path FILE_PATH;"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    private final String dirName;"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    private final String fileName;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    private boolean isLoadSuccess \u003d false;"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     * Create a Storage object to handle a file at the given file path."},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     * @param dirName name of the directory to store file in"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"     * @param fileName name of the file to store data in"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    public Storage(String dirName, String fileName) {"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"        this.dirName \u003d dirName;"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * Returns whether loading data from the file was successful."},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"     * @return true if loading from file was successful"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"    public boolean isLoaded() {"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"        return isLoadSuccess;"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     * Initialises a TaskList by checking for pre-existing data and loading"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"     * if present, or creating an empty TaskList."},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"     * @return initialised TaskList"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"    public TaskList init() {"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"        String home \u003d System.getProperty(\"user.dir\");"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"        FILE_PATH \u003d java.nio.file.Paths.get(home, dirName);"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"            java.nio.file.Files.createDirectory(FILE_PATH);"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"        } catch (FileAlreadyExistsException ignored) {"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"            e.printStackTrace();"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"        FILE_PATH \u003d java.nio.file.Paths.get(home, dirName, fileName);"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"            java.nio.file.Files.createFile(FILE_PATH);"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"        } catch (FileAlreadyExistsException ignored) {"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"            taskList \u003d new TaskList(loadList());"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"            isLoadSuccess \u003d true;"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException e) {"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"            e.printStackTrace();"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"        return taskList;"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"     * Saves the task list to the file."},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"     * @param taskList List of Task objects to write to file"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"    public void storeList(List\u003cTask\u003e taskList) {"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"        assert taskList !\u003d null : \"Null tasklist to store to file\";"},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Rahul0506"},"content":"            FileWriter writer \u003d new FileWriter(FILE_PATH.toString());"},{"lineNumber":82,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":83,"author":{"gitId":"Rahul0506"},"content":"            for (Task task : taskList) {"},{"lineNumber":84,"author":{"gitId":"Rahul0506"},"content":"                writer.write(task.fileString() + \"\\n\");"},{"lineNumber":85,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"Rahul0506"},"content":"            writer.close();"},{"lineNumber":87,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException ex) {"},{"lineNumber":88,"author":{"gitId":"Rahul0506"},"content":"            ex.printStackTrace();"},{"lineNumber":89,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":92,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Rahul0506"},"content":"     * Reads task list from the file."},{"lineNumber":94,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Rahul0506"},"content":"     * @return List of strings representing the tasks"},{"lineNumber":96,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Rahul0506"},"content":"    public List\u003cString\u003e loadList() {"},{"lineNumber":98,"author":{"gitId":"Rahul0506"},"content":"        List\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"Rahul0506"},"content":"            BufferedReader reader \u003d java.nio.file.Files.newBufferedReader(FILE_PATH);"},{"lineNumber":101,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":102,"author":{"gitId":"Rahul0506"},"content":"            String line;"},{"lineNumber":103,"author":{"gitId":"Rahul0506"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":104,"author":{"gitId":"Rahul0506"},"content":"                stringList.add(line);"},{"lineNumber":105,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"Rahul0506"},"content":"            reader.close();"},{"lineNumber":107,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException ex) {"},{"lineNumber":108,"author":{"gitId":"Rahul0506"},"content":"            ex.printStackTrace();"},{"lineNumber":109,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Rahul0506"},"content":"        return stringList;"},{"lineNumber":111,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":112}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Todo;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.TaskType;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":" * Class to store and manage Task objects."},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"public class TaskList {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    List\u003cTask\u003e taskList;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * Create an empty TaskList."},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"     * Create a TaskList from the given list of representations."},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * @param stringList List of string representations"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"    public TaskList(List\u003cString\u003e stringList) {"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"        stringList.forEach(this::parseLine);"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"     * Returns the list of Tasks."},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"     * @return List of Tasks"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"        return taskList;"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"     * Returns the size of the list."},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"     * @return size of list"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"    public int getSize() {"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"        return taskList.size();"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"     * Creates a Task from the given representation and adds it to the list."},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"     * @param line string repesentation of the Task"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"    private void parseLine(String line) {"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"        String[] lineSplit \u003d line.split(\"\\\\|\");"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"        boolean done \u003d lineSplit[2].equals(\"1\");"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"        if (lineSplit[0].equals(\"T\")) {"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"            addTask(lineSplit[1], TaskType.TODO, \"\", done);"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"        } else if (lineSplit[0].equals(\"D\")) {"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"            addTask(lineSplit[1], TaskType.DEADLINE, lineSplit[3], done);"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"            addTask(lineSplit[1], TaskType.EVENT, lineSplit[3], done);"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"     * Adds a Task to the list."},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task name"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"     * @param type TaskType of the of Task to add"},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":"     * @param ddl Task deadline"},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":"     * @param done whether task has been marked done"},{"lineNumber":81,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Rahul0506"},"content":"    private void addTask(String task, TaskType type, String ddl, boolean done) {"},{"lineNumber":83,"author":{"gitId":"Rahul0506"},"content":"        Task newTask;"},{"lineNumber":84,"author":{"gitId":"Rahul0506"},"content":"        if (type \u003d\u003d TaskType.TODO) {"},{"lineNumber":85,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d new Todo(task);"},{"lineNumber":86,"author":{"gitId":"Rahul0506"},"content":"        } else if (type \u003d\u003d TaskType.DEADLINE) {"},{"lineNumber":87,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d new Deadline(task, LocalDate.parse(ddl));"},{"lineNumber":88,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d new Event(task, LocalDate.parse(ddl));"},{"lineNumber":90,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":92,"author":{"gitId":"Rahul0506"},"content":"        if (done) {"},{"lineNumber":93,"author":{"gitId":"Rahul0506"},"content":"            newTask.markDone();"},{"lineNumber":94,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Rahul0506"},"content":"        taskList.add(newTask);"},{"lineNumber":96,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":98,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"Rahul0506"},"content":"     * Add a Todo with the given name."},{"lineNumber":100,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"Rahul0506"},"content":"     * @param task Todo name"},{"lineNumber":102,"author":{"gitId":"Rahul0506"},"content":"     * @return Task object added"},{"lineNumber":103,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Rahul0506"},"content":"    public Task addTodo(String task) {"},{"lineNumber":105,"author":{"gitId":"Rahul0506"},"content":"        return addTask(new Todo(task));"},{"lineNumber":106,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":108,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Rahul0506"},"content":"     * Add a Deadline or Event with given attributes."},{"lineNumber":110,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Rahul0506"},"content":"     * @param taskAttr Task attributes"},{"lineNumber":112,"author":{"gitId":"Rahul0506"},"content":"     * @param isEvent whether Task is an Event"},{"lineNumber":113,"author":{"gitId":"Rahul0506"},"content":"     * @return Task object added"},{"lineNumber":114,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to erroneous inputs"},{"lineNumber":115,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Rahul0506"},"content":"    public Task addTimedTask(String taskAttr, boolean isEvent) throws DukeException {"},{"lineNumber":117,"author":{"gitId":"Rahul0506"},"content":"        Task newTask;"},{"lineNumber":118,"author":{"gitId":"Rahul0506"},"content":"        String[] taskSplit;"},{"lineNumber":119,"author":{"gitId":"Rahul0506"},"content":"        if (isEvent) {"},{"lineNumber":120,"author":{"gitId":"Rahul0506"},"content":"            taskSplit \u003d taskAttr.split(\"/at\");"},{"lineNumber":121,"author":{"gitId":"Rahul0506"},"content":"            if (taskSplit.length !\u003d 2) {"},{"lineNumber":122,"author":{"gitId":"Rahul0506"},"content":"                throw new DukeException(\"Invalid description for an event. Use /at followed by date\");"},{"lineNumber":123,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"Rahul0506"},"content":"            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"},{"lineNumber":125,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d new Event(taskSplit[0].strip(), dateTime);"},{"lineNumber":126,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"Rahul0506"},"content":"            taskSplit \u003d taskAttr.split(\"/by\");"},{"lineNumber":128,"author":{"gitId":"Rahul0506"},"content":"            if (taskSplit.length !\u003d 2) {"},{"lineNumber":129,"author":{"gitId":"Rahul0506"},"content":"                throw new DukeException(\"Invalid description for a deadline. Use /by followed by date\");"},{"lineNumber":130,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"Rahul0506"},"content":"            LocalDate dateTime \u003d validateDateTime(taskSplit[1].strip());"},{"lineNumber":132,"author":{"gitId":"Rahul0506"},"content":"            newTask \u003d new Deadline(taskSplit[0].strip(), dateTime);"},{"lineNumber":133,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"Rahul0506"},"content":"        return addTask(newTask);"},{"lineNumber":135,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":137,"author":{"gitId":"Rahul0506"},"content":"    private Task addTask(Task task) {"},{"lineNumber":138,"author":{"gitId":"Rahul0506"},"content":"        taskList.add(task);"},{"lineNumber":139,"author":{"gitId":"Rahul0506"},"content":"        return task;"},{"lineNumber":140,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":142,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"Rahul0506"},"content":"     * Returns array of Task description strings."},{"lineNumber":144,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"Rahul0506"},"content":"     * @return array of Task description strings"},{"lineNumber":146,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"Rahul0506"},"content":"    public String[] listTasks() {"},{"lineNumber":148,"author":{"gitId":"Rahul0506"},"content":"        String[] taskOutputs \u003d new String[taskList.size() + 1];"},{"lineNumber":149,"author":{"gitId":"Rahul0506"},"content":"        taskOutputs[0] \u003d \"Here are the tasks in your list:\";"},{"lineNumber":150,"author":{"gitId":"Rahul0506"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":151,"author":{"gitId":"Rahul0506"},"content":"            taskOutputs[i + 1] \u003d (i + 1) + \". \" + taskList.get(i).toString();"},{"lineNumber":152,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Rahul0506"},"content":"        return taskOutputs;"},{"lineNumber":154,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":156,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"Rahul0506"},"content":"     * Marks the given Task as done."},{"lineNumber":158,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":159,"author":{"gitId":"Rahul0506"},"content":"     * @param position position of the Task in the list, as seen by the user."},{"lineNumber":160,"author":{"gitId":"Rahul0506"},"content":"     * @return Task marked done"},{"lineNumber":161,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to erroneous inputs"},{"lineNumber":162,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"Rahul0506"},"content":"    public Task markDone(int position) throws DukeException {"},{"lineNumber":164,"author":{"gitId":"Rahul0506"},"content":"        if (position \u003c 1 || position \u003e taskList.size()) {"},{"lineNumber":165,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Invalid task number provided\");"},{"lineNumber":166,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"Rahul0506"},"content":"        Task task \u003d taskList.get(position - 1);"},{"lineNumber":168,"author":{"gitId":"Rahul0506"},"content":"        task.markDone();"},{"lineNumber":169,"author":{"gitId":"Rahul0506"},"content":"        return task;"},{"lineNumber":170,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":172,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"Rahul0506"},"content":"     * Deletes the given Task."},{"lineNumber":174,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"Rahul0506"},"content":"     * @param position position of the Task in the list, as seen by the user"},{"lineNumber":176,"author":{"gitId":"Rahul0506"},"content":"     * @return Task deleted"},{"lineNumber":177,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to erroneous inputs"},{"lineNumber":178,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"Rahul0506"},"content":"    public Task deleteTask(int position) throws DukeException {"},{"lineNumber":180,"author":{"gitId":"Rahul0506"},"content":"        if (position \u003c 1 || position \u003e taskList.size()) {"},{"lineNumber":181,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Invalid task number provided\");"},{"lineNumber":182,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"Rahul0506"},"content":"        return taskList.remove(position - 1);"},{"lineNumber":184,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":186,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"Rahul0506"},"content":"     * Validates the given string as a date and converts it to a LocalDate."},{"lineNumber":188,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"Rahul0506"},"content":"     * @param time date string"},{"lineNumber":190,"author":{"gitId":"Rahul0506"},"content":"     * @return LocalDate for the given date"},{"lineNumber":191,"author":{"gitId":"Rahul0506"},"content":"     * @throws DukeException Duke-related exception due to erroneous inputs"},{"lineNumber":192,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"Rahul0506"},"content":"    private LocalDate validateDateTime(String time) throws DukeException {"},{"lineNumber":194,"author":{"gitId":"Rahul0506"},"content":"        assert time !\u003d null : \"Null time string to parse\";"},{"lineNumber":195,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":196,"author":{"gitId":"Rahul0506"},"content":"        if (time.equals(\"\")) {"},{"lineNumber":197,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Task date cannot be empty.\");"},{"lineNumber":198,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"Rahul0506"},"content":"        LocalDate parsed;"},{"lineNumber":200,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"Rahul0506"},"content":"            parsed \u003d LocalDate.parse(time);"},{"lineNumber":202,"author":{"gitId":"Rahul0506"},"content":"            return parsed;"},{"lineNumber":203,"author":{"gitId":"Rahul0506"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":204,"author":{"gitId":"Rahul0506"},"content":"            throw new DukeException(\"Invalid date entered. Use format YYYY-MM-DD\");"},{"lineNumber":205,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":208,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"Rahul0506"},"content":"     * Find tasks that contain the given key."},{"lineNumber":210,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"Rahul0506"},"content":"     * @param key key to search for"},{"lineNumber":212,"author":{"gitId":"Rahul0506"},"content":"     * @return Tasks found"},{"lineNumber":213,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"Rahul0506"},"content":"    public List\u003cTask\u003e findTasks(String key) {"},{"lineNumber":215,"author":{"gitId":"Rahul0506"},"content":"        assert key !\u003d null : \"Null search key\";"},{"lineNumber":216,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":217,"author":{"gitId":"Rahul0506"},"content":"        List\u003cTask\u003e found \u003d new ArrayList\u003c\u003e();"},{"lineNumber":218,"author":{"gitId":"Rahul0506"},"content":"        for (Task task : taskList) {"},{"lineNumber":219,"author":{"gitId":"Rahul0506"},"content":"            if (task.search(key)) {"},{"lineNumber":220,"author":{"gitId":"Rahul0506"},"content":"                found.add(task);"},{"lineNumber":221,"author":{"gitId":"Rahul0506"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"Rahul0506"},"content":"        return found;"},{"lineNumber":224,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":226,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"Rahul0506"},"content":"     * Marks all the tasks in the list ass done."},{"lineNumber":228,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":229,"author":{"gitId":"Rahul0506"},"content":"     * @param tasks Tasks to be marked done"},{"lineNumber":230,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":231,"author":{"gitId":"Rahul0506"},"content":"    public void massMarkDone(List\u003cTask\u003e tasks) {"},{"lineNumber":232,"author":{"gitId":"Rahul0506"},"content":"        for (Task task : tasks) {"},{"lineNumber":233,"author":{"gitId":"Rahul0506"},"content":"            task.markDone();"},{"lineNumber":234,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":237,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"Rahul0506"},"content":"     * Deletes all the tasks given from the list."},{"lineNumber":239,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":240,"author":{"gitId":"Rahul0506"},"content":"     * @param tasks Tasks to be deleted"},{"lineNumber":241,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"Rahul0506"},"content":"    public void massDelete(List\u003cTask\u003e tasks) {"},{"lineNumber":243,"author":{"gitId":"Rahul0506"},"content":"        boolean removeSuccess \u003d taskList.removeAll(tasks);"},{"lineNumber":244,"author":{"gitId":"Rahul0506"},"content":"        assert removeSuccess : \"Tasks found were not removed\";"},{"lineNumber":245,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":246}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":" * Class to handle the interface with the user. Supports both GUI and CLI."},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"    Scanner scanner;"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"     * Creates a UI."},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    public Ui() {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"     * Reads input from the user (CLI specific method)."},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"     * @return user input"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    public String readInput() {"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"        return scanner.nextLine();"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"     * Outputs the welcome message to the user."},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"     * @param isLoadSuccess true if data waas loaded from the file"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"    public String welcome(boolean isLoadSuccess) {"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"        if (isLoadSuccess) {"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"            return writeOutput(\"Existing data loaded from file!\\n\","},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"                    \"Hello! I\u0027m Duke\", \"What can I do for you?\");"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"            return writeOutput(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"     * Outputs a Task being added, and the size of the list."},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task added"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"     * @param size size of the list"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"    public String writeAdd(Task task, int size) {"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"        return writeOutput(\"Got it. I\u0027ve added this task:\", \"\\t\" + task.toString(),"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"                String.format(\"Now you have %d tasks in the list.\", size));"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"     * Outputs a Task being marked done."},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task marked done"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"    public String writeDone(Task task) {"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"        return writeOutput(\"Nice! I\u0027ve marked this task as done:\", \"\\t\" + task.toString());"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"     * Outputs a Task being deleted, and the size of the list."},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"     * @param task Task deleted"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":"     * @param size size of the list"},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"    public String writeDelete(Task task, int size) {"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"        return writeOutput(\"Noted. I\u0027ve removed this task:\", \"\\t\" + task.toString(),"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"                String.format(\"Now you have %d tasks in the list.\", size));"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":80,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Rahul0506"},"content":"     * Outputs Tasks found from a search."},{"lineNumber":82,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Rahul0506"},"content":"     * @param found Tasks found"},{"lineNumber":84,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":85,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Rahul0506"},"content":"    public String writeSearch(List\u003cTask\u003e found) {"},{"lineNumber":87,"author":{"gitId":"Rahul0506"},"content":"        String[] outputs \u003d new String[found.size() + 1];"},{"lineNumber":88,"author":{"gitId":"Rahul0506"},"content":"        outputs[0] \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":89,"author":{"gitId":"Rahul0506"},"content":"        for (int i \u003d 0; i \u003c found.size(); i++) {"},{"lineNumber":90,"author":{"gitId":"Rahul0506"},"content":"            outputs[i + 1] \u003d \"\\t\" + found.get(i).toString();"},{"lineNumber":91,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Rahul0506"},"content":"        return writeOutput(outputs);"},{"lineNumber":93,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":95,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Rahul0506"},"content":"     * Output Tasks modified using the mass operation."},{"lineNumber":97,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"Rahul0506"},"content":"     * @param tasks Tasks modified"},{"lineNumber":99,"author":{"gitId":"Rahul0506"},"content":"     * @param opDesc description of the operation performed"},{"lineNumber":100,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":101,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"Rahul0506"},"content":"    public String writeMassOp(List\u003cTask\u003e tasks, String opDesc) {"},{"lineNumber":103,"author":{"gitId":"Rahul0506"},"content":"        String[] outputs \u003d new String[tasks.size() + 1];"},{"lineNumber":104,"author":{"gitId":"Rahul0506"},"content":"        outputs[0] \u003d String.format(\"The following tasks have been %s:\", opDesc);"},{"lineNumber":105,"author":{"gitId":"Rahul0506"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":106,"author":{"gitId":"Rahul0506"},"content":"            outputs[i + 1] \u003d \"\\t\" + tasks.get(i).toString();"},{"lineNumber":107,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Rahul0506"},"content":"        return writeOutput(outputs);"},{"lineNumber":109,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":111,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"Rahul0506"},"content":"     * Formats the messages to be output."},{"lineNumber":113,"author":{"gitId":"Rahul0506"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"Rahul0506"},"content":"     * @param messages messages to be output"},{"lineNumber":115,"author":{"gitId":"Rahul0506"},"content":"     * @return output message"},{"lineNumber":116,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"Rahul0506"},"content":"    public String writeOutput(String... messages) {"},{"lineNumber":118,"author":{"gitId":"Rahul0506"},"content":"        StringBuilder finalOut \u003d new StringBuilder();"},{"lineNumber":119,"author":{"gitId":"Rahul0506"},"content":"        System.out.println(\"\\t-----------------------------------------\");"},{"lineNumber":120,"author":{"gitId":"Rahul0506"},"content":"        for (String message : messages) {"},{"lineNumber":121,"author":{"gitId":"Rahul0506"},"content":"            System.out.println(\"\\t\" + message);"},{"lineNumber":122,"author":{"gitId":"Rahul0506"},"content":"            finalOut.append(message).append(\"\\n\");"},{"lineNumber":123,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"Rahul0506"},"content":"        System.out.println(\"\\t-----------------------------------------\");"},{"lineNumber":125,"author":{"gitId":"Rahul0506"},"content":"        return finalOut.toString();"},{"lineNumber":126,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":128,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"Rahul0506"},"content":"     * Closes the interface."},{"lineNumber":130,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"Rahul0506"},"content":"    public void exit() {"},{"lineNumber":132,"author":{"gitId":"Rahul0506"},"content":"        scanner.close();"},{"lineNumber":133,"author":{"gitId":"Rahul0506"},"content":"        writeOutput(\"Bye. Hope to see you again soon!\");"},{"lineNumber":134,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":135}},{"path":"src/main/java/duke/view/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.view;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"        db.autosize();"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":62}},{"path":"src/main/java/duke/view/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke.view;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/img_user.png\"));"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/img_duke.png\"));"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":"    private final Image errorImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/img_error.png\"));"},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"        displayDuke(duke.init());"},{"lineNumber":37,"author":{"gitId":"Rahul0506"},"content":"        this.duke \u003d duke;"},{"lineNumber":38,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":40,"author":{"gitId":"Rahul0506"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"Rahul0506"},"content":"    private void handleUserInput() {"},{"lineNumber":42,"author":{"gitId":"Rahul0506"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":43,"author":{"gitId":"Rahul0506"},"content":"        assert input !\u003d null : \"Input text from GUI is null\";"},{"lineNumber":44,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":45,"author":{"gitId":"Rahul0506"},"content":"        displayUser(input);"},{"lineNumber":46,"author":{"gitId":"Rahul0506"},"content":"        userInput.clear();"},{"lineNumber":47,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":48,"author":{"gitId":"Rahul0506"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"Rahul0506"},"content":"        assert response !\u003d null : \"No response from Duke to GUI\";"},{"lineNumber":50,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":51,"author":{"gitId":"Rahul0506"},"content":"        if (response.startsWith(\"OOPS\")) {"},{"lineNumber":52,"author":{"gitId":"Rahul0506"},"content":"            displayError(response);"},{"lineNumber":53,"author":{"gitId":"Rahul0506"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"Rahul0506"},"content":"            displayDuke(response);"},{"lineNumber":55,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Rahul0506"},"content":"        if (response.equals(ExitCommand.EXIT_FLAG)) {"},{"lineNumber":57,"author":{"gitId":"Rahul0506"},"content":"            System.exit(0);"},{"lineNumber":58,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":61,"author":{"gitId":"Rahul0506"},"content":"    private void displayUser(String msg) {"},{"lineNumber":62,"author":{"gitId":"Rahul0506"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":63,"author":{"gitId":"Rahul0506"},"content":"                DialogBox.getUserDialog(msg, userImage)"},{"lineNumber":64,"author":{"gitId":"Rahul0506"},"content":"        );"},{"lineNumber":65,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":67,"author":{"gitId":"Rahul0506"},"content":"    private void displayDuke(String msg) {"},{"lineNumber":68,"author":{"gitId":"Rahul0506"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":69,"author":{"gitId":"Rahul0506"},"content":"                DialogBox.getDukeDialog(msg, dukeImage)"},{"lineNumber":70,"author":{"gitId":"Rahul0506"},"content":"        );"},{"lineNumber":71,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":73,"author":{"gitId":"Rahul0506"},"content":"    private void displayError(String err) {"},{"lineNumber":74,"author":{"gitId":"Rahul0506"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":75,"author":{"gitId":"Rahul0506"},"content":"                DialogBox.getDukeDialog(err, errorImage)"},{"lineNumber":76,"author":{"gitId":"Rahul0506"},"content":"        );"},{"lineNumber":77,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":78}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"450.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"            \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"         \u003c/font\u003e"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":"    \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"    \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Rahul0506":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"450.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.view.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"374.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"78.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Rahul0506":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.Parser;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"    public void processInput_inputBye_parserExits() {"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"            assert (parser.processInput(\"bye\") instanceof ExitCommand);"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"        } catch (Exception ex) {"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"            assert false;"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":18}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"import duke.util.TaskList;"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"public class TaskListTest {"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":9,"author":{"gitId":"Rahul0506"},"content":"    public TaskList setup() {"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"Rahul0506"},"content":"        taskList.addTodo(\"Task 1\");"},{"lineNumber":12,"author":{"gitId":"Rahul0506"},"content":"        taskList.addTodo(\"Task 2\");"},{"lineNumber":13,"author":{"gitId":"Rahul0506"},"content":"        taskList.addTodo(\"Task 3\");"},{"lineNumber":14,"author":{"gitId":"Rahul0506"},"content":"        return taskList;"},{"lineNumber":15,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":17,"author":{"gitId":"Rahul0506"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"    public void addTask_addTodo_todoAdded() {"},{"lineNumber":19,"author":{"gitId":"Rahul0506"},"content":"        TaskList taskList \u003d setup();"},{"lineNumber":20,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":21,"author":{"gitId":"Rahul0506"},"content":"        Task added \u003d taskList.addTodo(\"New Todo\");"},{"lineNumber":22,"author":{"gitId":"Rahul0506"},"content":"        assert taskList.getList().contains(added);"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":25,"author":{"gitId":"Rahul0506"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"Rahul0506"},"content":"    public void deleteTask_deleteTaskInList_taskDeleted() {"},{"lineNumber":27,"author":{"gitId":"Rahul0506"},"content":"        TaskList taskList \u003d setup(); // 3 Tasks in list"},{"lineNumber":28,"author":{"gitId":"Rahul0506"},"content":""},{"lineNumber":29,"author":{"gitId":"Rahul0506"},"content":"        Task temp \u003d taskList.addTodo(\"Temp Task\");"},{"lineNumber":30,"author":{"gitId":"Rahul0506"},"content":"        boolean added \u003d taskList.getList().contains(temp);"},{"lineNumber":31,"author":{"gitId":"Rahul0506"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Rahul0506"},"content":"            taskList.deleteTask(4);"},{"lineNumber":33,"author":{"gitId":"Rahul0506"},"content":"        } catch (Exception ex) {}"},{"lineNumber":34,"author":{"gitId":"Rahul0506"},"content":"        assert added \u0026\u0026 !taskList.getList().contains(temp);"},{"lineNumber":35,"author":{"gitId":"Rahul0506"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Rahul0506"},"content":"}"}],"authorContributionMap":{"Rahul0506":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Rahul0506"},"content":"todo eat"},{"lineNumber":2,"author":{"gitId":"Rahul0506"},"content":"deadline finish eating /by noon"},{"lineNumber":3,"author":{"gitId":"Rahul0506"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Rahul0506"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"Rahul0506"},"content":"delete 2"},{"lineNumber":6,"author":{"gitId":"Rahul0506"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Rahul0506"},"content":"delete a"},{"lineNumber":8,"author":{"gitId":"Rahul0506"},"content":"bye"}],"authorContributionMap":{"Rahul0506":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Rahul0506"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Rahul0506"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Rahul0506":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Rahul0506"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Rahul0506"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Rahul0506":2,"-":36}}]
