[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":25,"constancensq":1}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    mainClassName \u003d \"duke.gui.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"constancensq":17}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"D | 1 | cs2103 proj | 2020-09-17 23:59"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":"E | 0 | dinner party | 2020-09-20 12:30"},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"T | 0 | buy groceries"}],"authorContributionMap":{"constancensq":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":"Duke is a desktop app for managing tasks, optimized for use via a Command Line Interface (CLI) while still "},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"having the benefits of a Graphical User Interface (GUI)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"Table of contents"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"- [Quick Start](#quick-start)"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"- [Features](#features)"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"    * [Viewing help: `help`](#1-viewing-help-help)"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    * [Adding a task](#2-adding-a-task-tododeadlineevent)"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"        * [To Do: `todo`](#21-todo-task-todo)"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        * [Deadline: `deadline`](#22-deadline-task-deadline)"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"        * [Event: `event`](#23-event-task-event)"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    * [Listing all tasks: `list`](#3-listing-all-tasks-list)"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    * [Listing upcoming tasks: `upcoming`](#4-listing-upcoming-tasks-upcoming)"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    * [Finding tasks by keyword: `find`](#5-finding-tasks-by-keyword-find)"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    * [Marking a task as done: `done`](#6-marking-a-task-as-done-done)"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    * [Deleting a task: `delete`](#7-deleting-a-task-delete)"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    * [Exiting the program: `bye`](#8-exiting-the-program-bye)"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    * [Saving the data](#9-saving-the-data)"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"## Quick start"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"1. Download the latest `duke.jar` from [here](https://github.com/constancensq/ip/releases)."},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Duke chatbot."},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"   ![Ui](Ui.png)"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"   Some example commands you can try:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"   * **`list`** : List all tasks."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"   * **`todo`**`study hard` : Adds a todo task named `study hard` to the Duke chatbot."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"   * **`delete`**`3` : Deletes the 3rd task shown in the current list."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"   * **`bye`** : Exits the app."},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"## Features "},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"### 1. Viewing help: `help`"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"Shows a message listing all commands and how to use them."},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"Format: `help`"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"help"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"Here are the things that I can do for you! "},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"- Add a todo task:"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"  todo \u003ctask description\u003e"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"- Add an event task:"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"  event \u003ctask description\u003e /at \u003ctask timing (yyyy-mm-dd HH:MM)\u003e"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"- Add a deadline task:"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"  deadline \u003ctask description\u003e /by \u003ctask timing (yyyy-mm-dd HH:MM)\u003e"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"- See list of tasks:"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":"  list"},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"- See upcoming list of tasks:"},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"  upcoming"},{"lineNumber":75,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":76,"author":{"gitId":"constancensq"},"content":"- Mark a task as done:"},{"lineNumber":77,"author":{"gitId":"constancensq"},"content":"  done \u003cnumber\u003e"},{"lineNumber":78,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":79,"author":{"gitId":"constancensq"},"content":"- Delete a task:"},{"lineNumber":80,"author":{"gitId":"constancensq"},"content":"  delete \u003cnumber\u003e"},{"lineNumber":81,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":82,"author":{"gitId":"constancensq"},"content":"- Find tasks with a keyword:"},{"lineNumber":83,"author":{"gitId":"constancensq"},"content":"  find \u003ckeyword\u003e"},{"lineNumber":84,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":85,"author":{"gitId":"constancensq"},"content":"- End this program :d :"},{"lineNumber":86,"author":{"gitId":"constancensq"},"content":"  bye"},{"lineNumber":87,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":88,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":89,"author":{"gitId":"constancensq"},"content":"### 2. Adding a task: `todo/deadline/event`"},{"lineNumber":90,"author":{"gitId":"constancensq"},"content":"#### 2.1 Todo task: `todo`"},{"lineNumber":91,"author":{"gitId":"constancensq"},"content":"Adds a todo task to the chatbot. "},{"lineNumber":92,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":93,"author":{"gitId":"constancensq"},"content":"Format: `todo \u003ctask description\u003e`"},{"lineNumber":94,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":95,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":96,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":97,"author":{"gitId":"constancensq"},"content":"todo study cs2103"},{"lineNumber":98,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":99,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":100,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":101,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":102,"author":{"gitId":"constancensq"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":103,"author":{"gitId":"constancensq"},"content":"    [T][✘] study cs2103"},{"lineNumber":104,"author":{"gitId":"constancensq"},"content":"Now you have 1 task(s) in the list."},{"lineNumber":105,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":106,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":107,"author":{"gitId":"constancensq"},"content":"#### 2.2 Deadline task: `deadline`"},{"lineNumber":108,"author":{"gitId":"constancensq"},"content":"Adds a deadline task to the chatbot. "},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"constancensq"},"content":"Format: `deadline \u003ctask description\u003e /by \u003ctask timing (yyyy-mm-dd HH:MM)\u003e`"},{"lineNumber":111,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":112,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":113,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":114,"author":{"gitId":"constancensq"},"content":"deadline cs2103 proj /by 2020-09-17 23:59"},{"lineNumber":115,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":118,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":119,"author":{"gitId":"constancensq"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":120,"author":{"gitId":"constancensq"},"content":"    [D][✘] cs2103 proj (by: Sep 17 2020 11:59 PM)"},{"lineNumber":121,"author":{"gitId":"constancensq"},"content":"Now you have 2 task(s) in the list."},{"lineNumber":122,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":123,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":124,"author":{"gitId":"constancensq"},"content":"#### 2.3 Event task: `event`"},{"lineNumber":125,"author":{"gitId":"constancensq"},"content":"Adds an event task to the chatbot. "},{"lineNumber":126,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":127,"author":{"gitId":"constancensq"},"content":"Format: `event \u003ctask description\u003e /at \u003ctask timing (yyyy-mm-dd HH:MM)\u003e`"},{"lineNumber":128,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":129,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":130,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":131,"author":{"gitId":"constancensq"},"content":"event dinner party /at 2020-09-20 12:30"},{"lineNumber":132,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":133,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":134,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":135,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":136,"author":{"gitId":"constancensq"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":137,"author":{"gitId":"constancensq"},"content":"    [E][✘] dinner party (at: Sep 20 2020 12:30 PM)"},{"lineNumber":138,"author":{"gitId":"constancensq"},"content":"Now you have 3 task(s) in the list."},{"lineNumber":139,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":140,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":141,"author":{"gitId":"constancensq"},"content":"### 3. Listing all tasks: `list`"},{"lineNumber":142,"author":{"gitId":"constancensq"},"content":"Shows a list of all tasks saved in the chatbot."},{"lineNumber":143,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":144,"author":{"gitId":"constancensq"},"content":"Format: `list`"},{"lineNumber":145,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":146,"author":{"gitId":"constancensq"},"content":"Example usage:"},{"lineNumber":147,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":148,"author":{"gitId":"constancensq"},"content":"list"},{"lineNumber":149,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":150,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":151,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":152,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":153,"author":{"gitId":"constancensq"},"content":"Task(s) in your list:"},{"lineNumber":154,"author":{"gitId":"constancensq"},"content":" 1. [T][✘] study cs2103"},{"lineNumber":155,"author":{"gitId":"constancensq"},"content":" 2. [D][✘] cs2103 proj (by: Sep 17 2020 11:59 PM)"},{"lineNumber":156,"author":{"gitId":"constancensq"},"content":" 3. [E][✘] dinner party (at: Sep 20 2020 12:30 PM)"},{"lineNumber":157,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":158,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":159,"author":{"gitId":"constancensq"},"content":"### 4. Listing upcoming tasks: `upcoming`"},{"lineNumber":160,"author":{"gitId":"constancensq"},"content":"Shows a list of all deadline/event tasks in a week saved in the chatbot."},{"lineNumber":161,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":162,"author":{"gitId":"constancensq"},"content":"Format: `upcoming`"},{"lineNumber":163,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":164,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":165,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":166,"author":{"gitId":"constancensq"},"content":"upcoming"},{"lineNumber":167,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":168,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":169,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":170,"author":{"gitId":"constancensq"},"content":"Here are the upcoming tasks (in a week)!"},{"lineNumber":171,"author":{"gitId":"constancensq"},"content":" 1. [D][✘] cs2103 proj (by: Sep 17 2020 11:59 PM)"},{"lineNumber":172,"author":{"gitId":"constancensq"},"content":" 2. [E][✘] dinner party (at: Sep 20 2020 12:30 PM)"},{"lineNumber":173,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":174,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":175,"author":{"gitId":"constancensq"},"content":"### 5. Finding tasks by keyword: `find`"},{"lineNumber":176,"author":{"gitId":"constancensq"},"content":"Shows a list of all tasks that contains the given keyword."},{"lineNumber":177,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":178,"author":{"gitId":"constancensq"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":179,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":180,"author":{"gitId":"constancensq"},"content":"Example usage:"},{"lineNumber":181,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":182,"author":{"gitId":"constancensq"},"content":"find cs2103"},{"lineNumber":183,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":184,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":185,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":186,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":187,"author":{"gitId":"constancensq"},"content":"Found some matching tasks:"},{"lineNumber":188,"author":{"gitId":"constancensq"},"content":" 1. [T][✘] study cs2103"},{"lineNumber":189,"author":{"gitId":"constancensq"},"content":" 2. [D][✘] cs2103 proj (by: Sep 17 2020 11:59 PM)"},{"lineNumber":190,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":191,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":192,"author":{"gitId":"constancensq"},"content":"### 6. Marking a task as done: `done`"},{"lineNumber":193,"author":{"gitId":"constancensq"},"content":"Marks the specified task as done."},{"lineNumber":194,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":195,"author":{"gitId":"constancensq"},"content":"Format: `done \u003ctask number\u003e`"},{"lineNumber":196,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":197,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":198,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":199,"author":{"gitId":"constancensq"},"content":"done 1"},{"lineNumber":200,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":201,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":202,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":203,"author":{"gitId":"constancensq"},"content":"Ok! I\u0027ve marked this task as done:"},{"lineNumber":204,"author":{"gitId":"constancensq"},"content":"    [T][✓] study cs2103"},{"lineNumber":205,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":206,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":207,"author":{"gitId":"constancensq"},"content":"### 7. Deleting a task: `delete`"},{"lineNumber":208,"author":{"gitId":"constancensq"},"content":"Deletes the specified task from the chatbot."},{"lineNumber":209,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":210,"author":{"gitId":"constancensq"},"content":"Format: `delete \u003ctask number\u003e`"},{"lineNumber":211,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":212,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":213,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":214,"author":{"gitId":"constancensq"},"content":"delete 1"},{"lineNumber":215,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":216,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":217,"author":{"gitId":"constancensq"},"content":"Expected outcome: "},{"lineNumber":218,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":219,"author":{"gitId":"constancensq"},"content":"No problem. I\u0027ve removed this task:"},{"lineNumber":220,"author":{"gitId":"constancensq"},"content":"    [T][✓] study cs2103"},{"lineNumber":221,"author":{"gitId":"constancensq"},"content":" Now you have 2 task(s) in the list."},{"lineNumber":222,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":223,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":224,"author":{"gitId":"constancensq"},"content":"### 8. Exiting the program: `bye`"},{"lineNumber":225,"author":{"gitId":"constancensq"},"content":"Exits the program."},{"lineNumber":226,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":227,"author":{"gitId":"constancensq"},"content":"Format: `bye`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"constancensq"},"content":"Example usage: "},{"lineNumber":230,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":231,"author":{"gitId":"constancensq"},"content":"bye"},{"lineNumber":232,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"Expected outcome: "},{"lineNumber":235,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":236,"author":{"gitId":"constancensq"},"content":"Goodbye! Come back soon!"},{"lineNumber":237,"author":{"gitId":"constancensq"},"content":"```"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"constancensq"},"content":"### 9. Saving the data"},{"lineNumber":240,"author":{"gitId":"constancensq"},"content":"Duke\u0027s data are saved in the hard disk automatically after any commands that changes it."},{"lineNumber":241,"author":{"gitId":"constancensq"},"content":"There is no need to save the data manually. "}],"authorContributionMap":{"-":16,"constancensq":225}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.UpcomingTasksCommand;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.logic.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":" * Represents a duke.Duke chatbot that can store, delete, mark tasks as done and display them."},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"     * Creates a duke.Duke object that loads information from specified filePath."},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"     * @param filePath The text file which duke.Duke loads information from."},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    public String showWelcomeMessage() {"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        return ui.showWelcome();"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"     * Shows reminder for events/deadline tasks that are a week away."},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"     * @return The string message showing upcoming tasks if there are any, in a week."},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"    public String showReminderMessage() {"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        return (new UpcomingTasksCommand()).execute(tasks, ui, storage);"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"     * Generates a response to user input from GUI."},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"     * @param input The user input."},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"     * @return duke.Duke\u0027s response."},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"    public String getResponse(String input) {"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"            String result \u003d c.execute(tasks, ui, storage);"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"            assert result !\u003d null : \"No message is returned.\";"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"            return result;"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"            return ui.showError(e.getMessage());"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":1,"constancensq":63}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents exceptions specific to duke.Duke."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    DukeException(String msg) {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(msg);"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/exceptions/EmptyDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when the deadline of the task is not provided."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class EmptyDeadlineException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"     * Represents an empty deadline exception."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    public EmptyDeadlineException() {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, the deadline of this task is not provided.\\n\""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"                + \"Please re-enter the desired deadline task\\n\""},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"                + \"(e.g. deadline xxx /by yyyy-mm-dd HH:MM)\");"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":15}},{"path":"src/main/java/duke/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when the description of the task is not provided."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class EmptyDescriptionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public EmptyDescriptionException() {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, I can\u0027t add a task without a description :(\");"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/exceptions/EmptyEventTimingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when the timing of the event is not provided."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class EmptyEventTimingException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"     * Represents an empty event timing exception."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    public EmptyEventTimingException() {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, The duration of this task cannot be empty.\\n\""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"                + \"Please re-enter the desired event task\\n\""},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"                + \"(e.g. event xxx /at yyyy-mm-dd HH:mm)\");"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":15}},{"path":"src/main/java/duke/exceptions/FileLoadFailException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents exception thrown when unable to load file."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class FileLoadFailException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public FileLoadFailException() {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, there was a problem loading the file.\");"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when an invalid command is provided."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"     * Represents an invalid command exception."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    public InvalidCommandException() {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, didn\u0027t get that :( \""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"                + \"Try again or press \u0027help\u0027 to find out more!\");"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":14}},{"path":"src/main/java/duke/exceptions/InvalidDeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when the format of the deadline is incorrect."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class InvalidDeadlineFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"     * Represents an invalid deadline format exception."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    public InvalidDeadlineFormatException() {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, please enter a valid deadline task\\n\""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"                + \"(e.g. deadline xxx /by yyyy-mm-dd HH:mm)\");"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":14}},{"path":"src/main/java/duke/exceptions/InvalidEventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when the format of the event is incorrect."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class InvalidEventFormatException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"     * Represents an invalid event format exception."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    public InvalidEventFormatException() {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, please enter a valid event task\\n\""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"                + \"(e.g. event xxx /at yyyy-mm-dd HH:mm)\");"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":14}},{"path":"src/main/java/duke/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when there is no such task."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class InvalidTaskException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public InvalidTaskException() {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no.. I dont think you have that task in your list.\");"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/exceptions/MarkedDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents an exception thrown when a done task is called to be marked done again."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class MarkedDoneException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public MarkedDoneException() {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, you have already marked this task as done!\");"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/exceptions/StorageUpdateFailException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents exception thrown when unable to update storage."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class StorageUpdateFailException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public StorageUpdateFailException() {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(\"Oh no, failed to update tasks to storage. Please try again.\");"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":10}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"     * Represents a dialog box in the GUI with a textbox and image side by side."},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"     * @param text The text to be shown in textbox."},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"     * @param img The image to be shown beside the textbox."},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"    public DialogBox(String text, Image img) {"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"            fxmlLoader.load();"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"        dialog.setText(text);"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"        dialog.setWrapText(true);"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"        dialog.setPadding(new Insets(12, 14, 12, 14));"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"        dialog.setBackground(new Background(new BackgroundFill(Color.rgb(242, 247, 250),"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"                new CornerRadii(20), Insets.EMPTY)));"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"     * Flips the dialog box such that the ImageView is on the left and dialog on the right."},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"    private void flip() {"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"        this.setAlignment(Pos.CENTER_LEFT);"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"        Collections.reverse(tmp);"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"        return new DialogBox(text, img);"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":"        db.flip();"},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":74}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":" * A GUI for duke.Duke using FXML."},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"            stage.setTitle(\"Lil Beanz\");"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":33}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.BackgroundImage;"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.BackgroundPosition;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.BackgroundRepeat;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.BackgroundSize;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"import javafx.util.Duration;"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":" * Controller for duke.gui.MainWindow. Provides the layout for the other controls."},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    private VBox dialogContainer;"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    private TextField userInput;"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    private Button sendButton;"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    private Duke duke;"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    private Image backgroundImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/background.png\"));"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    private Image errorImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/error_pic.png\"));"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"    private BackgroundImage backgroundImageCreated \u003d new BackgroundImage(backgroundImage,"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"            BackgroundRepeat.REPEAT,"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"            BackgroundRepeat.REPEAT,"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"            BackgroundPosition.DEFAULT,"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"            BackgroundSize.DEFAULT);"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    private Background background \u003d new Background(backgroundImageCreated);"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"     * Method to initialise the dialog box with a specified background."},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"    public void initialize() {"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        dialogContainer.setBackground(background);"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"        duke \u003d d;"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"                DialogBox.getDukeDialog(d.showWelcomeMessage(), dukeImage),"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"                DialogBox.getDukeDialog(d.showReminderMessage(), dukeImage)"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke."},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user input after processing."},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"    private void handleUserInput() {"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage));"},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"        // delay duke\u0027s output to come awhile after user\u0027s input"},{"lineNumber":75,"author":{"gitId":"constancensq"},"content":"        PauseTransition delayDukeOutput \u003d new PauseTransition(Duration.seconds(0.3));"},{"lineNumber":76,"author":{"gitId":"constancensq"},"content":"        delayDukeOutput.setOnFinished(event -\u003e {"},{"lineNumber":77,"author":{"gitId":"constancensq"},"content":"            if (response.startsWith(\"Oh no\")) {"},{"lineNumber":78,"author":{"gitId":"constancensq"},"content":"                dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response, errorImage));"},{"lineNumber":79,"author":{"gitId":"constancensq"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"constancensq"},"content":"                dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":81,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"constancensq"},"content":"        });"},{"lineNumber":83,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":84,"author":{"gitId":"constancensq"},"content":"        delayDukeOutput.play();"},{"lineNumber":85,"author":{"gitId":"constancensq"},"content":"        userInput.clear();"},{"lineNumber":86,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":87,"author":{"gitId":"constancensq"},"content":"        // delay exiting program"},{"lineNumber":88,"author":{"gitId":"constancensq"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":89,"author":{"gitId":"constancensq"},"content":"            PauseTransition wait \u003d new PauseTransition(Duration.seconds(1));"},{"lineNumber":90,"author":{"gitId":"constancensq"},"content":"            wait.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":91,"author":{"gitId":"constancensq"},"content":"            wait.play();"},{"lineNumber":92,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":94}},{"path":"src/main/java/duke/logic/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Event;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import duke.tasks.ToDo;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":" * Represents a command to add a todo/event/deadline task."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    private Task task;"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"    public AddCommand(Task task) {"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        this.task \u003d task;"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"     * Adds task to the task list and appends a line to represent the task to the filepath stored in storage."},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException if unable to append to file specified in storage\u0027s filepath"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        assert task !\u003d null : \"No task to be added.\";"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"        tasks.addTask(task);"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"            storage.appendToFile(\"T | 0 | \" + ((ToDo) task).getDescription() + \"\\n\");"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"            storage.appendToFile(\"D | 0 | \" + task.getDescription() + \" | \""},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"                    + ((Deadline) task).getBy().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"            storage.appendToFile(\"E | 0 | \" + task.getDescription() + \" | \""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"                    + ((Event) task).getTiming().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \"\\n\");"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"        assert ui.showAdded(tasks.getTask(tasks.getNumTasks()), tasks.getNumTasks()) !\u003d null"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"                : \"Message showing added task should be shown.\";"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"        return ui.showAdded(tasks.getTask(tasks.getNumTasks()), tasks.getNumTasks());"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":59}},{"path":"src/main/java/duke/logic/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" * Represents a command that can be executed."},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"     * Execute the command that user calls."},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @return String message to show the executed event."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException If unable to update file to storage\u0027s filepath when required."},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    public abstract boolean isExit();"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":24}},{"path":"src/main/java/duke/logic/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidTaskException;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":" * Represents a command to delete a task."},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    private int taskNumber;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     * Deletes a task from the task list and rewrites the file in filepath specified in storage"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"     * to exclude the deleted task."},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"     * @return The output string message showing deleted task and current tasks left."},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException If the task number is invalid or unable to overwrite file specified in storage"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"     * filePath successfully."},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        // check if the taskNumber provided is in range"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        if (taskNumber \u003e tasks.getNumTasks() || taskNumber \u003c\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"            throw new InvalidTaskException();"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"        String output \u003d ui.showDeleted(tasks.getTask(taskNumber), (tasks.getNumTasks() - 1));"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"        tasks.deleteTask(taskNumber); // delete from tasklist"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"        storage.overwriteFile(tasks.getTaskList()); // delete from storage"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"        assert output !\u003d null : \"Message to show task deleted should be shown.\";"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        return output;"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":51}},{"path":"src/main/java/duke/logic/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidTaskException;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.MarkedDoneException;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":" * Represents a command to mark a task as done."},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    private int taskNumber;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     * Marks a task as done and updates it in both the task list and file in filepath specified in storage."},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"     * @return The string output message showing task that is marked done."},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException If task number is invalid or task is already marked done."},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        // check if the taskNumber provided is in range"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        if (taskNumber \u003e tasks.getNumTasks() || taskNumber \u003c\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"            throw new InvalidTaskException();"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        } else if (tasks.getTask(taskNumber).getIsDone()) {"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"            throw new MarkedDoneException();"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"        tasks.doneTask(taskNumber);"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"        storage.overwriteFile(tasks.getTaskList());"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"        assert ui.showMarkedDone(tasks.getTask(taskNumber)) !\u003d null : \"Message to show task is marked should be shown.\";"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"        return ui.showMarkedDone(tasks.getTask(taskNumber));"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":50}},{"path":"src/main/java/duke/logic/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":" * Represents a command to terminate the duke.Duke chatbot."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"     * Executes command to display the goodbye message."},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @return Goodbye message."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        assert ui.showBye() !\u003d null : \"Message showing bye should be shown.\";"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"        return ui.showBye();"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        return true;"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":32}},{"path":"src/main/java/duke/logic/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" * Represents a command to find tasks based on keyword."},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    private String keyword;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     * Obtains string of matching tasks."},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task List of all tasks."},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"     * @return List of tasks, numbered in order."},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    public String getMatchingTasks(TaskList tasks) {"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        String matchingTasks \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"        int numMatching \u003d 0;"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumTasks(); i++) {"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"            Task currentTask \u003d tasks.getTask(i + 1);"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"            if (currentTask.getDescription().contains(keyword)) {"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"                numMatching++;"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"                matchingTasks \u003d matchingTasks + \"\\n \" + numMatching + \". \" + currentTask.toString();"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        return matchingTasks;"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"     * Search for tasks with keyword and enumerates them."},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"     * @return List of tasks, numbered in order."},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"        assert !keyword.isEmpty() : \"No keyword provided.\";"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        String matchingTasks \u003d getMatchingTasks(tasks);"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"        if (matchingTasks.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"            assert ui.showEmptyMatchingList() !\u003d null : \"Message showing empty list should be shown.\";"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"            return ui.showEmptyMatchingList();"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"            assert ui.showMatchingTaskList(matchingTasks) !\u003d null : \"Message showing \""},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"                    + \"matching task list should be shown.\";"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"            return ui.showMatchingTaskList(matchingTasks);"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":69}},{"path":"src/main/java/duke/logic/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"public class HelpCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"     * Shows a help message to users to show the possible commands that can be called."},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"     * @return A help message with list of commands and description."},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"        assert ui.showHelp() !\u003d null : \"Message showing possible commands should be shown.\";"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        return ui.showHelp();"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":27}},{"path":"src/main/java/duke/logic/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":" * Represents a command to list current items in tasks list."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"     * Executes command to print out all tasks in the tasks list, or notify an empty task list."},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist not found.\";"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"        assert ui !\u003d null : \"duke.ui.Ui not found.\";"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        assert storage !\u003d null : \"duke.storage.Storage not found.\";"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        if (tasks.getNumTasks() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"            return ui.showEmptyTaskList();"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        String tasksList \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumTasks(); i++) {"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"            tasksList \u003d tasksList + \"\\n \" + (i + 1) + \". \" + tasks.getTask(i + 1);"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"        assert ui.showTaskList(tasksList) !\u003d null : \"Message showing tasklist should be shown.\";"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"        return ui.showTaskList(tasksList);"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":38}},{"path":"src/main/java/duke/logic/commands/UpcomingTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Event;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"public class UpcomingTasksCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * Shows the tasks that are upcoming in a week."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     * @param tasks duke.tasks.Task list of all tasks."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @param ui duke.ui.Ui to deal with interaction with user."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     * @param storage duke.storage.Storage to load and save tasks."},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"     * @return The string message showing upcoming tasks if there are any, in a week."},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"        String upcomingTasks \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        int numUpcoming \u003d 0;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumTasks(); i++) {"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"            Task current \u003d tasks.getTask(i + 1);"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"            if (current instanceof Event) {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"                long days \u003d ChronoUnit.DAYS.between(now, ((Event) current).getTiming());"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"                if (days \u003c\u003d 7) {"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"                    numUpcoming++;"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"                    upcomingTasks \u003d upcomingTasks + \"\\n \" + numUpcoming + \". \" + current.toString();"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"                }"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"            } else if (current instanceof Deadline) {"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"                long days \u003d ChronoUnit.DAYS.between(now, ((Deadline) current).getBy());"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"                if (days \u003c\u003d 7) {"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"                    numUpcoming++;"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"                    upcomingTasks \u003d upcomingTasks + \"\\n \" + numUpcoming + \". \" + current.toString();"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        return ui.showUpcomingTasks(upcomingTasks);"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"    public boolean isExit() {"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        return false;"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":51}},{"path":"src/main/java/duke/logic/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.logic.parser;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.EmptyDeadlineException;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.EmptyDescriptionException;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.EmptyEventTimingException;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidCommandException;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidDeadlineFormatException;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidEventFormatException;"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.InvalidTaskException;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.Command;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.DoneCommand;"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.UpcomingTasksCommand;"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Deadline;"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Event;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"import duke.tasks.ToDo;"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":" * Represents a parser to parse input string commands to the respective commands."},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"public class Parser {"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"     * Returns whether the string provided is an integer."},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"     * @param secondWord Word to be parsed into integer."},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"     * @return Boolean to signify if given word is an integer"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    public static boolean isInteger(String secondWord) {"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"            Integer.parseInt(secondWord);"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"            return true;"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"     * Returns whether the input date provided is of the format (yyyy-MM-dd HH:mm)"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"     * @param inputDate String of date to be checked."},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"     * @return Boolean to signify if given input date is of correct format."},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    public static boolean isValidFormat(String inputDate) {"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(inputDate, formatter);"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"     * Parses the command given in string into a duke.logic.commands.Command that it represents."},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"     * @param fullCommand The command that the user input into the chatbot."},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"     * @return Type of command that the input represents."},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException If invalid commands are provided."},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":"        String[] inputDataWords \u003d fullCommand.split(\" \");"},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"        String firstWord \u003d inputDataWords[0];"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"        if (fullCommand.equals(\"help\")) {"},{"lineNumber":75,"author":{"gitId":"constancensq"},"content":"            return new HelpCommand();"},{"lineNumber":76,"author":{"gitId":"constancensq"},"content":"        } else if (fullCommand.equals(\"list\")) {"},{"lineNumber":77,"author":{"gitId":"constancensq"},"content":"            return new ListCommand();"},{"lineNumber":78,"author":{"gitId":"constancensq"},"content":"        } else if (fullCommand.equals(\"upcoming\")) {"},{"lineNumber":79,"author":{"gitId":"constancensq"},"content":"            return new UpcomingTasksCommand();"},{"lineNumber":80,"author":{"gitId":"constancensq"},"content":"        } else if (fullCommand.equals(\"bye\")) {"},{"lineNumber":81,"author":{"gitId":"constancensq"},"content":"            return new ExitCommand();"},{"lineNumber":82,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"find\")) {"},{"lineNumber":83,"author":{"gitId":"constancensq"},"content":"            String keyword \u003d fullCommand.split(\"find \")[1];"},{"lineNumber":84,"author":{"gitId":"constancensq"},"content":"            return new FindCommand(keyword);"},{"lineNumber":85,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"done\")) {"},{"lineNumber":86,"author":{"gitId":"constancensq"},"content":"            if (inputDataWords.length !\u003d 2) {"},{"lineNumber":87,"author":{"gitId":"constancensq"},"content":"                throw new InvalidCommandException();"},{"lineNumber":88,"author":{"gitId":"constancensq"},"content":"            } else if (!isInteger(inputDataWords[1])) { // check if second word is an integer"},{"lineNumber":89,"author":{"gitId":"constancensq"},"content":"                throw new InvalidTaskException();"},{"lineNumber":90,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":92,"author":{"gitId":"constancensq"},"content":"            int taskNumber \u003d Integer.parseInt(inputDataWords[1]);"},{"lineNumber":93,"author":{"gitId":"constancensq"},"content":"            return new DoneCommand(taskNumber);"},{"lineNumber":94,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"delete\")) {"},{"lineNumber":95,"author":{"gitId":"constancensq"},"content":"            if (inputDataWords.length !\u003d 2) {"},{"lineNumber":96,"author":{"gitId":"constancensq"},"content":"                throw new InvalidCommandException();"},{"lineNumber":97,"author":{"gitId":"constancensq"},"content":"            } else if (!isInteger(inputDataWords[1])) { // check if second word is an integer"},{"lineNumber":98,"author":{"gitId":"constancensq"},"content":"                throw new InvalidTaskException();"},{"lineNumber":99,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":101,"author":{"gitId":"constancensq"},"content":"            int taskNumber \u003d Integer.parseInt(inputDataWords[1]);"},{"lineNumber":102,"author":{"gitId":"constancensq"},"content":"            return new DeleteCommand(taskNumber);"},{"lineNumber":103,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"todo\")) {"},{"lineNumber":104,"author":{"gitId":"constancensq"},"content":"            if (inputDataWords.length \u003c 2) {"},{"lineNumber":105,"author":{"gitId":"constancensq"},"content":"                throw new EmptyDescriptionException();"},{"lineNumber":106,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":108,"author":{"gitId":"constancensq"},"content":"            ToDo task \u003d new ToDo(fullCommand.split(\"todo \")[1]);"},{"lineNumber":109,"author":{"gitId":"constancensq"},"content":"            return new AddCommand(task);"},{"lineNumber":110,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"deadline\")) {"},{"lineNumber":111,"author":{"gitId":"constancensq"},"content":"            if (inputDataWords.length \u003c 2) {"},{"lineNumber":112,"author":{"gitId":"constancensq"},"content":"                throw new EmptyDescriptionException();"},{"lineNumber":113,"author":{"gitId":"constancensq"},"content":"            } else if (fullCommand.split(\"/by \").length \u003c 2 || inputDataWords[1].equals(\"/by\")) {"},{"lineNumber":114,"author":{"gitId":"constancensq"},"content":"                throw new EmptyDeadlineException();"},{"lineNumber":115,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":117,"author":{"gitId":"constancensq"},"content":"            String byString \u003d fullCommand.split(\"/by \")[1];"},{"lineNumber":118,"author":{"gitId":"constancensq"},"content":"            if (!isValidFormat(byString)) {"},{"lineNumber":119,"author":{"gitId":"constancensq"},"content":"                throw new InvalidDeadlineFormatException();"},{"lineNumber":120,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":122,"author":{"gitId":"constancensq"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":123,"author":{"gitId":"constancensq"},"content":"            LocalDateTime byLocalDate \u003d LocalDateTime.parse(byString, formatter);"},{"lineNumber":124,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":125,"author":{"gitId":"constancensq"},"content":"            Deadline task \u003d new Deadline("},{"lineNumber":126,"author":{"gitId":"constancensq"},"content":"                    fullCommand.split(\"deadline \")[1].split(\" /by \")[0], byLocalDate);"},{"lineNumber":127,"author":{"gitId":"constancensq"},"content":"            return new AddCommand(task);"},{"lineNumber":128,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":129,"author":{"gitId":"constancensq"},"content":"        } else if (firstWord.equals(\"event\")) {"},{"lineNumber":130,"author":{"gitId":"constancensq"},"content":"            if (fullCommand.split(\" \").length \u003c 2 || inputDataWords[1].equals(\"/at\")) {"},{"lineNumber":131,"author":{"gitId":"constancensq"},"content":"                throw new EmptyDescriptionException();"},{"lineNumber":132,"author":{"gitId":"constancensq"},"content":"            } else if (fullCommand.split(\"/at \").length \u003c 2) {"},{"lineNumber":133,"author":{"gitId":"constancensq"},"content":"                throw new EmptyEventTimingException();"},{"lineNumber":134,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":136,"author":{"gitId":"constancensq"},"content":"            String atString \u003d fullCommand.split(\"/at \")[1];"},{"lineNumber":137,"author":{"gitId":"constancensq"},"content":"            if (!isValidFormat(atString)) {"},{"lineNumber":138,"author":{"gitId":"constancensq"},"content":"                throw new InvalidEventFormatException();"},{"lineNumber":139,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":141,"author":{"gitId":"constancensq"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":142,"author":{"gitId":"constancensq"},"content":"            LocalDateTime atLocalDate \u003d LocalDateTime.parse(atString, formatter);"},{"lineNumber":143,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":144,"author":{"gitId":"constancensq"},"content":"            Event task \u003d new Event("},{"lineNumber":145,"author":{"gitId":"constancensq"},"content":"                    fullCommand.split(\"event \")[1].split(\" /at \")[0], atLocalDate);"},{"lineNumber":146,"author":{"gitId":"constancensq"},"content":"            return new AddCommand(task);"},{"lineNumber":147,"author":{"gitId":"constancensq"},"content":"        } else {"},{"lineNumber":148,"author":{"gitId":"constancensq"},"content":"            // invalid commands"},{"lineNumber":149,"author":{"gitId":"constancensq"},"content":"            throw new InvalidCommandException();"},{"lineNumber":150,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":152}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.FileLoadFailException;"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.StorageUpdateFailException;"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Deadline;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Event;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"import duke.tasks.ToDo;"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":" * Represents a storage system to load tasks from file and append/overwrite tasks."},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    protected String filePath;"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    public Storage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"     * Scans through file at specified filePath and make use of the information to initialise tasks arraylist."},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"     * If directory or file does not exist, it creates the necessary directories and file."},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"     * @return A list of tasks found in the file at specified filePath."},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException if unable to load file."},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"            assert !filePath.isEmpty() : \"No filepath specified.\";"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"            int numTasks \u003d 0;"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"            File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"            if (!f.exists()) {"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"                File directory \u003d new File(\"data\");"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"                directory.mkdir(); // creates the directory if it does not exist"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"                File file \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"                file.createNewFile();"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"            // go through file contents and initialise the tasks arraylist"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"            while (s.hasNext()) {"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"                String currString \u003d s.nextLine();"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"                String[] currStringArray \u003d currString.split(\" \\\\| \");"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"                String taskIdentifier \u003d currStringArray[0];"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"                boolean isDone \u003d currStringArray[1].equals(\"1\");"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"                if (taskIdentifier.equals(\"T\")) {"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"                    tasks.add(numTasks, new ToDo(currStringArray[2], isDone));"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"                } else if (taskIdentifier.equals(\"D\")) {"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"                    LocalDateTime byLocalDate \u003d LocalDateTime.parse(currStringArray[3], formatter);"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"                    tasks.add(numTasks, new Deadline(currStringArray[2], byLocalDate, isDone));"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"                } else if (taskIdentifier.equals(\"E\")) {"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"                    LocalDateTime timingLocalDate \u003d LocalDateTime.parse(currStringArray[3], formatter);"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"                    tasks.add(numTasks, new Event(currStringArray[2], timingLocalDate, isDone));"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"                numTasks++;"},{"lineNumber":75,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"constancensq"},"content":"            return tasks;"},{"lineNumber":77,"author":{"gitId":"constancensq"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitId":"constancensq"},"content":"            throw new FileLoadFailException();"},{"lineNumber":79,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":82,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"constancensq"},"content":"     * Adds text to the file at specified filepath."},{"lineNumber":84,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"constancensq"},"content":"     * @param textToAppend Text to be added to the file."},{"lineNumber":86,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException if unable to append a line to the file."},{"lineNumber":87,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"constancensq"},"content":"    public void appendToFile(String textToAppend) throws DukeException {"},{"lineNumber":89,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"constancensq"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"},{"lineNumber":91,"author":{"gitId":"constancensq"},"content":"            fw.write(textToAppend);"},{"lineNumber":92,"author":{"gitId":"constancensq"},"content":"            fw.close();"},{"lineNumber":93,"author":{"gitId":"constancensq"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitId":"constancensq"},"content":"            throw new StorageUpdateFailException();"},{"lineNumber":95,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":97,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":99,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"constancensq"},"content":"     * Rewrites the entire file based on the tasks arraylist, looping through each task and formatting it."},{"lineNumber":101,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"constancensq"},"content":"     * @param tasks"},{"lineNumber":103,"author":{"gitId":"constancensq"},"content":"     * @throws DukeException"},{"lineNumber":104,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"constancensq"},"content":"    public void overwriteFile(List\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":106,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"constancensq"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":108,"author":{"gitId":"constancensq"},"content":"            String tasksList \u003d \"\";"},{"lineNumber":109,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":110,"author":{"gitId":"constancensq"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":111,"author":{"gitId":"constancensq"},"content":"                if (i \u003d\u003d 0) {"},{"lineNumber":112,"author":{"gitId":"constancensq"},"content":"                    tasksList \u003d tasks.get(i).toTxtFileFormat();"},{"lineNumber":113,"author":{"gitId":"constancensq"},"content":"                } else {"},{"lineNumber":114,"author":{"gitId":"constancensq"},"content":"                    tasksList \u003d tasksList + \"\\n\" + tasks.get(i).toTxtFileFormat();"},{"lineNumber":115,"author":{"gitId":"constancensq"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"constancensq"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":118,"author":{"gitId":"constancensq"},"content":"            fw.write(tasksList);"},{"lineNumber":119,"author":{"gitId":"constancensq"},"content":"            fw.close();"},{"lineNumber":120,"author":{"gitId":"constancensq"},"content":"        } catch (IOException e) {"},{"lineNumber":121,"author":{"gitId":"constancensq"},"content":"            throw new StorageUpdateFailException();"},{"lineNumber":122,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":124,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":125}},{"path":"src/main/java/duke/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" * Represents the task list of all tasks in duke.Duke."},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    protected List\u003cTask\u003e tasks;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    public Task getTask(int taskNumber) {"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.size() : \"duke.tasks.Task number is invalid.\";"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        return tasks.get(taskNumber - 1);"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        return this.tasks;"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    public int getNumTasks() {"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        return tasks.size();"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"     * Delete a task to task list."},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"     * @param taskNumber The task number representing task to be deleted."},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"    public void deleteTask(int taskNumber) {"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.size() : \"duke.tasks.Task number is invalid.\";"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"        tasks.remove(taskNumber - 1);"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"     * Add a task to task list."},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"     * @param task The task number representing task to be added."},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"    public void addTask(Task task) {"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"        tasks.add(task);"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"     * Mark a task in task list as done."},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"     * @param taskNumber The task number representing task to be marked as done in task list."},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"    public void doneTask(int taskNumber) {"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"        assert tasks !\u003d null : \"Tasklist is not initialised.\";"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.size() : \"duke.tasks.Task number is invalid.\";"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"        tasks.set(taskNumber - 1, tasks.get(taskNumber - 1).markAsDone());"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":70}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":" * Represents a task with a deadline. A deadline task has a description and the deadline of the task."},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    private static final String TEXTFILE_DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    private static final String OUTPUT_DATE_FORMAT \u003d \"MMM d yyyy hh:mm a\";"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    private LocalDateTime by;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * Creates a deadline task that is not done."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the task."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @param by duke.tasks.Deadline of the task."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        this.by \u003d by;"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"     * Creates a deadline task, specifying if it is done."},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the task."},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"     * @param by duke.tasks.Deadline of the task."},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"     * @param isDone True to show task is done, False to show task is not done."},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    public Deadline(String description, LocalDateTime by, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        super(description, isDone);"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        this.by \u003d by;"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    public LocalDateTime getBy() {"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"        return this.by;"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"     * Marks a deadline task as done."},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"     * @return A deadline task that is done."},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    public Deadline markAsDone() {"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"        Deadline doneDeadline \u003d new Deadline(this.getDescription(), this.by, true);"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        return doneDeadline;"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    public String toTxtFileFormat() {"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        return \"D\" + super.toTxtFileFormat() + \" | \""},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(TEXTFILE_DATE_FORMAT));"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(OUTPUT_DATE_FORMAT)) + \")\";"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":63}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":" * Represents a task that is an event with a description and timing"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    private static final String TEXTFILE_DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    private static final String OUTPUT_DATE_FORMAT \u003d \"MMM d yyyy hh:mm a\";"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    private LocalDateTime timing;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"     * Creates an event task with description and timing of event, that is not done."},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the event task."},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @param timing Timing event will take place."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    public Event(String description, LocalDateTime timing) {"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        this.timing \u003d timing;"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"     * Creates an event task with description and timing of event, specifying if it is done."},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the event task."},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"     * @param timing Timing event will take place."},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"     * @param isDone True to show task is done, False to show task is not done."},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    public Event(String description, LocalDateTime timing, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        super(description, isDone);"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        this.timing \u003d timing;"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    public LocalDateTime getTiming() {"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"        return this.timing;"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"     * Marks the event task as done."},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"     * @return duke.tasks.Event task that is marked as done."},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"    public Event markAsDone() {"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"        Event doneEvent \u003d new Event(this.getDescription(), this.timing, true);"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        return doneEvent;"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    public String toTxtFileFormat() {"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        return \"E\" + super.toTxtFileFormat() + \" | \""},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"                + this.timing.format(DateTimeFormatter.ofPattern(TEXTFILE_DATE_FORMAT));"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"                + this.timing.format(DateTimeFormatter.ofPattern(OUTPUT_DATE_FORMAT)) + \")\";"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":63}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents a task with description and a boolean to signify if it is done."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    private String description;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"     * Creates a task with description that is not done."},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the task."},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"     * Creates a task with description, specifying if it is done."},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"     * @param description Description of the task."},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"     * @param isDone True if task is done, False if task is not done."},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    public boolean getIsDone() {"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        return this.isDone;"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"     * Retrieves information on whether task is done and represents with a symbol."},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"     * @return A String representing a tick (if task is done) or cross (if task is not done) symbol"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"    public String getStatusIcon() {"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"     * Mark task as done."},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"     * @return A task that is marked as done."},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"    public Task markAsDone() {"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"        return new Task(this.description, true);"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"     * Returns the representation of the task in a text file."},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"     * @return String representation of task in a text file."},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"    public String toTxtFileFormat() {"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"        return \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":68}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":" * Represents a task to be done."},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"    public ToDo(String description) {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"        super(description, isDone);"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"     * Mark the duke.tasks.ToDo task as done."},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"     * @return A duke.tasks.ToDo task that is done."},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"    public ToDo markAsDone() {"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        ToDo doneToDo \u003d new ToDo(this.getDescription(), true);"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        return doneToDo;"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"    public String toTxtFileFormat() {"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"        return \"T\" + super.toTxtFileFormat();"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":35}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":" * Represents the system that interacts with the user, reading inputs and displaying messages."},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":" */"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    private static final String LINE \u003d \" ____________________________________________________________\\n \";"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    private static final String WELCOME_MESSAGE \u003d \"Hello there!\\n\""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"            + \"What can I do for you today? \\nType \u0027help\u0027 to find out more!\";"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    private static final String BYE_MESSAGE \u003d \"Goodbye! Come back soon!\";"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    private static final String EMPTY_TASK_LIST_MESSAGE \u003d \"You have no tasks in your list. Add some tasks!\";"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    private static final String NO_MATCHING_TASK_MESSAGE \u003d \"Hmm.. there are no tasks with that keyword!\";"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    private static final String HELP_MESSAGE \u003d \"Here are the things that I can do for you! \\n\\n\""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"            + \"- Add a todo task:\\n\""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"            + \"  todo \u003ctask description\u003e\\n\\n\""},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"            + \"- Add an event task:\\n\""},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"            + \"  event \u003ctask description\u003e /at \u003ctask timing (yyyy-mm-dd HH:MM)\u003e\\n\\n\""},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"            + \"- Add a deadline task:\\n\""},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"            + \"  deadline \u003ctask description\u003e /by \u003ctask timing (yyyy-mm-dd HH:MM)\u003e\\n\\n\""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"            + \"- See list of tasks:\\n\""},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"            + \"  list\\n\\n\""},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"            + \"- See upcoming list of tasks:\\n\""},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"            + \"  upcoming\\n\\n\""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"            + \"- Mark a task as done:\\n\""},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"            + \"  done \u003cnumber\u003e\\n\\n\""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"            + \"- Delete a task:\\n\""},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"            + \"  delete \u003cnumber\u003e\\n\\n\""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"            + \"- Find tasks with a keyword:\\n\""},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"            + \"  find \u003ckeyword\u003e\\n\\n\""},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"            + \"- End this program :d :\\n\""},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"            + \"  bye\";"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    protected Scanner sc;"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"    public Ui() {"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"     * Show a line, which is printed before and after each message for design."},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"    public String showLine() {"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"        System.out.print(LINE);"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"        return LINE;"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"     * Show a welcome message to the user."},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"     * @return The string with welcome message."},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"    public String showWelcome() {"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"        this.showLine();"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":"        System.out.println(WELCOME_MESSAGE);"},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"        this.showLine();"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"        return WELCOME_MESSAGE;"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"     * Shows bye message to the user"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"     * @return The string with bye message."},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"    public String showBye() {"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"        System.out.println(BYE_MESSAGE);"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"        return BYE_MESSAGE;"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"     * Shows the task that is added and the updated number of tasks."},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"constancensq"},"content":"     * @param task Task to be added."},{"lineNumber":76,"author":{"gitId":"constancensq"},"content":"     * @param numTasks Updated number of tasks."},{"lineNumber":77,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing the added task."},{"lineNumber":78,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"constancensq"},"content":"    public String showAdded(Task task, int numTasks) {"},{"lineNumber":80,"author":{"gitId":"constancensq"},"content":"        String result \u003d \"Got it. I\u0027ve added this task:\\n    \" + task"},{"lineNumber":81,"author":{"gitId":"constancensq"},"content":"                + \"\\n Now you have \" + numTasks + \" task(s) in the list.\";"},{"lineNumber":82,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":83,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":84,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":86,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"constancensq"},"content":"     * Shows the task that is deleted and the updated number of tasks."},{"lineNumber":88,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"constancensq"},"content":"     * @param task Task to be deleted."},{"lineNumber":90,"author":{"gitId":"constancensq"},"content":"     * @param numTasks Updated number of tasks."},{"lineNumber":91,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing the deleted task."},{"lineNumber":92,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"constancensq"},"content":"    public String showDeleted(Task task, int numTasks) {"},{"lineNumber":94,"author":{"gitId":"constancensq"},"content":"        String result \u003d \"No problem. I\u0027ve removed this task:\\n    \" + task"},{"lineNumber":95,"author":{"gitId":"constancensq"},"content":"                + \"\\n Now you have \" + numTasks + \" task(s) in the list.\";"},{"lineNumber":96,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":97,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":100,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"constancensq"},"content":"     * Shows the task that is marked as done."},{"lineNumber":102,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"constancensq"},"content":"     * @param task Task that is marked as done."},{"lineNumber":104,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing the task that is marked done."},{"lineNumber":105,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"constancensq"},"content":"    public String showMarkedDone(Task task) {"},{"lineNumber":107,"author":{"gitId":"constancensq"},"content":"        String result \u003d \"Ok! I\u0027ve marked this task as done:\\n    \" + task;"},{"lineNumber":108,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":109,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":110,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":112,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"constancensq"},"content":"     * Shows the error that has occurred."},{"lineNumber":114,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"constancensq"},"content":"     * @param msg Error message."},{"lineNumber":116,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing the error message."},{"lineNumber":117,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"constancensq"},"content":"    public String showError(String msg) {"},{"lineNumber":119,"author":{"gitId":"constancensq"},"content":"        String result \u003d msg;"},{"lineNumber":120,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":121,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":122,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":124,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"constancensq"},"content":"     * Shows a message to indicate there are no tasks currently."},{"lineNumber":126,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing that there are no tasks."},{"lineNumber":127,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"constancensq"},"content":"    public String showEmptyTaskList() {"},{"lineNumber":129,"author":{"gitId":"constancensq"},"content":"        System.out.println(EMPTY_TASK_LIST_MESSAGE);"},{"lineNumber":130,"author":{"gitId":"constancensq"},"content":"        return EMPTY_TASK_LIST_MESSAGE;"},{"lineNumber":131,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":133,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"constancensq"},"content":"     * Shows all tasks in the task list."},{"lineNumber":135,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"constancensq"},"content":"     * @param tasksList Task list of all tasks."},{"lineNumber":137,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing tasks in the list in order."},{"lineNumber":138,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"constancensq"},"content":"    public String showTaskList(String tasksList) {"},{"lineNumber":140,"author":{"gitId":"constancensq"},"content":"        String result \u003d \"Task(s) in your list:\" + tasksList;"},{"lineNumber":141,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":142,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":143,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":145,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"constancensq"},"content":"     * Shows message to indicate there are no matching tasks to keyword provided."},{"lineNumber":147,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"constancensq"},"content":"    public String showEmptyMatchingList() {"},{"lineNumber":149,"author":{"gitId":"constancensq"},"content":"        System.out.println(NO_MATCHING_TASK_MESSAGE);"},{"lineNumber":150,"author":{"gitId":"constancensq"},"content":"        return NO_MATCHING_TASK_MESSAGE;"},{"lineNumber":151,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":153,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"constancensq"},"content":"     * Shows matching tasks to the keyword provided."},{"lineNumber":155,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"constancensq"},"content":"     * @param matchingTaskList String of all matching tasks enumerated."},{"lineNumber":157,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing matching tasks numbered in order."},{"lineNumber":158,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"constancensq"},"content":"    public String showMatchingTaskList(String matchingTaskList) {"},{"lineNumber":160,"author":{"gitId":"constancensq"},"content":"        String result \u003d \"Found some matching tasks:\" + matchingTaskList;"},{"lineNumber":161,"author":{"gitId":"constancensq"},"content":"        System.out.println(result);"},{"lineNumber":162,"author":{"gitId":"constancensq"},"content":"        return result;"},{"lineNumber":163,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":165,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"constancensq"},"content":"     * Shows description of all commands."},{"lineNumber":167,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing list of commands."},{"lineNumber":169,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"constancensq"},"content":"    public String showHelp() {"},{"lineNumber":171,"author":{"gitId":"constancensq"},"content":"        System.out.println(HELP_MESSAGE);"},{"lineNumber":172,"author":{"gitId":"constancensq"},"content":"        return HELP_MESSAGE;"},{"lineNumber":173,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":175,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"constancensq"},"content":"     * Shows tasks that are upcoming in a week, or message to indicate if there are no upcoming tasks."},{"lineNumber":177,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"constancensq"},"content":"     * @param upcomingTasks The tasks that are upcoming, enumerated."},{"lineNumber":179,"author":{"gitId":"constancensq"},"content":"     * @return A string message showing upcoming tasks."},{"lineNumber":180,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"constancensq"},"content":"    public String showUpcomingTasks(String upcomingTasks) {"},{"lineNumber":182,"author":{"gitId":"constancensq"},"content":"        if (upcomingTasks.isEmpty()) {"},{"lineNumber":183,"author":{"gitId":"constancensq"},"content":"            return \"There are no upcoming tasks! Type \u0027list\u0027 to see all tasks.\";"},{"lineNumber":184,"author":{"gitId":"constancensq"},"content":"        } else {"},{"lineNumber":185,"author":{"gitId":"constancensq"},"content":"            return \"Here are the upcoming tasks (in a week)!\" + upcomingTasks;"},{"lineNumber":186,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":189,"author":{"gitId":"constancensq"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"constancensq"},"content":"     * Reads input from user."},{"lineNumber":191,"author":{"gitId":"constancensq"},"content":"     *"},{"lineNumber":192,"author":{"gitId":"constancensq"},"content":"     * @return Input of the user."},{"lineNumber":193,"author":{"gitId":"constancensq"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"constancensq"},"content":"    public String readCommand() {"},{"lineNumber":195,"author":{"gitId":"constancensq"},"content":"        return sc.nextLine();"},{"lineNumber":196,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":197}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"\u003cfx:root spacing\u003d\"10\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight \u003d \"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"  \u003c/children\u003e"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"  \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"  \u003c/padding\u003e"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"constancensq":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"            fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"  \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"324.0\""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"76.0\" AnchorPane.leftAnchor\u003d\"0.0\"/\u003e"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"            prefHeight\u003d\"35.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\""},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    style\u003d\"-fx-background-color: aliceblue\"/\u003e"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"35.0\" AnchorPane.rightAnchor\u003d\"1.0\""},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"                AnchorPane.topAnchor\u003d\"0.0\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"      \u003ccontent\u003e"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"      \u003c/content\u003e"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"  \u003c/children\u003e"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"constancensq":25}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    private LocalDateTime atLocalDate \u003d LocalDateTime.parse(\"2020-12-12 12:30\", formatter);"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    public void markAsDone_success() {"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"        Deadline task \u003d new Deadline(\"proj meeting\", atLocalDate);"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2718\", task.getStatusIcon());"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2713\", task.getStatusIcon());"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    public void toString_success() {"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"        Deadline task \u003d new Deadline(\"proj meeting\", atLocalDate);"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[D][\" + \"\\u2718\" + \"] \" + \"proj meeting (by: Dec 12 2020 12:30 PM)\", task.toString());"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        Deadline doneTask \u003d new Deadline(\"proj meeting\", atLocalDate, true);"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[D][\" + \"\\u2713\" + \"] \" + \"proj meeting (by: Dec 12 2020 12:30 PM)\", doneTask.toString());"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    public void toTxtFileformat_success() {"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        Deadline task \u003d new Deadline(\"proj meeting\", atLocalDate);"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"D | 0 | proj meeting | 2020-12-12 12:30\", task.toTxtFileFormat());"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        Deadline doneTask \u003d new Deadline(\"proj meeting\", atLocalDate, true);"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"D | 1 | proj meeting | 2020-12-12 12:30\", doneTask.toTxtFileFormat());"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":39}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Event;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"public class EventTest {"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"    public void markAsDone_success() {"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"        LocalDateTime byLocalDate \u003d LocalDateTime.parse(\"2020-12-12 12:30\", formatter);"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"        Event task \u003d new Event(\"proj meeting\", byLocalDate);"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2718\", task.getStatusIcon());"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2713\", task.getStatusIcon());"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    public void toString_success() {"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"        LocalDateTime byLocalDate \u003d LocalDateTime.parse(\"2020-12-12 12:30\", formatter);"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"        Event task \u003d new Event(\"proj meeting\", byLocalDate);"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[E][\" + \"\\u2718\" + \"] \" + \"proj meeting (at: Dec 12 2020 12:30 PM)\", task.toString());"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"        Event doneTask \u003d new Event(\"proj meeting\", byLocalDate, true);"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[E][\" + \"\\u2713\" + \"] \" + \"proj meeting (at: Dec 12 2020 12:30 PM)\", doneTask.toString());"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"    public void toTxtFileformat_success() {"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":"        LocalDateTime byLocalDate \u003d LocalDateTime.parse(\"2020-12-12 12:30\", formatter);"},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"        Event task \u003d new Event(\"proj meeting\", byLocalDate);"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"E | 0 | proj meeting | 2020-12-12 12:30\", task.toTxtFileFormat());"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"        Event doneTask \u003d new Event(\"proj meeting\", byLocalDate, true);"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"E | 1 | proj meeting | 2020-12-12 12:30\", doneTask.toTxtFileFormat());"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":43}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.AddCommand;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"import duke.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"import duke.logic.parser.Parser;"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"public class ParserTest {"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    public void isInteger_stringInteger_success() {"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.isInteger(\"2\"));"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"    public void isValidFormat_stringInputDate_valid() {"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.isValidFormat(\"2020-10-10 12:30\"));"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    public void isValidFormat_stringInputDate_invalid() {"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        assertEquals(false, Parser.isValidFormat(\"10th august\"));"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    public void parse_oneWordCommand_success() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"list\") instanceof ListCommand);"},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":35,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":37,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"constancensq"},"content":"    public void parse_doneCommand_success() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":40,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"done 3\") instanceof DoneCommand);"},{"lineNumber":41,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":43,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"constancensq"},"content":"    public void parse_invalidDoneCommand_exceptionThrown() {"},{"lineNumber":45,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"constancensq"},"content":"            assertEquals(true, Parser.parse(\"done 0\") instanceof DoneCommand);"},{"lineNumber":47,"author":{"gitId":"constancensq"},"content":"        } catch (DukeException e) {"},{"lineNumber":48,"author":{"gitId":"constancensq"},"content":"            assertEquals(\"Please enter a valid task number.\", e.getMessage());"},{"lineNumber":49,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":52,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"constancensq"},"content":"    public void parse_deleteCommand_success() throws DukeException {"},{"lineNumber":54,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":55,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"delete 3\") instanceof DeleteCommand);"},{"lineNumber":56,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":58,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"constancensq"},"content":"    public void parse_addCommand_success() throws DukeException {"},{"lineNumber":60,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"todo study\") instanceof AddCommand);"},{"lineNumber":61,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"deadline work /by 2020-12-12 12:30\") instanceof AddCommand);"},{"lineNumber":62,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, Parser.parse(\"event proj /at 2020-12-12 12:30\") instanceof AddCommand);"},{"lineNumber":63,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":65,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"constancensq"},"content":"    public void parse_invalidCommands_exceptionThrown() {"},{"lineNumber":67,"author":{"gitId":"constancensq"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"constancensq"},"content":"            assertEquals(true, Parser.parse(\"abcd\") instanceof Command);"},{"lineNumber":69,"author":{"gitId":"constancensq"},"content":"        } catch (DukeException e) {"},{"lineNumber":70,"author":{"gitId":"constancensq"},"content":"            assertEquals(\"Oh no, didn\u0027t get that :( \""},{"lineNumber":71,"author":{"gitId":"constancensq"},"content":"                    + \"Try again or press \u0027help\u0027 to find out more!\", e.getMessage());"},{"lineNumber":72,"author":{"gitId":"constancensq"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":74}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"import duke.storage.TaskList;"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"import duke.tasks.Task;"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"import duke.tasks.ToDo;"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"public class TaskListTest {"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"    public void doneTask_intTaskNumber_success() {"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"        List\u003cTask\u003e tmp \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"        ToDo task \u003d new ToDo(\"testing\");"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"        tmp.add(task);"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        TaskList tasks \u003d new TaskList(tmp);"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        assertEquals(false, tasks.getTask(1).getIsDone());"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        tasks.doneTask(1);"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"        assertEquals(true, tasks.getTask(1).getIsDone());"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":25}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"import duke.tasks.ToDo;"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"    public void markAsDone_success() {"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"        ToDo task \u003d new ToDo(\"testing\");"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2718\", task.getStatusIcon());"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"\\u2713\", task.getStatusIcon());"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"    public void toString_success() {"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"        ToDo task \u003d new ToDo(\"study at home\");"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[T][\" + \"\\u2718\" + \"] \" + \"study at home\", task.toString());"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"        ToDo doneTask \u003d new ToDo(\"study at home\", true);"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"[T][\" + \"\\u2713\" + \"] \" + \"study at home\", doneTask.toString());"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"    public void toTxtFileformat_success() {"},{"lineNumber":27,"author":{"gitId":"constancensq"},"content":"        ToDo task \u003d new ToDo(\"study at home\");"},{"lineNumber":28,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"T | 0 | study at home\", task.toTxtFileFormat());"},{"lineNumber":29,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":30,"author":{"gitId":"constancensq"},"content":"        ToDo doneTask \u003d new ToDo(\"study at home\", true);"},{"lineNumber":31,"author":{"gitId":"constancensq"},"content":"        assertEquals(\"T | 1 | study at home\", doneTask.toTxtFileFormat());"},{"lineNumber":32,"author":{"gitId":"constancensq"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":34,"author":{"gitId":"constancensq"},"content":"}"}],"authorContributionMap":{"constancensq":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"constancensq"},"content":"list"},{"lineNumber":2,"author":{"gitId":"constancensq"},"content":"done 0"},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"read book"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"constancensq"},"content":"deadline"},{"lineNumber":6,"author":{"gitId":"constancensq"},"content":"event"},{"lineNumber":7,"author":{"gitId":"constancensq"},"content":"deadline /by"},{"lineNumber":8,"author":{"gitId":"constancensq"},"content":"deadline /by when"},{"lineNumber":9,"author":{"gitId":"constancensq"},"content":"deadline return book"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"event /at"},{"lineNumber":11,"author":{"gitId":"constancensq"},"content":"event /at when"},{"lineNumber":12,"author":{"gitId":"constancensq"},"content":"event book launch"},{"lineNumber":13,"author":{"gitId":"constancensq"},"content":"list all"},{"lineNumber":14,"author":{"gitId":"constancensq"},"content":"todo borrow english book"},{"lineNumber":15,"author":{"gitId":"constancensq"},"content":"todo read book"},{"lineNumber":16,"author":{"gitId":"constancensq"},"content":"deadline return book /by Sunday 10pm"},{"lineNumber":17,"author":{"gitId":"constancensq"},"content":"event book launch /at Monday 2-4pm"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"list"},{"lineNumber":19,"author":{"gitId":"constancensq"},"content":"done 1"},{"lineNumber":20,"author":{"gitId":"constancensq"},"content":"done 2"},{"lineNumber":21,"author":{"gitId":"constancensq"},"content":"done 5"},{"lineNumber":22,"author":{"gitId":"constancensq"},"content":"delete 1"},{"lineNumber":23,"author":{"gitId":"constancensq"},"content":"delete 2"},{"lineNumber":24,"author":{"gitId":"constancensq"},"content":"delete 0"},{"lineNumber":25,"author":{"gitId":"constancensq"},"content":"list"},{"lineNumber":26,"author":{"gitId":"constancensq"},"content":"bye"}],"authorContributionMap":{"constancensq":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"constancensq"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"constancensq":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"constancensq"},"content":"export LC_ALL\u003den_GB.UTF-8"},{"lineNumber":4,"author":{"gitId":"constancensq"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"then"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":9,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":12,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":15,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":18,"author":{"gitId":"constancensq"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"constancensq":3}}]
