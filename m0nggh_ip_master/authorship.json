[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "D | ✗ | do work | 2011-01-02T12:30"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "D | ✓ | do work | 2011-12-12T03:30"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "T | ✗ | life"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "E | ✗ | meeting | 2011-12-30T14:00"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 4
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, UNIDENTIFIED;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Deadline(String details, String by) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(by);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            by \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String line \u003d \"----------------------\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    // for the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(); // not a fixed size anymore"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static boolean dukeOn \u003d true; // flag to indicate duke is ready to receive any query"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final DukeStorage storage \u003d new DukeStorage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        greet(logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // try to open the duke file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.reloadStorage(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Duke data do not exist!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Its a duke exception!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (dukeOn) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String[] splittedWords \u003d input.split(\"\\\\s\", 2); // splits string based on whitespace"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String command \u003d splittedWords[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String afterCommand \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (splittedWords.length \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                afterCommand \u003d splittedWords[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                askDuke(command, afterCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                format(ex.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    // main driver function for duke to tackle commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void askDuke(String command, String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Command commandType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d Command.valueOf(command.toUpperCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d Command.UNIDENTIFIED;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // handle all different commands using switch and enum instead; organised the methods"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // to make the code look neater"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                displayList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                recordDoneTask(afterCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                recordToDoTask(afterCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                recordDeadlineTask(afterCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                recordEventTask(afterCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                deleteTask(afterCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            case UNIDENTIFIED:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                // if a bad command is thrown at Duke"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                throw new DukeException(\"Please key in a command I understand!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void greet(String logo) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "       format(\"Hello! I\u0027m\\n\" + logo + \"\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void format(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        System.out.println(line + \"\\n\" + input + \"\\n\" + line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void exit() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        dukeOn \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.saveStorage(tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error in saving!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void addOnToList(Task task) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Got it. I\u0027ve added this task:\\n\" + task +  \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void displayList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(\"No tasks!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            format(sb.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(i + 1 + \".\" + tasks.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(sb.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void recordDoneTask(String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d tasks.size() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid task no!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.get(taskNo).markAsCompleted();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        displayCompletedTask(tasks.get(taskNo));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void displayCompletedTask(Task task) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void recordToDoTask(String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please do not leave the todo description empty!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        addOnToList(new ToDo(afterCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void recordDeadlineTask(String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please do not leave the deadline description empty!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the deadline details, second chunk is by when"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedDeadline \u003d afterCommand.split(\"/\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Format of deadline recording: deadline keyword\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \", deadline instructions, forward slash, by keyword with a colon, specific date/time)\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. deadline return book /by Sunday\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedDeadline[0].trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String by \u003d splittedDeadline[1].split(\"by\", 2)[1];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        addOnToList(new Deadline(details, by));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void recordEventTask(String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please do not leave the event description empty!\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the event details, second chunk is at where"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedEvent \u003d afterCommand.split((\"/\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Format of event recording: event keyword\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \", event instructions, forward slash, at keyword with a colon, start/end time)\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. project meeting /at Mon 2-4pm\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedEvent[0].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String at \u003d splittedEvent[1].split(\"at\", 2)[1];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        addOnToList(new Event(details, at));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void deleteTask(String afterCommand) throws DukeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d tasks.size() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid task no!\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        displayDeletedTask(taskNo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static void displayDeletedTask(int index) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        format(\"Noted. I\u0027ve removed this task:\\n\" + tasks.get(index) + \"\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 198,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 5
    }
  },
  {
    "path": "src/main/java/DukeInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeInterpreter {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeInterpreter(String code) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static String encode(Task task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char type \u003d taskString.charAt(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char symbol \u003d taskString.charAt(4);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] rest \u003d taskString.substring(7).split(\"\\\\(\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d rest[0].trim();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extra \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (rest.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extra \u003d deadline.getDateTime().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extra \u003d event.getDateTime().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return encodeHelper(type, symbol, details, extra);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static String encodeHelper(char type, char symbol, String details, String extra) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return type + \" | \" + symbol + \" | \" + details +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            (extra.equals(\"\") ? \"\" : \" | \" + extra);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static Task decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char taskType \u003d code.charAt(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedWords \u003d code.split(\"\\\\|\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d splittedWords[1].trim().equals(\"✓\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedWords[2].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extra \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // since the tostring has a \u0027T\u0027 char inside"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String dateTime \u003d splittedWords[3].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String date \u003d dateTime.substring(0, 10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String time \u003d dateTime.substring(11, 16);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            extra \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeToDo(details, isCompleted);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeDeadline(details, isCompleted, extra);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeEvent(details, isCompleted, extra);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static ToDo decodeToDo(String details, boolean isCompleted) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ToDo toDo \u003d new ToDo(details);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            toDo.markAsCompleted();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Deadline decodeDeadline(String details, boolean isCompleted, String extra) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Deadline deadline \u003d new Deadline(details, extra);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            deadline.markAsCompleted();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Event decodeEvent(String details, boolean isCompleted, String extra) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Event event \u003d new Event(details, extra);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            event.markAsCompleted();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 80
    }
  },
  {
    "path": "src/main/java/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeStorage(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        createStorage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void createStorage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "//            new File(\"data\").mkdirs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage is ready to use :-)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage already exists, good to go!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void reloadStorage(List\u003cTask\u003e tasks) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // decode and add the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            tasks.add(DukeInterpreter.decode(line));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void saveStorage(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            writer.write(DukeInterpreter.encode(task) + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 49
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Event(String details, String at) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(at);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            at \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task(String details) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[\" + (isCompleted ? \"✓\" : \"✗\") + \"] \" + details;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 17
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public ToDo(String details) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline do project /by Thursday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline watch lecture /by Friday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event hangout with friends /at Sun 1-6pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event watch drama /at Sun 7-9pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 1,
      "-": 20
    }
  }
]
