[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents the chatbot Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String basePath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Path path \u003d Paths.get(basePath, \"data\", \"tasks.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage \u003d Storage.setup(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        tasks \u003d storage.readData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Exits the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    void exit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Runs the program, which takes in and executes user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * and exits if the user inputs the exit command or some invalid command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayWelcome();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            boolean isExit \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String userInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                Command c \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                c.execute(tasks, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Runs Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 65,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.CommandKey;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeDateTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeNoDescriptionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeNoItemToDeleteException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeNoItemToMarkDoneException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeNoKeywordException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeTooManyKeywordsException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a parser for parsing user inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate parseDate(String inputDate) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeDateTimeException(inputDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime parseTime(String inputTime) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeDateTimeException(inputTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Parses and validates user input before returning a command to be executed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String[] processedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String key \u003d processedInput[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (CommandKey.equalsCommandKey(input, CommandKey.EXIT)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(input, CommandKey.LIST)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(processedInput[0], CommandKey.DELETE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoItemToDeleteException(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(processedInput[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(processedInput[0], CommandKey.DONE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoItemToMarkDoneException(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new DoneCommand(Integer.parseInt(processedInput[1]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(processedInput[0], CommandKey.FIND)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoKeywordException(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003e 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeTooManyKeywordsException(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new FindCommand(processedInput[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.TODO)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String taskDescription \u003d input.substring(5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new AddCommand(key, taskDescription);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.DEADLINE)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] taskDetails \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String task \u003d taskDetails[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] by \u003d taskDetails[1].split(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalDate date \u003d parseDate(by[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalTime time \u003d parseTime(by[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return new AddCommand(key, task, date, time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            } catch (DukeDateTimeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.EVENT)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] taskDetails \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String task \u003d taskDetails[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] by \u003d taskDetails[1].split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalDate date \u003d parseDate(by[0]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalTime time \u003d parseTime(by[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return new AddCommand(key, task, date, time);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            } catch (DukeDateTimeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeUnknownCommandException(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 116
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents the storage for the user\u0027s tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Path storagePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Storage(Path storagePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.storagePath \u003d storagePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void deleteStorage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Files.deleteIfExists(storagePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void createStorage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (!Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                Files.createFile(storagePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException | SecurityException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void writeData(TaskList tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] data \u003d new String[tasks.size()];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                data[i - 1] \u003d tasks.get(i).toDataString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    new FileWriter(storagePath.toString(), true));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                for (int i \u003d 0; i \u003c data.length; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    writer.append(data[i]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    writer.newLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Reads the data from the storage file and returns a TaskList of the user\u0027s"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * stored tasks. Returns an empty list if there are no stored tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return List of cached tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public TaskList readData() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new FileReader(storagePath.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    String[] taskData \u003d line.split(\" // \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    if (taskData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(new ToDo(taskData[2], done));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    } else if (taskData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(Event.of(taskData[2], taskData[3], taskData[4], done));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    } else if (taskData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(Deadline.of(taskData[2], taskData[3], taskData[4], done));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    line \u003d reader.readLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (UnsupportedOperationException | IOException | SecurityException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Sets up the storage and creates the storage file at the path if the storage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * file does not exist."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param storagePath Path for the storage file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return A Storage instance."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Storage setup(Path storagePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Storage storage \u003d new Storage(storagePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage.createStorage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Updates the storage file by deleting the existing file, recreating the storage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * file and writing the updated tasks into the new storage file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of updated tasks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void update(TaskList tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        deleteStorage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        createStorage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        writeData(tasks);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 132
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents an add task command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /** key decides the type of task to create */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates an AddCommand instance with no date/time for todos."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param key Todo command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param taskDescription Task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public AddCommand(String key, String taskDescription) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates an AddCommand instance with date and time for events and deadlines."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param key Deadline or event command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param taskDescription Task description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param date Date of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param time Time of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public AddCommand(String key, String taskDescription, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates a Task instance with the task details and adds it to the user\u0027s task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (CommandKey.equalsCommandKey(key, CommandKey.TODO)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.DEADLINE)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new Deadline(taskDescription, date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new Event(taskDescription, date, time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to continue running."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 84
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * An interface for executable user commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    void execute(TaskList tasks, Ui ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns whether to exit Duke or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return true if exit command, false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 25
    }
  },
  {
    "path": "src/main/java/duke/command/CommandKey.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents the list of supported command keywords."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public enum CommandKey {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    EXIT(\"bye\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    CommandKey(String key) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    String getKey() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Checks if the user\u0027s command is valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param userCommand User\u0027s command keyword (first word in the user\u0027s input)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param key Supported command key."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Whether user\u0027s command keyword is supported."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static boolean equalsCommandKey(String userCommand, CommandKey key) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return key.getKey().equals(userCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a delete task command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Checks if the index given to the command is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws DukeOutOfBoundsException If index is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void checkIndex(TaskList tasks) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (index \u003c 1 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeOutOfBoundsException(CommandKey.DELETE.getKey() + \" \" + index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Deletes the task from the user\u0027s task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            checkIndex(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task removedTask \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayDeletedTaskMessage(removedTask, tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to continue running."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 58
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Checks if the index given to the command is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @throws DukeOutOfBoundsException If index is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void checkIndex(TaskList tasks) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (index \u003c 1 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeOutOfBoundsException(CommandKey.DONE.getKey() + \" \" + index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Marks the specified task in the user\u0027s task list as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            checkIndex(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayDoneMessage(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to continue running."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints a goodbye message to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.displayGoodbye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to exit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 31
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a find command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Finds matching tasks by keyword and prints them out in a list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI for the Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList matchingTasks \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.displayMatchingTaskList(matchingTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to keep on keeping on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out the list of the user\u0027s tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of user\u0027s tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param ui UI of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.displayTaskList(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Tells Duke to continue running."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 31
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling invalid date/time inputs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeDateTimeException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t recognise the date/time -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception class for Duke to handle Duke-only errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeException(String input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what went wrong, but Duke knows something went wrong -\u003e \" + input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling add commands with no task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeNoDescriptionException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t find your task details -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoItemToDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling delete commands with no specified index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoItemToDeleteException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeNoItemToDeleteException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what to delete -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoItemToMarkDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling done commands with no specified index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoItemToMarkDoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeNoItemToMarkDoneException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what to mark as done -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling find commands with no keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoKeywordException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeNoKeywordException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message with the input that causes the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what to find! -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling done or delete commands with an invalid index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeOutOfBoundsException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t find the task in the list -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTooManyKeywordsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling find commands with too many keywords."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeTooManyKeywordsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeTooManyKeywordsException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message with the input that causes the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can only handle so many keyword(s)! -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Exception for handling unsupported commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public DukeUnknownCommandException(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the error message containing the user input which caused the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t recognise your command -\u003e \" + input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates a Deadline instance with task description, date and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param date Date of deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param time Time of deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Deadline(String task, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a Deadline with the appropriate details. Should only be used when reading from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * the storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param inputDate String representing the date in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param inputTime String representing the time in the format HH:MM"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param done Status of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return A Deadline instance representing the deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Deadline of(String task, String inputDate, String inputTime, boolean done) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Deadline deadline \u003d new Deadline(task, date, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                deadline.setDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the deadline to be stored in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * storage file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Formatted String representing the deadline."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"D // \" + (done ? \"1\" : \"0\") + \" // \" + task + \" // \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" // \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + time.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the deadline for display. The date and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * time substring is in the format Mmm DD, YYYY H:MM AM/PM."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String representation of the deadline."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + this.date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \" \" + this.time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates an Event instance with task description, date and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param date Date of event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param time Time of event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Event(String task, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns an Event with the appropriate details. Should only be used when reading from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * the storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param inputDate String representing the date in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param inputTime String representing the time in the format HH:MM(:SS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param done Status of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return A Deadline instance representing the deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Event of(String task, String inputDate, String inputTime, boolean done) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Event event \u003d new Event(task, date, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                event.setDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the event to be stored in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * storage file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Formatted String representing the deadline."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"E // \" + (done ? \"1\" : \"0\") + \" // \" + task + \" // \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" // \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + time.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the event for display. The date and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * time substring is in the format Mmm DD, YYYY (H)H:MM AM/PM."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String representation of the event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + this.date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \" \" + this.time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a user task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Task(String task, boolean done) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the task to be stored in the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Formatted String representing the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public abstract String toDataString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Sets the task as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the task status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return A tick if done, a cross otherwise."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String getStatusToString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return done ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the task for display."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String representation of the task for display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[\" + getStatusToString() + \"] \" + task;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 62
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the collection that holds the tasks. Should only be used to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * iterate over the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Collection of Tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Deletes a task from the list by index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param index Index of the task to delete."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Number of elements of the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Gets the task by index from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param index Index of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return The specified task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Finds matching tasks by keyword and adds them to another TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param keyword Keyword used to search tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return TaskList of matching tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (task.getTaskDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 79
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ToDo(String task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ToDo(String task, boolean done) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task, done);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the task to be stored in the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * storage file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return Formatted String representing the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"T // \" + (done ? \"1\" : \"0\") + \" // \" + task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Returns a String representation of the todo for display."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String representation of the todo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " * Encapsulates the user interface for Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String ADD_TASK_LINE \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String DONE_TASK_LINE \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String LIST_TASK_LINE \u003d \"________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String BYE_LINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Creates a Duke UI instance and starts the scanner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out the welcome message for the user when Duke is booted up."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayWelcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(\"Hello my name\\n\" + logo + \"\\nHow may I help?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out the list of the user\u0027s tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks TaskList of user\u0027s tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + (list.indexOf(task) + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + \"None\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints the list of matching tasks according to find keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param tasks List of matching tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayMatchingTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"Duke has found these tasks in your list:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + (list.indexOf(task) + 1) + \".\" + task.toString()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + \"None\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out a message to confirm that the user has marked a task as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task marked as done by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayDoneMessage(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + DONE_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"The following task has been marked as done:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + task.toString()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"\\n\" + INDENT + DONE_TASK_LINE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out a message to confirm that the user has deleted a task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task deleted by user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param taskCount Updated number of tasks in the user\u0027s task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayDeletedTaskMessage(Task task, int taskCount) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + DONE_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"The following task has been removed:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + INDENT + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"You now have \" + taskCount + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + DONE_TASK_LINE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out a message to confirm that the user has added a task to the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param task Task added by user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param taskCount Updated number of tasks in the user\u0027s task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayAddTaskSuccess(Task task, int taskCount) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + ADD_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"Added task:\" + \"\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + INDENT + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"You now have \" + taskCount + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + ADD_TASK_LINE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out an error message when an Duke encounters an error."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @param errorMessage Error message."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayError(String errorMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + errorMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Prints out a goodbye message when the user exits Duke."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayGoodbye() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + BYE_LINE + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"Goodbye\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + BYE_LINE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Reads user input and returns a String representing the input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * @return String of user input"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     * Closes the scanner when the user exits Duke."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 159
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_noParameterForTask_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"todo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke can\u0027t find your task details -\u003e \" + testInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_noParameterForDone_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke doesn\u0027t know what to mark as done -\u003e \" + testInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_noParameterForDelete_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"delete\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke doesn\u0027t know what to delete -\u003e \" + testInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"i want to delete 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke can\u0027t recognise your command -\u003e \" + testInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_invalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String invalidDate \u003d \"2020-13-22\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"event some event /at \" + invalidDate + \" 23:59\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke doesn\u0027t recognise the date/time -\u003e \" + invalidDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_invalidTime_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String invalidTime \u003d \"01:61\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"event some event /at 2020-12-12 \" + invalidTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke doesn\u0027t recognise the date/time -\u003e \" + invalidTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_tooManyFindKeywords_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"find an event\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke can only handle so many keyword(s)! -\u003e \" + testInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void parse_noFindKeywords_exceptionThrown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String testInput \u003d \"find\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Parser testUnit \u003d new Parser();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            testUnit.parse(testInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            assertEquals(e.toString(), \"ERROR: Duke doesn\u0027t know what to find! -\u003e \" + testInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 99
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void of_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String task \u003d \"homework\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String date \u003d \"2020-02-02\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String time \u003d \"23:59\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        boolean done \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Deadline testUnit \u003d Deadline.of(task, date, time, done);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.toString(), \"[D][✓] homework (by: Feb 2, 2020 11:59 PM)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 17
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void of_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String task \u003d \"party\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String date \u003d \"2020-02-02\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String time \u003d \"20:20\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        boolean done \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Event testUnit \u003d Event.of(task, date, time, done);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.toString(), \"[E][✘] party (at: Feb 2, 2020 8:20 PM)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 17
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void add_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Task testTask \u003d new ToDo(\"this\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList testUnit \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        testUnit.add(testTask);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.getList().get(0).toString(), \"[T][✘] this\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void delete_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Task testTask \u003d new ToDo(\"this\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList testUnit \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        testUnit.add(testTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        testUnit.delete(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.getList().size(), 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void size_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList testUnit \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.size(), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void get_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Task testTask \u003d new ToDo(\"this\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList testUnit \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        testUnit.add(testTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        assertEquals(testUnit.get(1).toString(), \"[T][✘] this\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "todo a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "deadline b /by 2020-02-02 23:59"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "event c /at 2020-12-12 08:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "todo CS2030 homework"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "event home work /at 2020-02-20 09:00"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "deadline do all CS homework and projects /by 2020-03-22 12:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "find homework"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "del data\\tasks.txt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\ui\\Ui.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 3,
      "-": 19
    }
  }
]
