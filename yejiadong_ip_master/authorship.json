[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 17,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "﻿# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Duke Chatbot is a **desktop app for managing task schedules, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Quick Start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t* Adding a task : "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t\t* Todo : ``` todo```"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t\t* Deadline : ```deadline```"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t\t* Event : ```event```"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tViewing all tasks : ``` list```"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tMarking a task as done : ``` done```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tFinding a task by name : ``` find```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tViewing all tasks on a particular date : ```view```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tDeleting a task : ``` delete```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\t*\tExiting the program: ``` bye```"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "* Command Summary"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "1.  Ensure you have Java  `11`  or above installed in your Computer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "2.  Download the latest  `duke.jar`  from  [here](https://github.com/yejiadong/ip/releases)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "3.  Copy the file to the folder you want to use as the  _home folder_  for your Duke chatbot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "4.  Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note that the app does not contain any sample task data preloaded."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "![Image of Duke Chatbot](https://yejiadong.github.io/ip/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "5.  Type the command in the command box and press Enter to execute it. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    -   **`list`**  : Lists all tasks scheduled"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    -   **`todo`**`return National Library book`  : Adds a task with the description  `return National Library book`  to the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    -   **`delete`**`1`  : Deletes the 1st task shown in the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    -   **`done`**`1` : Marks the 1st task shown in the task list as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    -   **`bye`**  : Exits the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "6.  Refer to the  [Features](https://yejiadong.github.io/ip/#features)  below for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### **Notes about the command format:**  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Words in  `UPPER_CASE`  are the parameters to be supplied by the user.   "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "e.g. in  `todo DESCRIPTION`,  `DESCRIPTION`  is a parameter which can be used as  `todo return library book`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "- Items in square brackets are optional.  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "e.g  `deadline DESCRIPTION /by DATE [TIME]`  can be used as  `deadline return book /by 2022-08-26 1800`  or as  `deadline return book /by 2022-08-26`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Adding a task "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### `Todo`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Adds a **todo** task to the task list. A **todo** task contains a description only."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `todo Watch CS2103 Web Lecture`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `todo Meet Friend at JCube`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### `Deadline`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Adds a **deadline** task to the task list. A **deadline** task contains a description, a date to indicate the deadline and an optional [TIME] parameter."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE [TIME]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e**Note :** "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e - The delimiter /by must be indicated to separate the `DESCRIPTION` and `DATE`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e- The date specified must be set in the future and must follow the format **yyyy-mm-dd**."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " (i.e. 2021-08-26 to denote 26th August 2021)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e- Any time specified must be in the **HHmm** format. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " (i.e. 1800 to denote 6 p.m)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e- Ensure there is a space to separate all parameters."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `deadline Finish 2103 Quiz /by 2021-08-26 1800`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `deadline watch Tenet /by 2021-09-30`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "![Image of Duke Chatbot](https://yejiadong.github.io/ip/Deadline.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "### `Event`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Adds an **event** task to the task list. An **event** task contains a description, a date to indicate the event\u0027s date and an optional [TIME] parameter."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format: `event DESCRIPTION /at DATE [TIME]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e**Note :** "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e - The delimiter /at must be indicated to separate the `DESCRIPTION` and `DATE`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e - The date specified must be set in the future and must follow the format **yyyy-mm-dd**."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " (i.e. 2021-08-26 to denote 26th August 2021)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e - Any time specified must be in the **HHmm** format. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " (i.e. 1800 to denote 6 p.m)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " \u003e- Ensure there is a space to separate all parameters."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `event Go for Yiruma\u0027s Concert /at 2026-08-25`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `event Go for Tom\u0027s Birthday Party /at 2024-07-28 2000`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Viewing all tasks : `list`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Shows a list of all tasks in the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  `list`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "![Image of List Command](https://raw.githubusercontent.com/yejiadong/ip/master/docs/List.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Marking a task as done : `done`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Mark a task as having been done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  **`done`**`TASK_INDEX`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Marks the task at the specified  `TASK_INDEX` as done."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The index refers to the index number shown in the displayed task list using `list`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The index  **must be a positive integer**  1, 2, 3, …​"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Take note that the task index must reference a task that exists inside the task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "![Image of Done Command](https://yejiadong.github.io/ip/Done.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Finding a task by name : `find`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Finds tasks with descriptions which contain the given keyword(s)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The search is case-sensitive. e.g  `library`  will match  `library` and not `Library`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The order of the keywords matters. e.g.  `birthday party`  will not match  `party birthday`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Only the description is searched."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Partial words will also be matched e.g.  `book`  will match  `books`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Only tasks matching all keywords specified will be returned "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "e.g.  `return book`  will not match with  `return pen`,   `return` or `book`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003eAssuming task list contains the following tasks:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 1) todo return library book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 2) todo borrow library book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 3) deadline visit Charlie /by 2025-08-26"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `find library book`  returns  tasks **1 and 2**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `find charlie`  returns  no tasks"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "![Image of Find Command](https://yejiadong.github.io/ip/Find.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Viewing all tasks on a particular date : `view`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Finds tasks with dates which match the specified date."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  `view DATE`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The date specified must follow the format **yyyy-mm-dd**."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " (i.e. 2021-08-26 to denote 26th August 2021)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Only the date is searched."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Only one date should be specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003eAssuming task list contains the following tasks:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 1) deadline return library book /by 2021-08-26 1800"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 2) event go for graduation ceremony /at 2021-08-26 "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e 3) deadline visit Charlie /by 2025-08-26"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `find 2021-08-26`  returns  tasks **1 and 2**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   `find 2025-08-26`  returns  task **3**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Deleting a task : `delete`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Deletes the specified task from the task list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  **`delete`**`TASK_INDEX`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   Deletes the task at the specified  `TASK_INDEX`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The index refers to the index number shown in the displayed task list using `list`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-   The index  **must be a positive integer**  1, 2, 3, …​"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003e Take note that the task index must reference a task that exists inside the task list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "## Exiting the program: `bye`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Format:  `bye`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "# Command summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "Action | Example"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "-------- | -----"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "todo | `todo DESCRIPTION` e.g. `todo Watch CS2103 Web Lecture`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "deadline | `deadline DESCRIPTION /by DATE [TIME]` e.g.`deadline Finish 2103 Quiz /by 2021-08-26 1800`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "event | `event DESCRIPTION /at DATE [TIME]` e.g. `event Go for Yiruma\u0027s Concert /at 2026-08-25`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "list | `list`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "done | `done TASK_INDEX` e.g. `done 2`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "delete | `delete TASK_INDEX` e.g. `delete 2`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "find | `find KEYWORD [MORE_KEYWORDS]` e.g. `find library`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "view | `view DATE` e.g. `view 2021-08-26`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "bye | `bye`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yejiadong": 189,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Encapsulates the date and any optional time parameter for a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Optional\u003cLocalTime\u003e optionalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises with the date and any optional time parameter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param date Date to be stored."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param optionalTime Any time that is specified by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DateTime(LocalDate date, Optional\u003cLocalTime\u003e optionalTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.optionalTime \u003d optionalTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns if supplied date is the same day as the date stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param date Date to be checked for equality."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return True if both dates are referring to the same day."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean checkDateEqual(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return date.equals(this.date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Retrieves the formatted version of the date stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * For printing to file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Formatted date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getFileFormattedDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Retrieves the formatted version of the date and time stored."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * For printing to file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Formatted date and time or date only if no time exists."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getFileFormattedDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this.optionalTime.map(x -\u003e getFileFormattedDate() + \" | \" + x.format(DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \"HHmm\"))).orElse(getFileFormattedDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Retrieves the formatted version of the date stored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * For printing directly to the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Formatted date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getPrintFormattedDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Retrieves the formatted version of the time stored."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * For printing directly to the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Formatted time or empty string if no time exists."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getPrintFormattedTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return this.optionalTime.map(x -\u003e x.format(DateTimeFormatter.ofPattern(\"HHmma\"))).orElse(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 77
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.setPadding(new Insets(10, 0, 10, 0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.setSpacing(10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        final Circle clip \u003d new Circle(49, 48, 48);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Constructs the dialog box for Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param text The text that represents the string input to be displayed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param img The image that represents an icon."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return DialogBox for the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        var userDialog \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        userDialog.setBackground(new Background(new BackgroundFill(Color.WHITESMOKE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                Insets.EMPTY)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Constructs the dialog box for Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param text The text that represents the string input to be displayed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param img The image that represents an icon."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return DialogBox for Duke."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.NAVAJOWHITE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                Insets.EMPTY)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 91
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a functional chat-bot that helps to keep track of todo, deadline and event tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Handles all User Interaction elements of the chat-bot. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Handles any read/write requests. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Container for the storage of tasks. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Loads tasks into a task list from a local file that is read in based on an user-specified filepath."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param filePath The filepath to find the local file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            System.out.println(ui.showLoadingError() + e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Takes in user input, parses the input and executes the correct command to process the tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Exits only when an ExitCommand is generated based on user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        System.out.println(ui.showWelcome());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                Command c \u003d new Parser(fullCommand).parse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String returnString \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                if (returnString !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    System.out.println(returnString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                System.out.println(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        System.out.println(\"Goodbye! Hope you have a great one!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Takes in user input, parses the input and executes the correct command to process the tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Used for running the program GUI."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Exits only when an ExitCommand is generated based on user input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param input The user input in the form of a string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The response to the user based on the user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Command c \u003d new Parser(input).parse();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (!c.isExit()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return (ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"Thanks for using me! Goodbye!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Generate a response to user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The response to the user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new Duke(\"data/tasks.txt\").run(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 92,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an exception specific to the Duke chat-bot that is thrown with a corresponding message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the exception with a message to be associated with the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param errorMessage Message to be associated with the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * This is also usually printed out to the user when the exception is thrown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 17
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            ap.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 38
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises GUI with welcome message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(d.ui.showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 57
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.FileStringChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Deals with loading tasks from the local file and saving tasks in the local file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Filepath to access the local file to read/write from/to. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the storage object with the local filepath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param filePath Filepath that indicates where to access the local file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Loads command strings from the local file and decipher them to tasks that can be added to the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Task list with tasks loaded from the local file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If there are any issues with reading the commands from the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String[] splitLine \u003d line.split(\"\\\\s*\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                String checkedFileInput \u003d new FileStringChecker(splitLine).checkFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                boolean isDone \u003d splitLine[1].equals(\"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                AddCommand c \u003d new Parser(checkedFileInput).parseFromFile(isDone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                c.executeFromFile(newTaskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return newTaskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Sorry, there were some issues reading the file located at: \" + filePath"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Writes the specified task list to the local file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskList The task list to be written to file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If there are issues writing to the local file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void write(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            // Add directory if it does not exist"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            FileWriter fw;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                fw \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                fw \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            for (Task i : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                fw.write(i.appendFile() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Sorry, there were some issues writing to the file located at: \" + filePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 95
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Scanner to handle user input. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the scanner the take in user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Reads user inputs, a line at a time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String that is read from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints all of the matching tasks that are stored in the ArrayList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param foundTasks The ArrayList containing all of the matching tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String printMatches(ArrayList\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (foundTasks.size() \u003c 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return \" Sorry, no tasks were found!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String returnString \u003d \" Here are the matching tasks in your list: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (Task t: foundTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            returnString +\u003d \"\\n\\t \" + t.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String showTotalTasks(int total) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"\\n Now you have \" + total + \" tasks in the task list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints the default message after every successful addition of a task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskList Task list that stores all of the tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showTaskAdded(TaskList taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \" Got it. I\u0027ve added this task: \" + \"\\n\\t\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + taskList.getTask(taskList.totalTask() - 1).toString()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + showTotalTasks(taskList.totalTask());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints the default done message after every successful change in task done status."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param task Task that is marked done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showDone(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \" Nice! I\u0027ve marked this task as done: \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + \"\\n\\t\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + task.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints the default delete message after every successful deletion of a task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskList Task list that stores all of the tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param task Task that is deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showDelete(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \" Noted. I\u0027ve removed this task: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + \"\\n\\t\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + task.toString()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + showTotalTasks(taskList.totalTask());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints out all the tasks stored in the specified task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskList Task list that contains the tasks to be printed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String printList(TaskList taskList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String returnString \u003d \" Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.totalTask(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            returnString +\u003d \"\\n \" + (i + 1) + \". \" + taskList.getTask(i).toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return returnString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Displays any error message that is the result of an exception."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param errorMessage Error message that is displayed to the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showError(String errorMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"\\t \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + errorMessage;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Displays any error message that is the result of a file loading exception."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \" Something wrong with loading from your file.. Proceeding to create new empty TaskList: \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Displays the welcome message of the Duke chat-bot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out to welcome the user."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String logo \u003d \"___          __        \\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \"| __\\\\___ __| | _____ \\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \"| | | | | | | |/ \\uD83D\\uDD34 \\uD83D\\uDD34 \\\\\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  \\\\__/\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \"|____/\\\\__,|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"Hello! I\u0027m\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + logo + \"\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 142
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.DateTimeStringChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.TaskNameStringChecker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an add command. An AddCommand object represents a command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * to insert a task into a TaskList. This task can be either a todo, deadline or event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Done status of the task associated with the command. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new AddCommand and initialises its default done status to false."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public AddCommand(String[] userString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new AddCommand and allows specific initialisation of its done status."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param isDone The done status to set for the task represented by the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public AddCommand(String[] userString, boolean isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Processes the string array and returns the correct task to be added into the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * This can be a todo task with the task name, a deadline task with a date and/or time,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * or an event task with a date and/or time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskType Represents the type of the task (todo, deadline, event)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The task to be added into the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If task string does not contain dates (for deadline and event tasks),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * or has wrong date/time formatting."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected Task processTask(TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String taskName \u003d new TaskNameStringChecker(getStringArray()).checkTaskString(taskType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (taskType.equals(TaskType.TODO)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assert getStringArray().length \u003e 1 : \"Length of input string should be longer than 1!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new Todo(taskName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert getStringArray().length \u003e\u003d 4 : \"Length of input string should be longer than 4!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        DateTime dateTime \u003d new DateTimeStringChecker(getStringArray()).checkDateTime(taskType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return (taskType.equals(TaskType.DEADLINE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                ? new Deadline(taskName, dateTime)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                : new Event(taskName, dateTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Carries out the addition of a task to the task list specified."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to add the new task into."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The same task that is added to the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If task string does not contain task name, is unrecognized."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected Task addTask(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Task task \u003d processTask(Enum.valueOf(TaskType.class, getStringArray()[0].toUpperCase()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Carries out the addition of a task from a local file to the task list specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the addition of the task fails."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void executeFromFile(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Task task \u003d addTask(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Executes the addition of tasks and prints notifications to users once that is successful."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also writes the task list to a user-specified file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the addition of the task fails."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        addTask(tasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.showTaskAdded(tasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 113
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an abstract command that the user intends to execute."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** String array storing the user input. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String[] userString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new Command and initialises its string array."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Command(String[] userString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.userString \u003d userString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Executes the command to add a task, mark a task as done, delete the task, list all tasks or exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Abstract method that should be implemented in all sub-types of the Command class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the execution of the command fails."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Determines if the command should result in the termination of the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return True If the program should exit."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string array."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The string array."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected String[] getStringArray() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return userString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.TaskIndexStringChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a delete command. A DeleteCommand object represents a command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * to delete a task from a TaskList. This deleted task can be either a todo, deadline or event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DeleteCommand(String[] userString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Executes the deletion of tasks with the task index and prints notifications to users once that is successful."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also writes the changed task list to a user-specified file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the user-specified task index is not an Integer or not found in the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        int taskNumber \u003d new TaskIndexStringChecker(getStringArray()).checkTask(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert taskNumber \u003c\u003d tasks.totalTask() : \"Task number is greater than total number of tasks!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Task taskToDelete \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tasks.deleteTask(taskNumber - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.showDelete(tasks, taskToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 44
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.TaskIndexStringChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a done command. A DoneCommand object represents a command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * to mark a task as done. This task can be either a todo, deadline or event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DoneCommand(String[] userString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Executes the marking of tasks as done with the task index and prints notifications to users once that is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * successful. Also writes the changed task list to a user-specified file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the user-specified task index is not an Integer or not found in the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        int taskNumber \u003d new TaskIndexStringChecker(getStringArray()).checkTask(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert taskNumber \u003c\u003d tasks.totalTask() : \"Task number is greater than total number of tasks!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Task taskToMarkDone \u003d tasks.getTask(taskNumber - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        taskToMarkDone.markDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.showDone(taskToMarkDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yejiadong": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an exit command. An ExitCommand object represents a command to exit the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new ExitCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ExitCommand(String[] userString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Represents an empty method as the program exits without any execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out. In this case, it will be null as the program will exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Empty as program will exit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Determines if the command should result in the termination of the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return True If the program should exit."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * In this case, it will return true as this is an exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 45
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.FindTaskStringChecker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a Find Command that gives users a way to find a task by searching for a keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * The Find Command can only match a specified input string with the task names."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Dates and times are not used in the matching."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the find command with the user input string array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString String array that represents the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public FindCommand(String[] userString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Finds all matching tasks from the task list array and prints all of them out."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks Task list to operate on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui Deals with interactions with the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If find command is not followed by any keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        new FindTaskStringChecker(getStringArray()).checkTaskName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String keyword \u003d Arrays.stream(getStringArray()).skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert !keyword.equals(\"\") : \"Keyword is empty!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.printMatches(tasks.findTask(keyword));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a list command. A ListCommand object represents a command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * to list all tasks stored in the task list. These tasks can be either a todo, deadline or event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ListCommand(String[] userString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Prints the contents of the task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.printList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.parser.DateTimeStringChecker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a view command that allows the viewing of tasks by schedule."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a new View Command and initialises its string array."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param userString Tokenized array form of the input command string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ViewCommand(String[] userString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Extracts tasks that fall on the same day as the specified date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list to operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param ui The user-interaction object responsible for all system printing and user-interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param storage Represents the logic needed to write to an user-specified file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String to be printed out once execution of command is over."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the date is unspecified or the date format is wrong."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (getStringArray().length \u003c 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Please enter a date to search for!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        LocalDate date \u003d new DateTimeStringChecker(getStringArray()).checkDate(new String[]{getStringArray()[1]});"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return ui.printMatches(tasks.findTaskByDate(date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 42
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeStringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Ensures that date and time input is in the correct format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Also makes sure that dates are present in user-input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class DateTimeStringChecker extends StringChecker {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DateTimeStringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkDelimiterPresent(TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (Arrays.stream(getStringArray()).noneMatch(x -\u003e x.equals(taskType.getDelimiter()))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Input command must contain the delimiter \" + taskType.getDelimiter()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \" between task name and date!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks user-specified date and time for format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Ensures date and times specified are in the future."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Also ensures the respective delimiter to separate task name and date is present in user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskType Type of the task to be checked."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return DateTime object if inputs pass necessary date and time checks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If date is not present or formatting is incorrect."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DateTime checkDateTime(TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Makes sure the delimiter to separate name and date is present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkDelimiterPresent(taskType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Extracts the date and time from the user input string array"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] dateTime \u003d extractDateTime(taskType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Check Date exists and is in the correct format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        LocalDate taskDate \u003d checkDate(dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Verifies any existing time to be in the correct format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        Optional\u003cLocalTime\u003e taskTime \u003d Optional.ofNullable(checkTime(taskDate, dateTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return new DateTime(taskDate, taskTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Allows date checking by making sure the date exists and its format is correct."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dateTime Array containing the date/time string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The LocalDate object created with the correct date stored."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If date does not exist, or its formatting is incorrect."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public LocalDate checkDate(String[] dateTime) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkDateExists(dateTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return checkDateFormat(dateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkDateExists(String[] dateTime) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (super.checkEmptyString(dateTime, 1)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"The task must come with a date in yyyy-mm-dd format!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private LocalDate checkDateFormat(String[] dateTime) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            LocalDate taskDate \u003d LocalDate.parse(dateTime[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            //Make sure deadline set is in the future"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (taskDate.isBefore(todayDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new DukeException(\"Date for deadline/event tasks must be set in the future!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return taskDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Check your date! All tasks\u0027 date must be in yyyy-MM-dd \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \"format (i.e. 2021-10-05)!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private LocalTime checkTime(LocalDate taskDate, String[] dateTime) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (dateTime.length \u003e 2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Please make sure date is imputed in yyyy-mm-dd format. Any optional time\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    + \" parameter should be in HHmm format. Don\u0027t add any more characters after the date and time!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (dateTime.length \u003e 1 \u0026\u0026 !dateTime[1].equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return checkTimeFormat(taskDate, dateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private LocalTime checkTimeFormat(LocalDate taskDate, String[] dateTime) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            LocalTime taskTime \u003d LocalTime.parse(dateTime[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            //Make sure time has not passed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (taskDate.isEqual(LocalDate.now()) \u0026\u0026 taskTime.isBefore(LocalTime.now())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new DukeException(\"Check your time! The date and time combination you specified has already \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        + \"passed!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return taskTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Check your time! Any time specified must be in HHmm format (i.e. 1800)!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String[] extractDateTime(TaskType taskType) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(getStringArray()).dropWhile(e -\u003e !e.equals(taskType.getDelimiter()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .skip(1).collect(Collectors.joining(\" \")).split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 116
    }
  },
  {
    "path": "src/main/java/duke/parser/FileStringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Ensures that input strings read from data file is in the correct format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class FileStringChecker extends StringChecker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public FileStringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Ensures file input strings are of the correct length and format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Formats input strings to add in respective delimiters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Formatted string to be parsed by the string parser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the input command of the string is unrecognized."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String checkFile() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] taskArray \u003d super.getStringArray();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            TaskType taskType \u003d Enum.valueOf(TaskType.class, taskArray[0].toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return checkFileInputLine(taskArray, taskType.getMaxLength(), taskType.getMinLength(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    taskType.getDelimiter());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"File input command \" + taskArray[0] + \" is not a recognised task type!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String checkFileInputLine(String[] stringInput, int maxLength, int minLength, String delimiter)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkFileInputLength(maxLength, minLength);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkDoneInteger(stringInput[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return addDelimiter(removeDoneStatus(stringInput), delimiter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkFileInputLength(int maxLength, int minLength) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (getStringArray().length \u003e maxLength) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Your file string has more than the maximum \" + maxLength + \" inputs!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (getStringArray().length \u003c minLength) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Your file string has less than the minimum \" + minLength + \" inputs!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkDoneInteger(String string) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Integer.parseInt(string);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Done Status in your file input string should be 0 or 1!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String[] removeDoneStatus(String[] string) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] tempStringArray \u003d new String[string.length - 1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tempStringArray[0] \u003d string[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 2; i \u003c string.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            tempStringArray[i - 1] \u003d string[i];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return tempStringArray;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String addDelimiter(String[] string, String delimiter) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (delimiter.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Arrays.stream(string).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] tempStringArray \u003d new String[string.length + 1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tempStringArray[0] \u003d string[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tempStringArray[1] \u003d string[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tempStringArray[2] \u003d delimiter;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 3; i \u003c\u003d string.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            tempStringArray[i] \u003d string[i - 1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(tempStringArray).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yejiadong": 83
    }
  },
  {
    "path": "src/main/java/duke/parser/FindTaskStringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Ensures that input strings to find tasks is formatted correctly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class FindTaskStringChecker extends StringChecker {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public FindTaskStringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Ensures that the task name / keyword to match is present."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If no keyword is specified to match against task names."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void checkTaskName() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkTaskNamePresent();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkTaskNamePresent() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (super.checkEmptyString(getStringArray(), 2)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Please enter a keyword to match against task names!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.ViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Deals with parsing and making sense of the user command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Input string of the user. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String inputString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the parser with the user\u0027s input string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param inputString Input string of the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Parser(String inputString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.inputString \u003d inputString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Checks if an array of items contains a specified input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param inputString A specified input string to check."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param items The array of elements to be compared with the input string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return True if the array of elements contains the input string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean containsString(String inputString, String[] items) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(items).anyMatch(inputString::contains);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the user\u0027s inputs into the correct command to be executed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The correct command object to be executed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the input string is empty or unrecognized."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cString\u003e addCommands \u003d Arrays.stream(TaskType.values()).map(x -\u003e x.name().toLowerCase())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] splitInput \u003d getString().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String commandType \u003d splitInput[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (commandType.equals(\"\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Your Input String cannot be Empty!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"done\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new DoneCommand(splitInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new DeleteCommand(splitInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"list\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new ListCommand(splitInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new FindCommand(splitInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"view\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new ViewCommand(splitInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (commandType.equals(\"bye\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new ExitCommand(splitInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (addCommands.contains(commandType)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new AddCommand(splitInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Your Input Command is not Recognized!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Parses the user\u0027s inputs from a local file into the correct command to be executed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param isDone Indicates if the string encapsulates a task that should be marked done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return AddCommand to add tasks from the file to a task list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the input string from the file is empty or unrecognized."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public AddCommand parseFromFile(boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Assuming that written file will only contain events to be added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        List\u003cString\u003e addCommands \u003d retrieveAddCommands();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String[] splitInput \u003d getString().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String commandType \u003d splitInput[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (commandType.equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"File has empty input String!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else if (addCommands.contains(commandType)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return new AddCommand(splitInput, isDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Your Input Command from the file is not Recognized!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private List\u003cString\u003e retrieveAddCommands() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(TaskType.values()).map(x -\u003e x.name().toLowerCase())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Gets the input string of the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The input string of the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return inputString;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 113
    }
  },
  {
    "path": "src/main/java/duke/parser/StringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Abstract class to represent utility checker classes that ensure string quality and correctness."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public abstract class StringChecker {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Input string array from the user. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String[] inputStringArray;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    StringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        inputStringArray \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected boolean checkEmptyString(String[] stringArray, int length) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Makes sure string array specified contains minimal number of elements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return (stringArray.length \u003c length || stringArray[length - 1].trim().equals(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    protected void checkNoIllegalCharacters(String string) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        //Makes sure string does not contain the illegal delimiter specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (string.contains(\"|\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Sorry, task descriptions cannot contain \u0027\" + \"|\" + \" \u0027\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String[] getStringArray() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return inputStringArray;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 32
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskIndexStringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Utility class that checks task index strings for correctness."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TaskIndexStringChecker extends StringChecker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public TaskIndexStringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Ensures that task index is specified and exist in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param tasks The task list that contains the pre-existing tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The task index if it exists in the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the task index is not specified or not available."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int checkTask(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkTaskIndexPresent();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return checkTaskIndexCorrect(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkTaskIndexPresent() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (super.checkEmptyString(getStringArray(), 2)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Please enter a task number for your command!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private int checkTaskIndexCorrect(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(getStringArray()[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (taskNumber \u003c\u003d 0 || !tasks.isTaskPresent(taskNumber - 1)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                throw new DukeException(\"Oops, enter a task number that already exists in the list \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                        + \"(starting from 1 to \" + tasks.totalTask() + \").\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return taskNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Task Number specified must be an Integer!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 45
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskNameStringChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Utility class that checks ensures correctness of task names."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TaskNameStringChecker extends StringChecker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public TaskNameStringChecker(String[] userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private void checkTaskNamePresent(String delimiter) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (super.checkEmptyString(getStringArray(), 2) || extractTaskName(delimiter).trim().equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            throw new DukeException(\"Uh-oh! Please enter a valid description/name for your task!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Ensures task name is specified and of the correct format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * No illegal delimiters used to write to file is allowed in task names."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param taskType Type of the task to be checked."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return Extracted task name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @throws DukeException If the task name is not present or illegal characters are present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String checkTaskString(TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        checkTaskNamePresent(taskType.getDelimiter());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super.checkNoIllegalCharacters(extractTaskName(taskType.getDelimiter()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return extractTaskName(taskType.getDelimiter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private String extractTaskName(String delimiter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        if (delimiter.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            return Arrays.stream(getStringArray()).skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return Arrays.stream(getStringArray()).takeWhile(e -\u003e !e.equals(delimiter))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .skip(1).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 46
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a Deadline task that contains both task name and a date to serve as a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Time can be added as an optional parameter."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a Deadline task containing the description, date and time of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param name Description of the deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dateTime Stores the date and any specified time of the task deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Deadline(String name, DateTime dateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(name, dateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of a Deadline task to be appended to a local file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a Deadline task with description, done status, date and/or time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String appendFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"deadline\" + \" | \" + doneString + \" | \" + getName() + \" | \" + getDateTime().getFileFormattedDateTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of a Deadline task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a Deadline task containing the description, done status, formatted date and/or"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"[D]\" + \"[\" + doneString + \"] \" + getName() + \" (by: \" + getDateTime().getPrintFormattedDate()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + \" \" + getDateTime().getPrintFormattedTime() + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yejiadong": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an Event task that contains both task name and a date to serve as the event date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Time can be added as an optional parameter."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates an Event task containing the description, date and time of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param name Description of the event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dateTime Stores the date and any specified time of the task deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Event(String name, DateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(name, dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of an Event task to be appended to a local file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of an Event task with description, done status, date and/or time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String appendFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"event\" + \" | \" + doneString + \" | \" + getName() + \" | \" + getDateTime().getFileFormattedDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of an Event task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of an Event task containing the description, done status, formatted date and/or"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"[E]\" + \"[\" + doneString + \"] \" + getName() + \" (at: \" + getDateTime().getPrintFormattedDate()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                + \" \" + getDateTime().getPrintFormattedTime() + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents an abstract task that can be added into a task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Stores the description of the Task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Stores the done status of the Task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** DateTime object to store the date and any specified time of the deadline. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a task containing the description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Automatically initialises the initial done status as false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param name Description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a task containing the description of the task together with its date and time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Automatically initialises the initial done status as false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param name Description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param dateTime Date and time associated with the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    Task(String name, DateTime dateTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Marks the task as done by setting the done status to true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the task description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The task description."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the task description."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The task description."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the done status of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The done status of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of an abstract task to be appended to a local file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a task to be appended to a local file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public abstract String appendFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of an abstract task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (done ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"[\" + doneString + \"] \" + name;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 94
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents the container that stores all of the tasks at every point in time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /** Stores the description of the Task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Initialises the task list with an empty ArrayList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Adds a task into the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param task Task to be added into the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        getTaskList().add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Deletes the task at a specified index of the ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param index The task index that identifies the task to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert index \u003c totalTask() : \"Task index is greater than available!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        getTaskList().remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the task at a specified index of the ArrayList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param index The task index that identifies the task to be returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The task at a specified index of the ArrayList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assert index \u003c totalTask() : \"Task index is greater than available!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return getTaskList().get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns whether a task at a particular specified index is present."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param index The task index that identifies the task to be checked."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return True if the task is present in the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public boolean isTaskPresent(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return index \u003c\u003d (totalTask() - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Finds all matching tasks from the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param keyword Keyword to be matched with the task names in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return ArrayList containing all matching tasks that contain the keyword."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(String keyword) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 0; i \u003c getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (getTask(i).getName().contains(keyword)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                foundTasks.add(getTask(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Finds all matching tasks from the task list based on the date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param date Date to match with task dates."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return ArrayList containing all matching tasks that match the specified date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ArrayList\u003cTask\u003e findTaskByDate(LocalDate date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        for (int i \u003d 0; i \u003c getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            DateTime taskDateTime \u003d getTask(i).getDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            if (taskDateTime !\u003d null \u0026\u0026 taskDateTime.checkDateEqual(date)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                foundTasks.add(getTask(i));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the total number of tasks stored in the task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return An Integer representing the total number of tasks stored in the task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int totalTask() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return getTaskList().size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the ArrayList used to contain the tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return The ArrayList used to contain the tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yejiadong": 115
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents the different task types available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    TODO(\"\", 3, 3), DEADLINE(\"/by\", 4, 5),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    EVENT(\"/at\", 4, 5);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final String delimiter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final int minLength;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    private final int maxLength;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    TaskType(String delimiter, int minLength, int maxLength) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.delimiter \u003d delimiter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.minLength \u003d minLength;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        this.maxLength \u003d maxLength;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String getDelimiter() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return delimiter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int getMinLength() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return minLength;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public int getMaxLength() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return maxLength;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " * Represents a Todo task that contains a task name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Creates a Todo task containing the description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @param name Description of the Todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of a Todo task to be appended to a local file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a Todo task with the description and done status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String appendFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"todo\" + \" | \" + doneString + \" | \" + getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * Returns the string representation of a Todo task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     * @return String representation of a Todo task containing the description and done status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        String doneString \u003d (isDone() ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        return \"[T]\" + \"[\" + doneString + \"] \" + getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 37
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: beige; -fx-label-padding: 4px; -fx-wrap-text: true; -fx-background-radius: 15px; -fx-border-color: black; -fx-border-width: 3px; -fx-border-radius: 1px;\" text\u003d\"Label\" textFill\u003d\"#141314\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            \u003cFont name\u003d\"Avenir Next Condensed Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            \u003cGlow /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "         \u003c/effect\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 21
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addTask_deadlineTask_taskListWithOneTask() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        new AddCommand(new String[]{\"deadline\", \"return book\", \"/by\", \"2022-08-26\", \"1800\" })"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .addTask(testTaskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(testTaskList.totalTask(), 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void addTask_unrecognizedTask_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            new AddCommand(new String[]{\"event\", \"sing\", \"song\", \"/by\" })"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    .addTask(testTaskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertEquals(\"Input command must contain the delimiter /at between task name and date!\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void processTask_deadlineTask_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Task myReturnedTask \u003d new AddCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    new String[]{\"deadline\", \"return\", \"book\", \"/by\", \"2022-08-26\", \"1800\"})"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    .processTask(TaskType.DEADLINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertNotNull(myReturnedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertTrue(myReturnedTask instanceof Deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail(\"Got Duke Exception\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void processTask_deadlineNoDate_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            new AddCommand(new String[]{\"deadline\", \"return\", \"book\", \"/by\" })"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    .processTask(TaskType.DEADLINE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertEquals(\"The task must come with a date in yyyy-mm-dd format!\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 64
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void containsString_arrayWithString_true() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertTrue(new Parser(\"todo borrow book\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .containsString(\"return book\", new String[]{\"return book\"}));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void containsString_arrayWithoutString_false() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertFalse(new Parser(\"todo borrow book\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "                .containsString(\"return library book\", new String[]{}));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void parse_eventCommand_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Command myReturnedTask \u003d new Parser(\"event give speech /at 2021-08-26 2000\").parse();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertNotNull(myReturnedTask); //check if the object is !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            //check if the returned object is of class Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertTrue(myReturnedTask instanceof Command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            // let the test fail, if the function throws a Duke Exception."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail(\"Got Duke Exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void parse_emptyString_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Command myReturnedTask \u003d new Parser(\"\").parse();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertEquals(\"Your Input String cannot be Empty!\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void parse_unrecognizedString_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            Command myReturnedTask \u003d new Parser(\"yo\").parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "            assertEquals(\"Your Input Command is not Recognized!\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yejiadong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    public void getString_string_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "        assertEquals(\"todo go to market\", new Parser(\"todo go to market\").getString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 65
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 6
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 5,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/Todo.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yejiadong"
        },
        "content": "../src/main/java/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "yejiadong": 6
    }
  }
]
