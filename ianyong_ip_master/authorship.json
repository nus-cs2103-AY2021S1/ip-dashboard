[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \"6.0.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    implementation \u0027org.danilopianini:gson-extras:0.2.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 48
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ianyong": 103
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Entrypoint for the Duke chatbot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Starts the REPL environment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param args The command line parameters (unused)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            // Set the encoding of `System.out` to UTF-8."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out), true, \"UTF-8\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Repl.run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ianyong": 22
    }
  },
  {
    "path": "src/main/java/duke/Repl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.enums.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.PrettyPrinter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A read-eval-print loop (REPL) that reads in a command from the user, executes it, and prints out the result."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Repl {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    // Formatting"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of spaces to prefix each line with. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final int LEFT_PADDING_SIZE \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of underscores each divider should be made up of. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final int DIVIDER_LENGTH \u003d 60;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Scanner} object which reads in user input. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code PrettyPrinter} object for formatting the REPL output. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final PrettyPrinter prettyPrinter \u003d new PrettyPrinter(LEFT_PADDING_SIZE, DIVIDER_LENGTH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code TaskManager} object to keep track of tasks */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Runs the REPL."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        prettyPrinter.print(ResourceHandler.getString(\"repl.greeting\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String firstToken \u003d line.split(\" \")[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                Command command \u003d Command.valueOf(firstToken.toUpperCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                // Check that the user input is of the correct format for the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                command.validate(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(ResourceHandler.getString(\"repl.farewell\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case DEADLINE: {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^deadline\", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String[] args \u003d lineWithoutCommand.split(\"/by\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String deadlineName \u003d args[0].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String dueDateString \u003d args[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    LocalDateTime dueDate \u003d DateTimeParser.parseDateTime(dueDateString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.addTask(new Deadline(deadlineName, dueDate)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case DELETE: {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^delete\", \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String listIndexStr \u003d lineWithoutCommand.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    // `listIndexStr` is guaranteed to be a string made up of only digit characters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    int listIndex \u003d Integer.parseInt(listIndexStr) - 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        prettyPrinter.print(taskManager.removeTask(listIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        prettyPrinter.print(ResourceHandler.getString(\"repl.invalidTaskIndex\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case DONE: {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^done\", \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String listIndexStr \u003d lineWithoutCommand.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    // `listIndexStr` is guaranteed to be a string made up of only digit characters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    int listIndex \u003d Integer.parseInt(listIndexStr) - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        prettyPrinter.print(taskManager.markAsDone(listIndex));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        prettyPrinter.print(ResourceHandler.getString(\"repl.invalidTaskIndex\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case EVENT: {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^event\", \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String[] args \u003d lineWithoutCommand.split(\"/at\", 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String eventName \u003d args[0].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String dateTimeString \u003d args[1].trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    LocalDateTime dateTime \u003d DateTimeParser.parseDateTime(dateTimeString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.addTask(new Event(eventName, dateTime)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case FIND: {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^find\", \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String searchKeyword \u003d lineWithoutCommand.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.getMatchingTasks(searchKeyword));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case LIST: {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case OVERDUE: {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.getOverdueTasks());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case TODO: {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String lineWithoutCommand \u003d line.replaceFirst(\"^todo\", \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    String toDoName \u003d lineWithoutCommand.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.addTask(new ToDo(toDoName)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                case UPCOMING: {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    prettyPrinter.print(taskManager.getUpcomingTasks());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                } // I\u0027m aware that this bracket looks very weird; you can thank the CS2103T style guide for this."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                prettyPrinter.print(e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                prettyPrinter.print(ResourceHandler.getString(\"repl.unknownCommand\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 123
    }
  },
  {
    "path": "src/main/java/duke/enums/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Commands that can be used in \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Terminates the running of \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027bye\u0027 command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)bye\\\\s*$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d ResourceHandler.getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a {@code Deadline} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027deadline\u0027 command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)deadline\\\\s+.*\\\\S+.*\\\\s+/by\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.deadlineFormat\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"deadline\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Deletes a {@code Task} from the {@code TaskManager}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027delete\u0027 command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)delete\\\\s+\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.deleteFormat\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"delete\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks a {@code Task} as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027done\u0027 command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)done\\\\s+\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.doneFormat\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"done\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds an {@code Event} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027event\u0027 command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)event\\\\s+.*\\\\S+.*\\\\s+/at\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.eventFormat\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"event\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Searches for {@code Task}s in the {@code TaskManager} which match the keyword."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027find\u0027 command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)find\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.findFormat\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"find\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027list\u0027 command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)list\\\\s*$\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d ResourceHandler.getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"list\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all overdue {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    OVERDUE {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027overdue\u0027 command."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)overdue\\\\s*$\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d ResourceHandler.getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"overdue\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a {@code ToDo} task to the {@code TaskManager}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027todo\u0027 command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)todo\\\\s+.*\\\\S+.*\\\\s*$\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"exception.invalidArgs\"),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                        ResourceHandler.getString(\"command.toDoFormat\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"todo\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    },"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Lists all upcoming {@code Task}s in the {@code TaskManager}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    UPCOMING {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * Validates whether the user input is of the correct format for the \u0027upcoming\u0027 command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @param input the user input."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        public void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String regex \u003d \"^(?i)upcoming\\\\s*$\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            if (!Pattern.matches(regex, input)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String template \u003d ResourceHandler.getString(\"exception.noArgs\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                String message \u003d MessageFormat.format(template, \"upcoming\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Validates whether the user input is of the correct format."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public abstract void validate(String input) throws DukeException;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 236
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents an {@code Exception} that is related to \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code DukeException} with the specified detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 15
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeStringFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Schedulable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Deadline extends Task implements Schedulable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final LocalDateTime dueDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Deadline} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Deadline}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dueDate a {@code LocalDueDate} object representing the due date of the {@code Deadline}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Deadline(String name, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Deadline} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Deadline}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dueDate a {@code LocalDueDate} object representing the due date of the {@code Deadline}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Deadline} has been completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private Deadline(String name, LocalDateTime dueDate, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Deadline} as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Deadline} object with the same {@code name} as this {@code Deadline}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Deadline markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Deadline(name, dueDate, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the due date of this {@code Deadline} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the due date of this {@code Deadline} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the due date of this {@code Deadline} object has elapsed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the due date of this {@code Deadline} object has elapsed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean hasDateTimeElapsed() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Deadline} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Deadline}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(ResourceHandler.getString(\"deadline.toString\"), super.toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                DateTimeStringFormatter.formatDateTime(dueDate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Compares this {@code Schedulable} object with another {@code Schedulable Object}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param schedulable the {@code Schedulable} object to be compared."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as this object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is less than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified object is null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the specified object\u0027s type prevents it"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              from being compared to this object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int compareTo(Schedulable schedulable) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dueDate.compareTo(schedulable.getDateTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 95
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.DateTimeStringFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Schedulable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that starts and ends at a specific time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class Event extends Task implements Schedulable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Event} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Event}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTime a {@code LocalDueDate} object representing the date and time of the {@code Event}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event(String name, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Event} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Event}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTime a {@code LocalDueDate} object representing the date and time of the {@code Event}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Event} has been completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event(String name, LocalDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Event} as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Event} object with the same {@code name} as this {@code Event}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Event markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new Event(name, dateTime, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the datetime of this {@code Event} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the datetime of this {@code Event} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the datetime of this {@code Event} object has elapsed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the datetime of this {@code Event} object has elapsed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean hasDateTimeElapsed() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime.isBefore(currentDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Event}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(ResourceHandler.getString(\"event.toString\"), super.toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                DateTimeStringFormatter.formatDateTime(dateTime));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Compares this {@code Schedulable} object with another {@code Schedulable Object}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param schedulable the {@code Schedulable} object to be compared."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as this object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * is less than, equal to, or greater than the specified object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified object is null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the specified object\u0027s type prevents it"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              from being compared to this object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int compareTo(Schedulable schedulable) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return dateTime.compareTo(schedulable.getDateTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 95
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Represents a task within \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Name of the {@code Task}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Whether the {@code Task} has been completed. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code Task} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Task(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code Task} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code Task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code Task} has been completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    protected Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code Task} as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code Task} object with the same {@code name} as this {@code Task}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public abstract Task markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns whether the {@code Task} is done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the {@code Task} is done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Checks whether the {@code Task} contains the keyword in its name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param keyword the keyword that is being searched."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return whether the {@code Task} contains the keyword in its name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return name.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code Task} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code Task}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String key \u003d isDone ? \"task.toString.done\" : \"task.toString.notDone\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(ResourceHandler.getString(key), name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 71
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.typeadapters.RuntimeTypeAdapterFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.PersistentList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.Schedulable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Manages {@code Task} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** List of {@code Task} objects. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final List\u003cTask\u003e tasks \u003d new PersistentList\u003c\u003e(\"./data/tasks.txt\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            new TypeToken\u003cArrayList\u003cTask\u003e\u003e(){}.getType(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            RuntimeTypeAdapterFactory.of(Task.class)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(Deadline.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(Event.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                    .registerSubtype(ToDo.class));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Constructs a {@code TaskManager} object. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public TaskManager() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskManager}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param task the {@code Task} object to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of adding a {@code Task}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String taskCountKey \u003d \"taskManager.taskCount.\" + (tasks.size() \u003d\u003d 1 ? \"singular\" : \"plural\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"taskManager.addTask\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ResourceHandler.getString(taskCountKey));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(template, task, tasks.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes a {@code Task} from the {@code TaskManager}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listIndex the index of the {@code Task} in the {@code TaskManager} list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of removing a {@code Task}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String removeTask(int listIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Task removedTask \u003d tasks.remove(listIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String taskCountKey \u003d \"taskManager.taskCount.\" + (tasks.size() \u003d\u003d 1 ? \"singular\" : \"plural\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String template \u003d String.format(\"%s\\n%s\", ResourceHandler.getString(\"taskManager.removeTask\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ResourceHandler.getString(taskCountKey));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(template, removedTask, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Mark a {@code Task} as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listIndex the index of the {@code Task} in the {@code TaskManager} list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the action of marking a {@code Task} as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String markAsDone(int listIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Task updatedTask \u003d tasks.get(listIndex).markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        tasks.set(listIndex, updatedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return String.format(\"%s\\n  %s\", ResourceHandler.getString(\"taskManager.markTaskDone\"), updatedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of upcoming {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of upcoming {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getUpcomingTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e sortedUpcomingTasks \u003d tasks.stream().filter(task -\u003e task instanceof Schedulable)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .filter(task -\u003e !((Schedulable) task).hasDateTimeElapsed()).filter(task -\u003e !task.isDone())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(ResourceHandler.getString(\"taskManager.upcomingTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedUpcomingTasks.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            formattedList.append(String.format(\"%d. %s\\n\", i + 1, sortedUpcomingTasks.get(i)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of overdue {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of overdue {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getOverdueTasks() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e sortedOverdueTasks \u003d tasks.stream().filter(task -\u003e task instanceof Schedulable)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .filter(task -\u003e ((Schedulable) task).hasDateTimeElapsed()).filter(task -\u003e !task.isDone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(ResourceHandler.getString(\"taskManager.overdueTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedOverdueTasks.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            formattedList.append(String.format(\"%d. %s\\n\", i + 1, sortedOverdueTasks.get(i)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of {@code Task}s under the {@code TaskManager} that contain the specified keyword."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of {@code Task}s under the {@code TaskManager} that contain the specified keyword."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String getMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d tasks.stream().filter(task -\u003e task.containsKeyword(keyword))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(ResourceHandler.getString(\"taskManager.matchingTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            formattedList.append(String.format(\"%d. %s\\n\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list of {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list of {@code Task}s under the {@code TaskManager}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        StringBuilder formattedList \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                new StringBuilder(ResourceHandler.getString(\"taskManager.listTasksPrefix\") + \"\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            formattedList.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return formattedList.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 133
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.utils.ResourceHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.text.MessageFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * A specialised {@code Task} that does not have any date/time attached to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new uncompleted {@code ToDo} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code ToDo}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code ToDo} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param name the name of the {@code ToDo}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param isDone whether the {@code ToDo} has been completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private ToDo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Marks the {@code ToDo} as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a new completed {@code ToDo} object with the same {@code name} as this {@code ToDo}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ToDo markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ToDo(name, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a string representation of this {@code ToDo} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a string representation of the {@code ToDo}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return MessageFormat.format(ResourceHandler.getString(\"toDo.toString\"), super.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 48
    }
  },
  {
    "path": "src/main/java/duke/utils/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Utility class for converting strings into {@code LocalDateTime} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for date and time. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for date only. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Parses a string into a {@code LocalDateTime} object if possible."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dateTimeString the string to be passed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a {@code LocalDateTime} object describing the parsed datetime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws DukeException if the string is of an invalid datetime format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTimeString, dateTimeFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (DateTimeParseException e1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                localDateTime \u003d LocalDate.parse(dateTimeString, dateFormatter).atStartOfDay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                throw new DukeException(ResourceHandler.getString(\"exception.invalidDateTime\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 39
    }
  },
  {
    "path": "src/main/java/duke/utils/DateTimeStringFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Utility class for formatting {@code LocalDateTime} objects as strings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DateTimeStringFormatter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Format for displaying datetime */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Formats the {@code LocalDateTime} as a human-readable string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param localDateTime a {@code LocalDateTime} object describing the datetime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a formatted string representation of the datetime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String formatDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return localDateTime.format(displayFormatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 22
    }
  },
  {
    "path": "src/main/java/duke/utils/LocalDateTimeAdapter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonDeserializationContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonSerializationContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Custom serializer and de-serializer for {@code LocalDateTime} objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class LocalDateTimeAdapter implements JsonSerializer\u003cLocalDateTime\u003e, JsonDeserializer\u003cLocalDateTime\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Gson invokes this call-back method during serialization when it encounters a field of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIn the implementation of this call-back method, you should consider invoking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@link JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * non-trivial field of the {@code src} object. However, you should never invoke it on the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code src} object itself since that will cause an infinite loop (Gson will call your"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * call-back method again).\u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param src       the object that needs to be converted to Json."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeOfSrc the actual type (fully genericized version) of the source object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param context"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a JsonElement corresponding to the specified object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public JsonElement serialize(LocalDateTime src, Type typeOfSrc, JsonSerializationContext context) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        ZoneOffset zoneOffset \u003d ZoneId.systemDefault().getRules().getOffset(src);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new JsonPrimitive(src.toInstant(zoneOffset).getEpochSecond());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Gson invokes this call-back method during deserialization when it encounters a field of the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIn the implementation of this call-back method, you should consider invoking"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@link JsonDeserializationContext#deserialize(JsonElement, Type)} method to create objects"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * for any non-trivial field of the returned object. However, you should never invoke it on the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the same type passing {@code json} since that will cause an infinite loop (Gson will call your"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * call-back method again)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param json    The Json data being deserialized"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeOfT The type of the Object to deserialize to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param context"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws JsonParseException if json is not in the expected format of {@code typeofT}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public LocalDateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            throws JsonParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return LocalDateTime.ofInstant(Instant.ofEpochSecond(json.getAsJsonPrimitive().getAsLong()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 63
    }
  },
  {
    "path": "src/main/java/duke/utils/PersistentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * An {@code ArrayList} wrapper that syncs the state of the list to a file whenever it\u0027s updated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class PersistentList\u003cE\u003e implements List\u003cE\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Internal {@code ArrayList} object. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final List\u003cE\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code StorageManager} object for writing the state of the list to the specified file. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** {@code Gson} object for converting objects to JSON. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Gson gson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Type of the list. This is necessary due to erasure of generic types. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final Type listType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a {@code PersistentList} object with the specified file, type, and {@code TypeAdapterFactory}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the file to read from and write to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param listType the type of the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param typeAdapterFactory custom type adapter factory to handle polymorphism."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public PersistentList(String filePath, Type listType, TypeAdapterFactory typeAdapterFactory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        gson \u003d new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "                .registerTypeAdapterFactory(typeAdapterFactory).setPrettyPrinting().create();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list \u003d readStateFromFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes the current state of the list to the specified file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void syncStateToFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            storageManager.saveToFile(gson.toJson(list, listType));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retrieves the current state of the list from the specified file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the current state of the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private List\u003cE\u003e readStateFromFile() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            String data \u003d storageManager.readFromFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            Type listType \u003d new TypeToken\u003cArrayList\u003cTask\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return gson.fromJson(data, listType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the number of elements in this list.  If this list contains"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * more than {@code Integer.MAX_VALUE} elements, returns"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Integer.MAX_VALUE}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the number of elements in this list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains no elements."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains no elements"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains the specified element."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns {@code true} if and only if this list contains"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * at least one element {@code e} such that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, e)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element whose presence in this list is to be tested"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains the specified element"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean contains(Object o) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.contains(o);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an iterator over the elements in this list in proper sequence."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an iterator over the elements in this list in proper sequence"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Iterator\u003cE\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an array containing all of the elements in this list in proper"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence (from first to last element)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThe returned array will be \"safe\" in that no references to it are"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * maintained by this list.  (In other words, this method must"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * allocate a new array even if this list is backed by an array)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The caller is thus free to modify the returned array."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eThis method acts as bridge between array-based and collection-based"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * APIs."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an array containing all of the elements in this list in proper"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see Arrays#asList(Object[])"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public Object[] toArray() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.toArray();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns an array containing all of the elements in this list in"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * proper sequence (from first to last element); the runtime type of"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the returned array is that of the specified array.  If the list fits"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in the specified array, it is returned therein.  Otherwise, a new"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * array is allocated with the runtime type of the specified array and"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the size of this list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eIf the list fits in the specified array with room to spare (i.e.,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the array has more elements than the list), the element in the array"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * immediately following the end of the list is set to {@code null}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (This is useful in determining the length of the list \u003ci\u003eonly\u003c/i\u003e if"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the caller knows that the list does not contain any null elements.)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eLike the {@link #toArray()} method, this method acts as bridge between"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * array-based and collection-based APIs.  Further, this method allows"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * precise control over the runtime type of the output array, and may,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * under certain circumstances, be used to save allocation costs."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eSuppose {@code x} is a list known to contain only strings."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The following code can be used to dump the list into a newly"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * allocated array of {@code String}:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e{@code"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *     String[] y \u003d x.toArray(new String[0]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Note that {@code toArray(new Object[0])} is identical in function to"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code toArray()}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param a the array into which the elements of this list are to"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *          be stored, if it is big enough; otherwise, a new array of the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *          same runtime type is allocated for this purpose."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return an array containing the elements of this list"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ArrayStoreException  if the runtime type of the specified array"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is not a supertype of the runtime type of every element in"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              this list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified array is null"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public \u003cT\u003e T[] toArray(T[] a) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.toArray(a);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Appends the specified element to the end of this list (optional"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003eLists that support this operation may place limitations on what"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * elements may be added to this list.  In particular, some"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * lists will refuse to add null elements, and others will impose"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * restrictions on the type of elements that may be added.  List"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * classes should clearly specify in their documentation any restrictions"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * on what elements may be added."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param e element to be appended to this list"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} (as specified by {@link Collection#add})"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code add} operation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and this"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       list does not permit null elements"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of this element"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean add(E e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.add(e);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the first occurrence of the specified element from this list,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * if it is present (optional operation).  If this list does not contain"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the element, it is unchanged.  More formally, removes the element with"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the lowest index {@code i} such that"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (if such an element exists).  Returns {@code true} if this list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * contained the specified element (or equivalently, if this list changed"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * as a result of the call)."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to be removed from this list, if present"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contained the specified element"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the type of the specified element"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with this list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and this"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       list does not permit null elements"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean remove(Object o) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean elementRemoved \u003d list.remove(o);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return elementRemoved;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns {@code true} if this list contains all of the elements of the"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection to be checked for containment in this list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list contains all of the elements of the"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the types of one or more elements"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              in the specified collection are incompatible with this"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified collection contains one"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              elements"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              or if the specified collection is null"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean containsAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.containsAll(c);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Appends all of the elements in the specified collection to the end of"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, in the order that they are returned by the specified"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * collection\u0027s iterator (optional operation).  The behavior of this"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation is undefined if the specified collection is modified while"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the operation is in progress.  (Note that this will occur if the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection is this list, and it\u0027s nonempty.)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be added to this list"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code addAll} operation"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of the specified"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       collection prevents it from being added to this list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified collection contains one"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       elements, or if the specified collection is null"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of an element of the"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection prevents it from being added to this list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #add(Object)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean addAll(Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.addAll(c);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Inserts all of the elements in the specified collection into this"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * list at the specified position (optional operation).  Shifts the"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * element currently at that position (if any) and any subsequent"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * elements to the right (increases their indices).  The new elements"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * will appear in this list in the order that they are returned by the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection\u0027s iterator.  The behavior of this operation is"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * undefined if the specified collection is modified while the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation is in progress.  (Note that this will occur if the specified"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * collection is this list, and it\u0027s nonempty.)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index at which to insert the first element from the"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *              specified collection"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c     collection containing elements to be added to this list"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code addAll} operation"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of the specified"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       collection prevents it from being added to this list"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified collection contains one"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or more null elements and this list does not permit null"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       elements, or if the specified collection is null"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of an element of the"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection prevents it from being added to this list"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean addAll(int index, Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.addAll(index, c);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes from this list all of its elements that are contained in the"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection (optional operation)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be removed from this list"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code removeAll} operation"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of this list"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with the specified collection"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if this list contains a null element and the"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection does not permit null elements"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or if the specified collection is null"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #remove(Object)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean removeAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.removeAll(c);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Retains only the elements in this list that are contained in the"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection (optional operation).  In other words, removes"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * from this list all of its elements that are not contained in the"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified collection."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param c collection containing elements to be retained in this list"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return {@code true} if this list changed as a result of the call"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code retainAll} operation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of an element of this list"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is incompatible with the specified collection"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if this list contains a null element and the"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       specified collection does not permit null elements"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       or if the specified collection is null"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #remove(Object)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @see #contains(Object)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public boolean retainAll(Collection\u003c?\u003e c) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        boolean listChanged \u003d list.retainAll(c);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return listChanged;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes all of the elements from this list (optional operation)."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The list will be empty after this call returns."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code clear} operation"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the element at the specified position in this list."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index of the element to return"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element at the specified position in this list"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of range"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E get(int index) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Replaces the element at the specified position in this list with the"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * specified element (optional operation)."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index   index of the element to replace"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param element element to be stored at the specified position"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element previously at the specified position"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code set} operation"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       this list does not permit null elements"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of the specified"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       element prevents it from being added to this list"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E set(int index, E element) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        E previousElement \u003d list.set(index, element);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousElement;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Inserts the specified element at the specified position in this list"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (optional operation).  Shifts the element currently at that position"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * (if any) and any subsequent elements to the right (adds one to their"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * indices)."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index   index at which the specified element is to be inserted"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param element element to be inserted"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code add} operation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException            if the class of the specified element"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       prevents it from being added to this list"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException          if the specified element is null and"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       this list does not permit null elements"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IllegalArgumentException      if some property of the specified"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       element prevents it from being added to this list"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void add(int index, E element) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        list.add(index, element);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Removes the element at the specified position in this list (optional"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * operation).  Shifts any subsequent elements to the left (subtracts one"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * from their indices).  Returns the element that was removed from the"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index the index of the element to be removed"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the element previously at the specified position"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws UnsupportedOperationException if the {@code remove} operation"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       is not supported by this list"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException     if the index is out of range"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                       ({@code index \u003c 0 || index \u003e\u003d size()})"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public E remove(int index) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        E previousElement \u003d list.remove(index);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        syncStateToFile();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return previousElement;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the index of the first occurrence of the specified element"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in this list, or -1 if this list does not contain the element."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns the lowest index {@code i} such that"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))},"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or -1 if there is no such index."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to search for"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the index of the first occurrence of the specified element in"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, or -1 if this list does not contain the element"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int indexOf(Object o) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.indexOf(o);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the index of the last occurrence of the specified element"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * in this list, or -1 if this list does not contain the element."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * More formally, returns the highest index {@code i} such that"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Objects.equals(o, get(i))},"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * or -1 if there is no such index."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param o element to search for"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the index of the last occurrence of the specified element in"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * this list, or -1 if this list does not contain the element"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws ClassCastException   if the type of the specified element"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              is incompatible with this list"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws NullPointerException if the specified element is null and this"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              list does not permit null elements"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                              (\u003ca href\u003d\"Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public int lastIndexOf(Object o) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ianyong"
        },
        "content": "       return list.lastIndexOf(o);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence)."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.listIterator();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence), starting at the specified position in the list."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The specified index indicates the first element that would be"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * returned by an initial call to {@link ListIterator#next next}."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * An initial call to {@link ListIterator#previous previous} would"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * return the element with the specified index minus one."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param index index of the first element to be returned from the"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *              list iterator (by a call to {@link ListIterator#next next})"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a list iterator over the elements in this list (in proper"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * sequence), starting at the specified position in the list"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of range"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code index \u003c 0 || index \u003e size()})"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator(int index) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.listIterator(index);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns a view of the portion of this list between the specified"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code fromIndex} and {@code toIndex} are equal, the returned list is"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * empty.)  The returned list is backed by this list, so non-structural"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * changes in the returned list are reflected in this list, and vice-versa."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The returned list supports all of the optional list operations supported"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * by this list.\u003cp\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * This method eliminates the need for explicit range operations (of"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the sort that commonly exist for arrays).  Any operation that expects"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * a list can be used as a range operation by passing a subList view"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * instead of a whole list.  For example, the following idiom"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * removes a range of elements from a list:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cpre\u003e{@code"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *      list.subList(from, to).clear();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Similar idioms may be constructed for {@code indexOf} and"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code lastIndexOf}, and all of the algorithms in the"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * {@code Collections} class can be applied to a subList.\u003cp\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * The semantics of the list returned by this method become undefined if"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * the backing list (i.e., this list) is \u003ci\u003estructurally modified\u003c/i\u003e in"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * any way other than via the returned list.  (Structural modifications are"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * those that change the size of this list, or otherwise perturb it in such"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * a fashion that iterations in progress may yield incorrect results.)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param fromIndex low endpoint (inclusive) of the subList"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param toIndex   high endpoint (exclusive) of the subList"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return a view of the specified range within this list"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IndexOutOfBoundsException for an illegal endpoint index value"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   ({@code fromIndex \u003c 0 || toIndex \u003e size ||"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *                                   fromIndex \u003e toIndex})"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public List\u003cE\u003e subList(int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return list.subList(fromIndex, toIndex);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 595
    }
  },
  {
    "path": "src/main/java/duke/utils/PrettyPrinter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Responsible for the formatting of output from \u003ci\u003eDuke\u003c/i\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class PrettyPrinter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of spaces to prefix each line with. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final int leftPadding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Number of underscores each divider should be made up of. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final int dividerLength;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code PrettyPrinter} object that will prefix each line with the specified number of spaces and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * add a divider with the specified number of underscores to the top and bottom of each message block."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param leftPadding the number of spaces to prefix each line with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param dividerLength the number of underscores of each divider."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public PrettyPrinter(int leftPadding, int dividerLength) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.leftPadding \u003d leftPadding;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.dividerLength \u003d dividerLength;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Prints out the number of spaces specified by {@code leftPadding}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void printPadding() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        System.out.print(\" \".repeat(leftPadding));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Prints out the divider using the number of underscores specified by {@code dividerLength}. The dividers are"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * subject to left padding. If the {@code dividerLength} is {@code 0}, this method does nothing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private void printDivider() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (dividerLength !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            printPadding();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.out.println(\"_\".repeat(dividerLength));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Pretty prints the message by adding left padding and dividers at the top and bottom of the message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param message the string to be pretty printed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // Handle both LF and CRLF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        String[] lines \u003d message.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            printPadding();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 58
    }
  },
  {
    "path": "src/main/java/duke/utils/ResourceHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Interface through which string resources are retrieved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class ResourceHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Default locale - set to English/Singapore */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Locale defaultLocale \u003d new Locale(\"en\", \"SG\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** For caching the `ResourceBundle` objects of each locale */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private static final Map\u003cLocale, ResourceBundle\u003e resourceBundles \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the string resource for the given key and locale."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the identifier for the string resource."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param locale the locale of the string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the string resource."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String getString(String key, Locale locale) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        resourceBundles.putIfAbsent(locale, ResourceBundle.getBundle(\"Strings\", locale));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return resourceBundles.get(locale).getString(key);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Returns the string resource for the given key in the default locale (English/Singapore)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param key the identifier for the string resource."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the string resource."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public static String getString(String key) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return getString(key, defaultLocale);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 38
    }
  },
  {
    "path": "src/main/java/duke/utils/Schedulable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public interface Schedulable extends Comparable\u003cSchedulable\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Returns the datetime of the {@code Schedulable} object. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Returns whether the datetime has elapsed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    boolean hasDateTimeElapsed();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 10
    }
  },
  {
    "path": "src/main/java/duke/utils/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": " * Responsible for saving and loading the state of the application from a file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /** Path of the file to read from and write to. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Constructs a new {@code StorageManager} object that is associated with the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param filePath the path of the file to read from and write to."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public StorageManager(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Writes data to the specified file, overwriting the file if it already exists."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @param data the data to be written into the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void saveToFile(String data) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        File parentDir \u003d file.getParentFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // If the parent directory does not exist, create it along with any other"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // necessary but non-existent parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!parentDir.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            parentDir.mkdirs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        fileWriter.write(data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * Reads data from the specified file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @return the data present in the file or a string representation of an empty array if the file does not exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ianyong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public String readFromFile() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        // If the file does not exist, return a string representation of an empty array."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        if (!(new File(filePath).exists())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ianyong"
        },
        "content": "            return \"[]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        return Files.readString(Path.of(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 57
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testHasDateTimeElapsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Deadline upcomingDeadline \u003d new Deadline(\"Project Meeting\", currentTime.plusSeconds(10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(upcomingDeadline.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Deadline overdueDeadline \u003d new Deadline(\"Project Meeting\", currentTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(overdueDeadline.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event firstDeadline \u003d new Event(\"First Deadline\", LocalDateTime.parse(\"2020-08-25T09:00:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event secondDeadline \u003d new Event(\"Second Deadline\", LocalDateTime.parse(\"2020-08-25T10:00:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event thirdDeadline \u003d new Event(\"Third Deadline\", LocalDateTime.parse(\"2020-08-25T11:00:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeadline.compareTo(secondDeadline) \u003c 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondDeadline.compareTo(thirdDeadline) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstDeadline.compareTo(thirdDeadline) \u003c 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondDeadline.compareTo(secondDeadline) \u003d\u003d 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdDeadline.compareTo(firstDeadline) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdDeadline.compareTo(firstDeadline) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 32
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testHasDateTimeElapsed() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event upcomingEvent \u003d new Event(\"CS2103T Lecture\", currentTime.plusSeconds(10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertFalse(upcomingEvent.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event overdueEvent \u003d new Event(\"CS2103T Lecture\", currentTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(overdueEvent.hasDateTimeElapsed());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event firstEvent \u003d new Event(\"First Event\", LocalDateTime.parse(\"2020-08-25T09:00:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event secondEvent \u003d new Event(\"Second Event\", LocalDateTime.parse(\"2020-08-25T10:00:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        Event thirdEvent \u003d new Event(\"Third Event\", LocalDateTime.parse(\"2020-08-25T11:00:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstEvent.compareTo(secondEvent) \u003c 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondEvent.compareTo(thirdEvent) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(firstEvent.compareTo(thirdEvent) \u003c 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(secondEvent.compareTo(secondEvent) \u003d\u003d 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdEvent.compareTo(firstEvent) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "        assertTrue(thirdEvent.compareTo(firstEvent) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ianyong": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ianyong"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ianyong"
        },
        "content": "event project meeting /at Friday 2 to 4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "deadline individual project /by August 20"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "listtt"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list all"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done -5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done ewofije"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ianyong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ianyong"
        },
        "content": "event birthday celebration /by September 5"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ianyong"
        },
        "content": "deadline movie night /at December 28"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ianyong"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete 13"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete -324"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ianyong": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM discard any changes to env vars when script exits"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "setlocal enabledelayedexpansion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM recreate bin directory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rmdir /s /q ..\\bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ianyong"
        },
        "content": "mkdir ..\\bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "(for /f \"delims\u003d\" %%f in (\u0027dir /b /s ..\\src\\main\\*.java\u0027) do ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d%%f"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d!file:\\\u003d\\\\!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @echo \"!file!\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": ")) \u003e sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ianyong"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM copy properties files into the bin folder"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "(for /f \"delims\u003d\" %%f in (\u0027dir /b /s ..\\src\\main\\*.properties\u0027) do ("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d%%f"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    set file\u003d!file:\\\u003d\\\\!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    @echo \"!file!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ianyong"
        },
        "content": ")) \u003e sources.txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ianyong"
        },
        "content": "for /f \"delims\u003d\" %%f in (sources.txt) do copy %%f ..\\bin"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ianyong"
        },
        "content": "REM delete sources.txt"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ianyong"
        },
        "content": "del sources.txt"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ianyong"
        },
        "content": "java -D\"file.encoding\u003dUTF-8\" -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ianyong": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# recreate bin directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rm -rf ../bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ianyong"
        },
        "content": "if"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ianyong"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ianyong"
        },
        "content": "  )"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# delete sources.txt"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ianyong"
        },
        "content": "rm sources.txt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ianyong"
        },
        "content": "# copy properties files into the bin folder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ianyong"
        },
        "content": "find ../src/main -name \"*.properties\" -exec cp \"{}\" ../bin \\;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ianyong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ianyong": 13
    }
  }
]
