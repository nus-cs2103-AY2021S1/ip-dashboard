[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] play"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] practice piano"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[E][0] piano exam /at 2020-08-09"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[D][0] homework due /by 2020-08-10"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] do homework"
      }
    ],
    "authorContributionMap": {
      "foongsq": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, LocalDate by, String time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate by, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() { //format time here"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                by + (time \u003d\u003d null || time.isEmpty() ? \"\" : time) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 48
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printLoadingError(de);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isEnd \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            while (!isEnd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                isEnd \u003d Parser.execute(tasks, ui, storage, input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printLoadingError(de);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 32,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, LocalDate at, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate at, String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + (time \u003d\u003d null || time.isEmpty() ? \"\" : \" \" + time) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 47
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String formatDate(String dateString) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (dateString.contains(\"/\")) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            dateString \u003d dateString.replaceAll(\"\\\\/\", \"-\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String[] dateStringArr \u003d dateString.split(\"-\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dateString \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c dateStringArr.length; i++) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (dateStringArr[i].length() \u003c 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateStringArr[i] \u003d \"0\" + dateStringArr[i];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateString + \"-\" + dateStringArr[i];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateStringArr[i];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void handleDoneInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(4).trim().isEmpty()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(4).trim().matches(\"[0-9]+\")) { //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            index \u003d Integer.parseInt(input.substring(4).trim()); //convert string to integer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                taskList.setDone(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number to mark as done (index is not valid)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to mark as done (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void handleDeleteInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(6).trim().isEmpty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(6).trim().matches(\"[0-9]+\")) { //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            index \u003d Integer.parseInt(input.substring(6).trim()); //convert string to integer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                taskList.setDelete(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number to delete (index is not valid)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to delete (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void handleTodoInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(4).trim().isEmpty()) { //to make sure to do task is not empty"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "           taskList.setTodo(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid todo\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void handleDeadlineInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(8).trim().isEmpty() //to make sure deadline is not empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(8).trim().contains(\"/by\") //to make sure deadline contains /by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(8).trim().startsWith(\"/by\") //to make sure deadline contains a task description"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(8).trim().endsWith(\"/by\")) { //to make sure deadline contains a deadline"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(8);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.trim().split(\"/by \")[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String by \u003d descriptionAndTime.trim().split(\"/by \")[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (by.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d by.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d by.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString); //convert string to integer wrap in try catch?"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                taskList.setDeadline(description, d1, timeString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the time in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        taskList.setDeadline(description, d1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    by \u003d formatDate(by);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    taskList.setDeadline(description, d1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date and time in the format yyyy-mm-dd hhmm (eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid deadline\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void handleEventInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(5).trim().isEmpty() //to make sure event is not empty"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(5).trim().contains(\"/at\") //to make sure event contains at"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(5).trim().startsWith(\"/at\") //to make sure event description is not empty"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(5).trim().endsWith(\"/at\")) { //to make sure event contains a time/date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(5);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.split(\"/at \")[0];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String at \u003d descriptionAndTime.split(\"/at \")[1].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (at.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d at.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d at.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString); //convert string to integer"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                               taskList.setEvent(description, d2, timeString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the time in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        taskList.setEvent(description, d2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    at \u003d formatDate(at);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    taskList.setEvent(description, d2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date and time in the format yyyy-mm-dd hhmm (eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid event\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static TaskList handleFindInput(String input, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(4).trim().isEmpty()) { //to make sure to do task is not empty"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foongsq"
        },
        "content": "           return taskList.find(input.substring(4).trim());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid search item\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static TaskList addTaskFromFile(String taskString, TaskList list) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (Character.toString(taskString.charAt(1)).equals(\"T\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.add(new Todo(taskString.substring(6).trim()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.add(new Todo(taskString.substring(6).trim(), true));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (Character.toString(taskString.charAt(1)).equals(\"D\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d taskString.substring(6).split(\"/by\")[0].trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String dateString \u003d taskString.substring(6).split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) { //task is marked as not done yet"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, dateObj, time));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, dateObj));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else { //task is marked as done"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, true, dateObj, time));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, true, dateObj));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d taskString.substring(6).split(\"/at\")[0].trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String dateString \u003d taskString.substring(6).split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) { //task is marked as not done yet"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, dateObj, time));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, dateObj));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else { //task is marked as done"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, true, dateObj, time));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, true, dateObj));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static boolean execute(TaskList taskList, Ui ui, Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (input.equalsIgnoreCase(\"bye\")) { //if user types \"bye\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printGoodbye();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.equalsIgnoreCase(\"list\")) { //if user types \"list\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printTasks(taskList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"done\")) { //if user input starts with \"done\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            handleDoneInput(input, taskList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            handleDeleteInput(input, taskList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"find\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printMatchingTasks(handleFindInput(input, taskList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            handleTodoInput(input, taskList);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            handleDeadlineInput(input, taskList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (input.toLowerCase().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            handleEventInput(input, taskList);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid deadline\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 250
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        File directory \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!directory.exists()){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (!taskString.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        Parser.addTaskFromFile(taskString, taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(fnfe.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else { //file f doesn\u0027t exist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void write(TaskList listToAdd) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FileWriter resetfw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resetfw.write(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resetfw.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            for (int i \u003d 0; i \u003c listToAdd.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String task \u003d listToAdd.get(i).toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\"(\", \"/\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\")\", \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\":\", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                fw.write(\"\\n\" + task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(ioe.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 66
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return tick or X symbols"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 38
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e loadedData) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList \u003d loadedData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setDone(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d this.taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.set(index - 1, newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printMarkAsDone(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setDelete(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task removed \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printRemoveTask(removed, this.taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setTodo(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Todo(description.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printTaskAdded(newTask, taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setDeadline(String description, LocalDate d1, String timeString) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Deadline(description.trim(), d1, timeString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setDeadline(String description, LocalDate d1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Deadline(description.trim(), d1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setEvent(String description, LocalDate d2, String timeString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Event(description.trim(), d2, timeString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setEvent(String description, LocalDate d2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Event(description.trim(), d2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList find(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for(int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String taskDescription \u003d this.taskList.get(i).getDescription();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (taskDescription.contains(input)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                result.add(this.taskList.get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 81
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 18
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Yooo, I\u0027m Duke.\\nWhat can I do for you today?\\nPlease enter dates and times in this format: yyyy-mm-dd hhmm\"); //Greeting"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Bye bye!!! See you again next time :)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printLoadingError(Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printTasks(TaskList list) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i).display());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printMatchingTasks(TaskList list) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i).display());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void printTaskAdded(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Added task: \" + task.display()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + list.size() + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void printMarkAsDone(Task newTask) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Marked task as done:\\n\" + newTask.display());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void printRemoveTask(Task removed, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Removed task:\\n\" + removed.display()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + taskList.size() + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 54
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0] family day (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", true, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][1] family day (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0] family day (by: Aug 24 2020)\", deadline.display());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"\", date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0]  (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 33
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //tests if duke can run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void dukeTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        new Duke(\"../../data/duke.txt\").run();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 11
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][0] do homework (at: 2020-08-24)\", event.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", true, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1] do homework (at: 2020-08-24)\", event.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", true, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1] do homework (at: Aug 24 2020)\", event.display());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"\", true, date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1]  (at: Aug 24 2020)\", event.display());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 33
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"do homework\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][0] do homework\", todo.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"watch youtube videos\", true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] watch youtube videos\", todo.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"watch youtube videos\", true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] watch youtube videos\", todo.display());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"\", true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] \", todo.display());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "foongsq": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 37
    }
  }
]
