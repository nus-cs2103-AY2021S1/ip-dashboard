{
  "authorDailyContributionsMap": {
    "Criss-Wang": [
      {
        "date": "2020-08-14",
        "commitResults": [
          {
            "hash": "90e8d9649308c4b2639599e1ff35bf6a6a0e693f",
            "messageTitle": "Add checkstyle.xml",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 3,
                "deletions": 6
              }
            }
          },
          {
            "hash": "60e877d6987eb33d6cf1eaa5f30ecef240db49fc",
            "messageTitle": "Update Duke.java main() method",
            "messageBody": "Complete Level-1 Task.\n\nLet\u0027s simulate the chat bot called \"Jarvis\" by simple while loop\nwhich outputs the command from user and takes in a new one\nuntil \"bye\" command is received.\n",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-15",
        "commitResults": [
          {
            "hash": "c9fea38ceaa4eeb1472f83c03570d2ea1b4ac306",
            "messageTitle": "Level-2 Intermediate work",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 206,
                "deletions": 12
              }
            }
          },
          {
            "hash": "ab58aa1011dc50b179b7963a83957c0679ddef53",
            "messageTitle": "Add a set of command-related and task classes",
            "messageBody": "Make the command reading and processing systematic.\n\nLet\u0027s,\n* create a few command classes to separate different types of command\n* create a CommandReader class to help with the separation process\n* create a immutable Task class to denote the user\u0027s tasks\n* create a immutable TaskList class to denote the list of tasks\n* create a CommandAgent class to handle the command request\nand generate feedback\n",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 18,
                "deletions": 0
              },
              "java": {
                "insertions": 127,
                "deletions": 46
              },
              "bat": {
                "insertions": 3,
                "deletions": 2
              }
            }
          },
          {
            "hash": "789a7e0a98e045ac8de0df3de80d0bbb625e0223",
            "messageTitle": "Change handleCommand() method",
            "messageBody": "There will be more types of request, in such cases, if-else method is\nless readable as compared to switch method.\n\nChange the conditioning method to switch method makes the code cleaner.\n\nAs a result, let\u0027s condition on command\u0027s request and set actions and\nfeedback for each case respectively.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 3
              }
            }
          },
          {
            "hash": "cd308560e2683302762441b94e9ae1edcec325d4",
            "messageTitle": "Change constructors and methods for command class and its subclasses",
            "messageBody": "Some content in the command class and its subclasses appear to be\nredundant. The getContent() method can be unified.\n\nIn light of this, let\u0027s\n* Change the plain userInput attribute of Command object to a more\nmeaningful content attribute\n* Modify the constructor of Command class to initialize its content to\nempty string and let ListCommand inherit this constructor\n* Modify the constructor of other subclasses to initialize their content\nto the proper content which excludes command keywords\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 11,
                "deletions": 33
              }
            }
          },
          {
            "hash": "8186d86ecc55ff3a93998a100cf110eec10b2c69",
            "messageTitle": "Change the parameter in switch method",
            "messageBody": "Some user input have more than 1 word, with first word as keyword and\nthe rest being the content assoicated with the command\n\nIn light of this, let\u0027s\n* split the user inputs into an array of string\n* mark the first word as commandWord\n* identify the correct type of command based on commandWord\n* return the resultant command and its associate content\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 12,
                "deletions": 5
              }
            }
          },
          {
            "hash": "5b008f9de884569b50629464e1d2facde366e706",
            "messageTitle": "Add attribute isDone in Task class",
            "messageBody": "A status for the task is needed for the bot\u0027s requirement. Operations\non the status involves marking the task as done.\n\nIn light of this, let\u0027s:\n* create the new attribute isDone\n* add isDoneTask() and complete() methods to update the task\u0027s status\nand display the status\n* modify the toString() method to include the status information into\nthe string displayed\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 34,
                "deletions": 3
              }
            }
          },
          {
            "hash": "fb5bd05f2b58cca67c466dacdee44b40a3fccb8b",
            "messageTitle": "Enable update of task status and extraction of task by id in TaskList",
            "messageBody": "We need to the get task from the TaskList object and update it in the\nlist.\n\nIn light of this, let\u0027s:\n* Add a getTaskById() method to extract the task via its id\n* Add a markAsDone() method to update the task status in the list\n* Add a generateFeedbackById() method to send a feedback to inform the\nuser that task has been done\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 43,
                "deletions": 5
              }
            }
          },
          {
            "hash": "1e26dd0adf9921575ad96fec6811d72108bd5ce6",
            "messageTitle": "Add DoneCommand class",
            "messageBody": "Handle the \"done x\" command by creating a new class for this type of\ncommand, send the request as \"update\" for agent to handle x-th task.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 0
              }
            }
          },
          {
            "hash": "556cdc70a52a5d3f8ff1713d57b1f41feb316827",
            "messageTitle": "Complete Level-3",
            "messageBody": "",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 3,
                "deletions": 0
              },
              "java": {
                "insertions": 2,
                "deletions": 0
              }
            }
          },
          {
            "hash": "aa0e02e3958bdef3f41c605ded1e77239454881e",
            "messageTitle": "Add cases in CommandReader, generate more detailed content",
            "messageBody": "There are more types of command, and content each input contains becomes\nmore versatile.\n\nIn light of this, let\u0027s:\n* add case for each new command \"todo\", \"deadline\" and \"event\"\nrespectively\n* extract the non-commandWord content from user input via a function\ngenerateContent()\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 20,
                "deletions": 2
              }
            }
          },
          {
            "hash": "fabd9c5ac14ec62b64b6c3b077c9af07e77bfc2c",
            "messageTitle": "Add notation for generateContent() function",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 0
              }
            }
          },
          {
            "hash": "c3a67871e20824d430044bdf370b6a06da5cb0c8",
            "messageTitle": "Handle the 3 subtypes of Task class",
            "messageBody": "There are many classes related to tasks. There are more attributes\nin the 3 subclasses, making their constructor and toString() method to\nvary from original Task class. The feedback generation in TaskList looks\nmore reasonable if it is done in commandAgent.\n\nLet\u0027s:\n* create a package task to contain all the Task-related classes\n* modify the constructor and toString() methods in Deadline, Event, Todo\nclasses\n* add a getSize() method in TaskList to calculate size of the list\n* remove the generateFeedbackById() method in TaskList\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 84,
                "deletions": 12
              }
            }
          },
          {
            "hash": "97d3956a0ba47363cb6c08604211596a5145a56c",
            "messageTitle": "Modify code to comply with code style",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 25,
                "deletions": 24
              }
            }
          },
          {
            "hash": "c586f66131187a63bbab3d5e69c37122befedd9e",
            "messageTitle": "Clear up DukeBuffer",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 17
              }
            }
          },
          {
            "hash": "b08376cf028800f922d577f490196ba45df4926e",
            "messageTitle": "Create new command subclasses",
            "messageBody": "The event/todo/deadline commands are particularly the subclass of\nAddCommand which creates a task. Their content will have the task name,\nsome even have the schedule. Different content extraction and handling\nmethod are needed.\n\nIn light of this, let\u0027s:\n* create 3 subclasses of AddCommand\n* modify the getContent() method in each command class so that\nrespective content are stored in a list of strings\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 85,
                "deletions": 6
              }
            }
          },
          {
            "hash": "12e288e89a06cd9bd150ae8254dc15b576a3abb2",
            "messageTitle": "Add feedback generation methods and restructure handleCommand() code",
            "messageBody": "The feedback displayed can be decorated to look better. Feedback\ngeneration should be done in this class. The creation of a task can also\nbe done in the agent as command should not have task creation ability.\n\nIn light of this, let\u0027s create feedback generation methods for each of\nthe creation/update/retrieval. Make sure the taskList is updated within\nthe handleCommand() method and respective feedback are produced for each\ncommand request.\n",
            "tags": [
              "Level-4"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 73,
                "deletions": 15
              }
            }
          },
          {
            "hash": "53132fc2160797479a7cc983dbc8782aa9772b64",
            "messageTitle": "Deadline: the identifier in toString() should be D not E",
            "messageBody": "Let\u0027s fix the bug by changing the label to D\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "f9aa4611425cb0ca6f231951120073a9773ef959",
            "messageTitle": "Edit test code and fix bug in Deadline class after test",
            "messageBody": "Another issue detected after test shows \"at\" is used in Deadline class.\n\nThe solution is to just change the \"at\" to \"by\".\n",
            "tags": [
              "A-TextUiTesting"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 15,
                "deletions": 10
              },
              "java": {
                "insertions": 1,
                "deletions": 1
              },
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "aedbadc106ce006f60e11dd352b34b325abeca87",
            "messageTitle": "Adjust code to corret style and add DukeException",
            "messageBody": "Some parts of the code still have minor styling issue.\nCreat an Exception class DukeException to represents some\ncommand-related issues. But all the command classes are in the command\npackage. Cannot directly access outer package method. Also the\nDukeException needs to be handled at the right place.\n\nTo fix the issues, let\u0027s:\n* create a package for exception classes, called \"exception\"\n* handle the DukeException in commandRead class, which produces a\nErrorCommand object upon catching the exception\n* handle the ErrorCommand by outputing its error message as the content\nin the command\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 84,
                "deletions": 23
              }
            }
          },
          {
            "hash": "e79d5ed12ffa3c64e6f7ee3bffd17f2c46ad9517",
            "messageTitle": "Identify various errors in command",
            "messageBody": "The todo/deadline/event command produces error if command is missing\ntask name or schedule or the delimiter like /by and /at are not\ndetected.\n\nTo make these error handling work, let\u0027s detect the error in\nCommandReader when we construct the command.\n",
            "tags": [
              "Level-5"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 56,
                "deletions": 20
              }
            }
          },
          {
            "hash": "3bd8339b040581e07abf9aefcfa149a4da61e28d",
            "messageTitle": "Wrap all the code under a duke package",
            "messageBody": "Have a package wrapping around the entire source code helps class from\ninner packages to access the methods/attribute of classes from outer\npackages easily.\n\nIn light of this, let\u0027s create a duke folder to contain the command and\ntask packages, as well as Duke, DukeBuffer, DukeException, CommmandAgent\nand CommandReader class.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 19,
                "deletions": 17
              },
              "java": {
                "insertions": 121,
                "deletions": 97
              },
              "md": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "a2d20cefeb5f2e150908bb8a4ff28f18412a270e",
            "messageTitle": "Modify comments in all .java files",
            "messageBody": "Upon refactoring of code into the duke package, some comments are\nautomatically modified by intellij, which is undesriable.\n\nLet\u0027s undo these modification by deleting the \"duke.\" prefix in the\ncomment sections of each method/class.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 14,
                "deletions": 17
              }
            }
          },
          {
            "hash": "13a573686c7d2e1597a6c52a96d22f4f6390a86c",
            "messageTitle": "Handle some left-over modification and create delete command handling",
            "messageBody": "There are some comments whose \"duke.\" prefix are not removed.\nWork on level-6, create the scenario for \"delete\" command.\n\nLet\u0027s clean up the code first, and create a DeleteCommand with Error\nHandling behaviour. Add a case in CommandReader to parse the delete\ninput as well.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 50,
                "deletions": 15
              }
            }
          },
          {
            "hash": "56c4032f5f6356cd9b84839607f3c8fefe91a23e",
            "messageTitle": "Handle delete task logic and feedback generation",
            "messageBody": "The task needs to be deleted should be shown in feedback. The tasklist\nneeds to send the task to CommandAgent before it gets deleted.\n\nLet\u0027s create a case for deletion of the task by its index, keep a copy\nof the task before it gets deleted in the taskList. Use the copy and\nthe updated List for feedback generation.\n",
            "tags": [
              "Level-6"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 58,
                "deletions": 23
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-16",
        "commitResults": [
          {
            "hash": "d5c02bfb752c48a295e48277a7ed4e778586d126",
            "messageTitle": "Resolve sad face symbol\u0027s imcompatability with GBK encoding",
            "messageBody": "The sad face in the error handling messge cause compile issue as the\nterminal cannot resolve the symbol. There are some leftover \"duke.\"\nprefix in EXPECTED.TXT which causes test failure.\n\nLet\u0027s remove the sad faces in the error message for now and clean up\nthe EXPECTED.TXT, and enforce file encoding in runtest.bat to UTF-8.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 0
              },
              "java": {
                "insertions": 12,
                "deletions": 12
              },
              "bat": {
                "insertions": 2,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-17",
        "commitResults": [
          {
            "hash": "4b372baeee21bd6637814c3066049c10de984cb6",
            "messageTitle": "Change isExit() method in Command to static method in ExitCommand",
            "messageBody": "The isExit() method examines the content of the command, which will\ndoes not use a getter. I consider the check of Exit command more natural\nwhen it is a method always associated with the ExitCommand Class.\n\nHence, let\u0027s remove the isExit() command in Command class and replace\nits functionality with a static method isExitCommand() in ExitCommand\nclass. Replace the exit condition in do-while loop in Duke class with\nthe isExitCommand check as well.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 20,
                "deletions": 20
              },
              "java": {
                "insertions": 7,
                "deletions": 10
              },
              "bat": {
                "insertions": 3,
                "deletions": 1
              },
              "sh": {
                "insertions": 8,
                "deletions": 1
              }
            }
          },
          {
            "hash": "20e8a58000d6da134ecfad2e54ebaa17a45ac5ff",
            "messageTitle": "Modify the Task class to an abstract class",
            "messageBody": "The Task class is separated into 3 different types, a user input should\nalways specify one of the 3 types. Hence it is unlikely to create a new\nTask object directly.\n\nIn light of this, let\u0027s make the Task class an abstract class, change\nthe complete() method in Task class to abstract method as well.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 7
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-20",
        "commitResults": [
          {
            "hash": "f9cd086465b4c03e7a5719e532bcc974126c7c49",
            "messageTitle": "Add formating function for Task objects and TaskList",
            "messageBody": "The task representation in the data/duke.txt file has a specific format.\nAdditional functions are needed to convert each task in the task list\ninto that format.\n\nIn light of this, let\u0027s:\n* create a format() method for Task objects and implement them in each\nof the Deadline/Todo/Event subclasses based on their attributes.\n* create a formatTaskList() method for the taskList to format all the\ntasks in the list.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 38,
                "deletions": 0
              }
            }
          },
          {
            "hash": "966a5f381b72b8f6728dc99dfa6e93b1ab542746",
            "messageTitle": "Create a Storage class to manage the task data I/O",
            "messageBody": "The Storage class needs to handle save and load operations on data.\nWhen the file/folder to store the task data are not present, the class\nalso need to detect them and create the correct file/folder immediately\nupon loading of data file.\n\nIn light of this, let\u0027s:\n* build a constructor for Storage class to store the file\u0027s folder path\nand file path in relative path format\n* create a createPath() method to create new path for data storage\nif current path specified is not detected\n* create save() and load() methods for data file reading/writing\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 105,
                "deletions": 0
              }
            }
          },
          {
            "hash": "f66c4dd656da9aa44d9c339bf7bdad96a2a662b7",
            "messageTitle": "Add Storage object to relevant classes",
            "messageBody": "We need to initialize the storage in Duke, and let the CommandAgent\nto handle the I/O of task data via Storage object.\n\nIn light of this, let\u0027s:\n* Add an instance of Storage into Duke, pass the instance into a\ncommantAgent\n* Add the data I/O operation after each command in the agent via the\nStorage class methods\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 3,
                "deletions": 0
              },
              "java": {
                "insertions": 26,
                "deletions": 5
              }
            }
          },
          {
            "hash": "411cd82c209e8fc2d4ef21c59aa7b1179bd6c774",
            "messageTitle": "Convert schedule data type from String to LocalDate",
            "messageBody": "The schedule data needs to be converted from plain string to LocalDate\ndata, respective parser and formatter to output the LocalDate as String\nare needed.\n\nIn light of this, let\u0027s:\n* modify the constructors in each task subclasses to take in LocalDate\ndata\n* Allow the LocalDate data to be formatted into string in these classes\n* In Storage class, parse the tasks schedule in duke.txt file from\nString type to LocalDate type\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 4,
                "deletions": 3
              },
              "java": {
                "insertions": 35,
                "deletions": 9
              }
            }
          },
          {
            "hash": "04ad58c37a6545765ed9357a5c65536463ca5fbb",
            "messageTitle": "Removal of unused files and renaming of CommandReader.java",
            "messageBody": "After reading the project requirement, it becomes clear that DukeBuffer\nare now simply the TaskList, hence it provides little utility. The\nErrorCommand class can be removed as the error handling in the code\nbecomes more fluent. The CommandReader class should be renamed as Parser\nas the level-9 requirement suggests.\n\nIn light of this, let\u0027s remove the 2 files and rename the CommandReader\nclass into Parser class, with its parse() method turned into static to\nmake Parser a utility class.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 38
              }
            }
          },
          {
            "hash": "68047937b3f894bcf9e4e18a22f0e3f3a6b196c3",
            "messageTitle": "Re-organize the code logic to follow the standard in level-9",
            "messageBody": "The main logic in Duke.java file provides a sample reference for the\nlogic of the chat bot. We can follow this logic standard and adjust\nour main logic correspondingly.\n\nIn light of this, let\u0027s:\n* create a new class, Ui, for message output\n* modify the Storage constructor to allow it to take in the data file\npath\n* tweak the Parser class to better handle exceptions when reading\ncommand\n* retrieve the old isExit() checking method via command content\n* rename the feedback into response for the common request-response\nstyling\n* modify the Duke.java class to fit the sample code in level-9\ninstruction\n",
            "tags": [
              "A-MoreOOP"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 0
              },
              "java": {
                "insertions": 134,
                "deletions": 71
              }
            }
          },
          {
            "hash": "331df3221ae639cfa1668d8b8051ba69d90f0eed",
            "messageTitle": "Current packages maintenance and JavaDoc supplementation",
            "messageBody": "The current packages are rather complete. Some minor issues like the\nEvent and Deadline constructor with schedule parameter in the string\nrepresentation can be removed as LocalDate type can be created when\nthe task is created. Some public method\u0027s JavaDoc can also be added.\n\nLet\u0027s drop the constructor mentioned above, and add in a few more\nJavaDocs for public methods.\n",
            "tags": [
              "A-Packages"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 25,
                "deletions": 14
              }
            }
          },
          {
            "hash": "9fe2c6ecec1e0bae034ddf2f3ff232edf9d29cc9",
            "messageTitle": "Setup JUnit test and created relevant directories",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 18,
                "deletions": 0
              }
            }
          },
          {
            "hash": "c2f0475b4fc14b1ce083116026e1ee834b590604",
            "messageTitle": "Add test cases for all Task subclasses methods",
            "messageBody": "The 3 classes have relatively straight-forward methods to test on.\nMore test on complicated classes like Command classes and Storage\nwill come up later.\n",
            "tags": [
              "A-JUnit"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 3,
                "deletions": 3
              },
              "java": {
                "insertions": 91,
                "deletions": 6
              }
            }
          },
          {
            "hash": "d80917e9019779b74613ab5dc1cd38174b1e9a33",
            "messageTitle": "Adjust printTask() string output",
            "messageBody": "The response header should be part of the response generated from\nCommandAgent. TaskList should only output a list of task in printTask\nmethod.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 4,
                "deletions": 4
              }
            }
          },
          {
            "hash": "b23bb1479ff6c03428ce50b2c7b6ebe1f431bb75",
            "messageTitle": "Add Find command logic",
            "messageBody": "Only allow 1 word as keyword per finding. Test has some bug to be fixed.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 29,
                "deletions": 28
              },
              "java": {
                "insertions": 92,
                "deletions": 29
              }
            }
          },
          {
            "hash": "d9c32fa1d198e28e4efc20d4d6d334fe8865510f",
            "messageTitle": "Adjust automated testing scripts",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 21,
                "deletions": 20
              },
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "0df2627e4d2d3b602614573460f1a59f35b9a2ae",
            "messageTitle": "Fix error message parsing issue",
            "messageBody": "Found the root cause for error parsing the unhappy face in error\nmessages. Add in more exception handling after find() function is\ncreated, some tasks are already entered, some tasks are already done,\netc...\n\nIn light of this, let\u0027s:\n* get the unhappy face back into the exception messages\n* add exception handling for entering recorded tasks and complete done\ntasks\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 8,
                "deletions": 1
              },
              "java": {
                "insertions": 49,
                "deletions": 37
              },
              "bat": {
                "insertions": 2,
                "deletions": 4
              }
            }
          },
          {
            "hash": "881035403423a4d21214be79ac0f17e06e238c1d",
            "messageTitle": "Edit JavaDoc in the project",
            "messageBody": "Modify the comments in JavaDoc to make them look logical.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 41,
                "deletions": 10
              }
            }
          },
          {
            "hash": "44c2ef0f3d4a3902f7093353d1c50209d8b12a51",
            "messageTitle": "Modify JavaDoc comments to stick to coding style",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 124,
                "deletions": 164
              }
            }
          },
          {
            "hash": "7d8ce4e6d616db09506f31d977e3e42233777dae",
            "messageTitle": "Examine coding style and follow the coding standard",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 4
              }
            }
          },
          {
            "hash": "06105f16f46d79e33f3592917a571c66af154087",
            "messageTitle": "Edit JavaDoc in some methods",
            "messageBody": "Some methods\u0027 JavaDoc are not clear enough. A few methods related\nto find command do not have JavaDoc.\n\nHence, let\u0027s add the JavaDoc for those missing, and make the annotation\nclearer for these methods\u0027 JavaDoc.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 35,
                "deletions": 16
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "Criss-Wang": {
      "java": 1183,
      "md": 2,
      "fxml": 0,
      "sh": 8,
      "bat": 5,
      "gradle": 0,
      "txt": 42
    }
  },
  "authorContributionVariance": {
    "Criss-Wang": 438769.28
  },
  "authorDisplayNameMap": {
    "Criss-Wang": "WANG..NLIN"
  }
}
