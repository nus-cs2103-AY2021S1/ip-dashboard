[
  {
    "path": "src/main/java/DateManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class DateManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static String[] DATE_INPUT_FORMATS \u003d {\"invalid\", \"dd-MM-yyyy\", \"dd/MM/yyyy\", \"dd-MM-yyyy kkmm\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \"dd/MM/yyyy kkmm\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static String[] DATE_OUTPUT_FORMATS \u003d {\"MMM dd yyyy\", \"MMM dd yyyy\u0027,\u0027 hh:mma\"};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // returns Date object from valid string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Optional\u003cDate\u003e getDate(String str) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (getDateFormat(str).equals(DATE_INPUT_FORMATS[0])) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // returns empty Optional if str is not of valid format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Optional\u003cDate\u003e empty \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return empty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                SimpleDateFormat formatter \u003d new SimpleDateFormat(getDateFormat(str));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return Optional.of(formatter.parse(str));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDateAsString(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // assumes tjat str input has valid date format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // input checks done in Deadline and Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        SimpleDateFormat sdf;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (getDateFormat(str).equals(DATE_INPUT_FORMATS[1]) ||"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                getDateFormat(str).equals(DATE_INPUT_FORMATS[2])) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sdf \u003d new SimpleDateFormat(DATE_OUTPUT_FORMATS[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sdf \u003d new SimpleDateFormat(DATE_OUTPUT_FORMATS[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sdf.format(getDate(str).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // return format of date String or invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDateFormat(String str) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (str.length() !\u003d DATE_INPUT_FORMATS[1].length() \u0026\u0026"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                str.length() !\u003d DATE_INPUT_FORMATS[3].length()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // input string has invalid format if it is not of correct length"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (str.length() \u003d\u003d DATE_INPUT_FORMATS[1].length()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // either of format dd-mm-yyyy or dd/mm/yyyy"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (str.substring(2, 3).equals(\"-\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd-mm-yyyy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(date)) ? DATE_INPUT_FORMATS[1] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (str.substring(2, 3).equals(\"/\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd/mm/yyyy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(date)) ? DATE_INPUT_FORMATS[2] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // invalid format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: dd-mm-yyyy hhhh or dd/mm/yyyy hhhh"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (str.substring(2, 3).equals(\"-\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd-mm-yyyy hhhh"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String hrs \u003d str.split(\" \")[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\" \")[0].split(\"-\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] dateTime \u003d new String[4];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // assign values to dateTime array"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    dateTime[i] \u003d date[i];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                dateTime[3] \u003d hrs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(dateTime)) ? DATE_INPUT_FORMATS[3] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (str.substring(2, 3).equals(\"/\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // case: dd/mm/yyyy hhhh"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String hrs \u003d str.split(\" \")[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] date \u003d str.split(\" \")[0].split(\"/\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] dateTime \u003d new String[4];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // assign values to dateTime array"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    dateTime[i] \u003d date[i];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                dateTime[3] \u003d hrs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return (isValidDateNumerals(dateTime)) ? DATE_INPUT_FORMATS[4] : DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // invalid format"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                return DATE_INPUT_FORMATS[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // checks validity integers in String representation of date"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private boolean isValidDateNumerals(String[] arr) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[0]) \u003e 31) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if day \u003e 31"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[1]) \u003e 12) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if month \u003e 12"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (Integer.parseInt(arr[2]) \u003c 2020) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // invalid if year \u003c 2020"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (arr.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case dd mm yyyy hhhh"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (Integer.parseInt(arr[3]) \u003e 2359 || Integer.parseInt(arr[3]) \u003c 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 126
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Optional\u003cDate\u003e optDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private DateManager dateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.dateManager \u003d new DateManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.optDate \u003d dateManager.getDate(deadline);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[D]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!optDate.isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + this.deadline + \")\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + dateManager.getDateAsString(deadline) + \")\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \"_________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static String[] COMMANDS \u003d {\"todo\", \"deadline\", \"event\", \"list\", \"done\", \"bye\", \"delete\"};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static ArrayList\u003cTask\u003e LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static SaveDataManager SDM \u003d new SaveDataManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Duke.LIST \u003d SDM.loadData();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        startUpMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        programLoop();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        SDM.saveData(Duke.LIST);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Prints start up message upon running"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static void startUpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Main program functionality"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static void programLoop() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (command[0].toLowerCase().equals(Duke.COMMANDS[5])) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // exit program if user inputs \"bye\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (command[0].toLowerCase().equals(\"clear\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // clears task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Duke.LIST.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (promptConfirm(sc)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Task list cleared!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (command[0].toLowerCase().equals(Duke.COMMANDS[3])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // prints all elements of LIST if not empty"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (Duke.LIST.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    printList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (command[0].toLowerCase().equals(Duke.COMMANDS[4])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // marks task at specified index as done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    markDone(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Please enter valid input\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } catch (IndexOutOfBoundsException obe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Please enter valid index\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (command[0].toLowerCase().equals(Duke.COMMANDS[6])) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // delete Task from LIST"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    deleteTask(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Please enter valid input\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } catch (IndexOutOfBoundsException obe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Please enter valid index\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else if (Arrays.asList(Duke.COMMANDS).contains(command[0].toLowerCase())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // add Task to LIST"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    addTask(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    System.out.println(\"Please enter valid input\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // invalid inputs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                System.out.println(\"Sorry, I don\u0027t understand! Please enter valid input.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } // end while loop"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void markDone(String input) throws IndexOutOfBoundsException, InvalidInputException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"done\" (missing index)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Task index not specified\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (input.split(\" \").length \u003e 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \u003e 2 strings separated by \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"done 1 2 3\", \"done 12 text\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Sorry, command unclear! Please specify only one index\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // parse int for index of task to be marked as done"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            index \u003d Integer.valueOf(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: Invalid integer"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"done abc\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Please enter a valid integer\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task current \u003d Duke.LIST.get(index - 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        current.completeTask();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Nice! I have marked this task as done:\\n\\t\" + current.printTask());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void deleteTask(String input) throws IndexOutOfBoundsException, InvalidInputException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (input.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \"delete\" (missing index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Task index not specified\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (input.split(\" \").length \u003e 2) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: \u003e 2 strings separated by \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"delete 1 2 3\", \"delete 12 text\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Sorry, command unclear! Please specify only one index\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // parse int for index of task to be deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            index \u003d Integer.valueOf(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // throws exception if invalid input format: Invalid integer"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // e.g \"delete abc\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new InvalidInputException(\"Please enter a valid integer\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task current \u003d Duke.LIST.remove(index - 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Okay! I have removed this task:\\n\\t\" + current.printTask());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Now you have \" + Duke.LIST.size() + \" tasks in your list\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Adds Task to LIST. Checks inputs and throws exceptions for invalid inputs"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void addTask(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String[] splitSpace \u003d input.split(\" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (splitSpace[0].toLowerCase().equals(Duke.COMMANDS[0])) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: todo"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (splitSpace.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: \"todo\" (missing task name)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Todo command incomplete\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            for (String str : splitSpace) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (str.toLowerCase().equals(Duke.COMMANDS[0])) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    sb.append(str);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end for loop"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new ToDo(sb.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (splitSpace[0].toLowerCase().equals(Duke.COMMANDS[1])) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: deadline"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (!input.contains(\" /by\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: does not contain \"/by\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Deadline command is missing \\\"/by\\\" keyword\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (input.split(\" /\")[0].toLowerCase().equals(Duke.COMMANDS[1])) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: \"deadline /by taskDeadline\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Missing deadline task description\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (input.split(\" \")[(input.split(\" \").length - 1)].equals(\"/by\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: \"deadline taskName /by\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Missing task deadline\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String name \u003d input.split(\"/by\")[0].trim().substring(9);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String deadline \u003d input.split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new Deadline(name, deadline);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // case: event"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (!input.contains(\" /at\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: does not contain \"/at\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Event command is missing \\\"/at\\\" keyword\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (input.split(\" /\")[0].toLowerCase().equals(Duke.COMMANDS[2])) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: \"event /at eventTime\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Missing event task description\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (input.split(\" \")[(input.split(\" \").length - 1)].equals(\"/at\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                // throws exception if invalid input format: \"event eventName /at\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                throw new InvalidInputException(\"Missing event date\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String name \u003d input.split(\"/at\")[0].trim().substring(6);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String time \u003d input.split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            task \u003d new Event(name, time);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        Duke.LIST.add(task);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Got it! Task added to list.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"\\t\" + task.printTask());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Now you have \" + Duke.LIST.size() + \" tasks in your list.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Prints all Tasks in an ordered list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static void printList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Here are your tasks: \");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        for (int i \u003d 0; i \u003c Duke.LIST.size(); i++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            System.out.println(i + 1 + \". \" + Duke.LIST.get(i).printTask());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static boolean promptConfirm(Scanner sc) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(\"Are you sure? (Y/N)\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        System.out.println(Duke.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return input.toLowerCase().equals(\"y\") ? true : false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 231,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Optional\u003cDate\u003e optTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private DateManager dateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Event(String name, String time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.dateManager \u003d new DateManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.optTime \u003d dateManager.getDate(time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[E]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!optTime.isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (at: \" + this.time + \")\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            sb.append(\" (by: \" + dateManager.getDateAsString(time) + \")\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 34
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 5
    }
  },
  {
    "path": "src/main/java/SaveDataManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class SaveDataManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Saves current Task list onto a text file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            File file \u003d new File(\"../savedata/data.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // if file doesn\u0027t exists, then create it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    ToDo currentTask \u003d (ToDo) task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"t \" + currentTask.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Deadline currentTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"d \" + currentTask.getName() + \" \" + currentTask.getDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    Event currentTask \u003d (Event) task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\"e \" + currentTask.getName() + \" \" + currentTask.getTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (task.isDone()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\" done\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    writer.write(\" incomplete\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end for loop"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Returns ArrayList of Tasks from savedata text file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(\"../savedata/data.txt\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            while ((currentLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                String[] line \u003d currentLine.split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Task newTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (line[0].equals(\"t\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case ToDo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new ToDo(line[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else if (line[0].equals(\"d\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case Deadline"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new Deadline(line[1], line[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    // case event"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask \u003d new Event(line[1], line[2]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                if (line[line.length - 1].equals(\"done\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    newTask.completeTask();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            } // end while loop"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // returns empty ArrayList if savedata text file not found"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 90
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Sets done to true"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Returns name of Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Returns boolean value of done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return this.done;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    // Returns a tick or cross (depending on done value) and name of task as String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            out.append(\"[/] \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            out.append(\"[X] \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        out.append(this.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 38
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(\"[T]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        sb.append(super.printTask());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline return book /by 12/12/2020 1400"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event group meeting /at 11-12-2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo join a club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event /at 12-11-2020 1545"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event watch netflix /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "event watch netflix /at 12/12/2020 1545"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline /by Monday"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline assignment /by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deadline assignment /by Monday"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 22
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 1,
      "-": 20
    }
  }
]
