[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 27,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[D][✓] return books (by: May 20 2000)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[E][✘] eat dinner with family (at: Aug 18 2000, 06:18PM)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[T][✓] eat fruits"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 3
    }
  },
  {
    "path": "data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[T][✗] read book"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 1
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String[] commandArr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Command constructor specifying CommandType and command array."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param commandType"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param commandArr String array which has remove spaces from string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Command(CommandType commandType, String[] commandArr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Remove first string in the string array."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param arr string array"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return string array"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String[] removeFirst(String[] arr) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert(arr.length \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempArr \u003d new String[arr.length];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length - 1; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tempArr[i] \u003d arr[i + 1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tempArr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Remove the word and after the word from string array."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param arr string array"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param word string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return string array before the word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String[] removeAfterWord(String[] arr, String word) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert(arr.length \u003e 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] temp \u003d new String[arr.length];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (arr[i].equals(word)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                temp[i] \u003d arr[i];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Keep those string after the word into a string array and return."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param arr original string array"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param word string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return string array"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String[] keepAfterWord(String[] arr, String word) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert(arr.length \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] temp \u003d new String[arr.length];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // find position of the word"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (arr[i].equals(word)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                counter \u003d i;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        counter++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; (counter + i) \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            temp[i] \u003d arr[counter + i];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Join all string in the array into a single string with spacing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param arr string array"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String joinString(String[] arr) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert(arr.length \u003e 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String text \u003d arr[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length \u0026\u0026 arr[i] !\u003d null; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                text \u003d text + \" \" + arr[i];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Create a Todo task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidTodoDescripDukeException"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Task createTodo() throws InvalidTodoDescripDukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidTodoDescripDukeException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Todo(joinString(modifiedCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Create a Deadline task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidDeadlineDescripDukeException"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Task createDeadline() throws InvalidDeadlineDescripDukeException, ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidDeadlineDescripDukeException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] upper \u003d removeAfterWord(modifiedCommand, \"/by\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] lower \u003d keepAfterWord(modifiedCommand, \"/by\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDate date \u003d Parser.changeDate(lower);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Deadline(joinString(upper), date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Create an Event task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidEventDescripDukeException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Task createEvent() throws InvalidEventDescripDukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidEventDescripDukeException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] upper \u003d removeAfterWord(modifiedCommand, \"/at\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] lower \u003d keepAfterWord(modifiedCommand, \"/at\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDateTime dateAndTime \u003d Parser.changeDateAndTime(lower);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Event(joinString(upper), dateAndTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Search keyword from all the Tasks\u0027 description in the TaskList given and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * return arraylist of task that match the keyword."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param keyword string"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ArrayList\u003cTask\u003e searchKeyWord(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tempTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (Task task: tasks.tasks) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (task.description.matches(\"(.*)\" + keyword + \"(.*)\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                tempTasks.add(task);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tempTasks;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Execute Command and return output from Ui."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidTodoDescripDukeException"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidDeadlineDescripDukeException"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidEventDescripDukeException"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidFirstDukeException"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidTodoDescripDukeException,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            InvalidDeadlineDescripDukeException, InvalidEventDescripDukeException,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            InvalidFirstDukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case PRINT_ALL_TASKS:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAllTask(tasks);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case EXIT_DUKE:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.closeDuke();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case MARK_AS_DONE: {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            int counter \u003d Integer.parseInt(commandArr[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.getTask(counter - 1).markAsDone();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.markAsDone(tasks.getTask(counter - 1));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case DELETE_TASK: {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            int counter \u003d Integer.parseInt(commandArr[1]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String output;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            output \u003d ui.deleteTask(tasks.getTask(counter - 1), tasks.size() - 1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.removeTask(counter - 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ADD_TODO:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            Task todoTask \u003d createTodo();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(todoTask);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAddedTask(todoTask, tasks.size());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ADD_DEADLINE:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            Task deadlineTask \u003d createDeadline();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(deadlineTask);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAddedTask(deadlineTask, tasks.size());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            Task eventTask \u003d createEvent();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(eventTask);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAddedTask(eventTask, tasks.size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case FIND_TASK:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String keyword \u003d joinString(removeFirst(commandArr));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            ArrayList\u003cTask\u003e tempTasks \u003d searchKeyWord(tasks, keyword);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printSearchedTask(tempTasks);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case SORT_BY_DATE:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.sortByDueDateTime();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAllTask(tasks);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case SORT_BY_DESCRIPTION:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.sortByDescription();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.printAllTask(tasks);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return true if the command is \"bye\". Else false."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return commandType.equals(CommandType.EXIT_DUKE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 254
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    EXIT_DUKE, PRINT_ALL_TASKS, ADD_TODO, ADD_DEADLINE,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    ADD_EVENT, MARK_AS_DONE, DELETE_TASK, FIND_TASK, SORT_BY_DATE, SORT_BY_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 4
    }
  },
  {
    "path": "src/main/java/DateComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return task1.getDueDateTime().compareTo(task2.getDueDateTime());"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// a task that need to specify a date to be done before the date"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected LocalDate deadlineDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Deadline construction taking description and deadline date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param deadlineDate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Deadline(String description, LocalDate deadlineDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Deadline constructor taking boolean is done, description and deadline date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param isDone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param deadlineDate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDate deadlineDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDateTime getDueDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return LocalDateTime.of(deadlineDate, LocalTime.MAX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDate getDeadlineDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void setDeadlineDate(LocalDate deadlineDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + deadlineDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 50
    }
  },
  {
    "path": "src/main/java/DescripComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DescripComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return (int) (task1.getDescription().compareTo(task2.getDescription()));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 8
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 59
    }
  },
  {
    "path": "src/main/java/DueDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public interface DueDateTime {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDateTime getDueDateTime();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Duke, a Personal Assistant Chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * @author Wayne Tan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * @since Aug 2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Duke constructor to initialise the Storage, Ui and TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(\"Duke is started!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Starts to run Duke by showing welcome. Uses Ui to scan input. Uses Parser to parse the input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Execute Command. If the command is \u0027bye\u0027, loop terminates."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * You should have your own function to generate a response to user input. Replace this stub with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * your completed method."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 70,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// a task that need to specify exact date and time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected LocalDateTime eventDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Event constructor taking description and event date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param eventDateTime"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Event(String description, LocalDateTime eventDateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.eventDateTime \u003d eventDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Event constructor taking boolean isdone, description and event date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param isDone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param eventDateTime"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Event(Boolean isDone, String description, LocalDateTime eventDateTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.eventDateTime \u003d eventDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDateTime getEventDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return eventDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void setEventDateTime(LocalDateTime eventDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.eventDateTime \u003d eventDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDateTime getDueDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return eventDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + eventDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 47
    }
  },
  {
    "path": "src/main/java/InvalidDeadlineDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A kind of DukeException which specify invalid deadline description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidDeadlineDescripDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidDeadlineDescripDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\"OOPS!!! The description of a deadline is invalid.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9
    }
  },
  {
    "path": "src/main/java/InvalidEventDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A kind of DukeException which specify invalid event description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidEventDescripDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidEventDescripDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9
    }
  },
  {
    "path": "src/main/java/InvalidFirstDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A kind of DukeException which specifies invalid command input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidFirstDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidFirstDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9
    }
  },
  {
    "path": "src/main/java/InvalidTodoDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A kind of DukeException which specify invalid Todo description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidTodoDescripDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidTodoDescripDukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 9
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/java.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/javaduke.jpg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Initialize dialog container."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String response \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 56
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Parser parses a string input and turn it into a Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static final List\u003cString\u003e formatStringsLocalDate \u003d Arrays.asList(\"M/y\", \"d/M/y\", \"M-y\", \"d-M-y\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static final List\u003cString\u003e formatStringsLocalDateTime \u003d Arrays.asList(\"d-M-y HH:mm\", \"d/M/y HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parse date and time string to LocalDateTime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param dateTimeString string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return LocalDateTime used by Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static LocalDateTime tryParseLocalDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (String formatString : formatStringsLocalDateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                LocalDateTime localDateAndTime \u003d LocalDateTime.parse(dateTimeString, formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                return localDateAndTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parse date string to LocalDate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param dateString string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return LocalDate used by Event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static LocalDate tryParseLocalDate(String dateString) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (String formatString : formatStringsLocalDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                LocalDate localDate \u003d LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                return localDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Change date and time array into LocalDateTime."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param dateAndTime String array consist of date as first element and time as second element"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static LocalDateTime changeDateAndTime(String[] dateAndTime) throws NumberFormatException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert (dateAndTime.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String date \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String time \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tryParseLocalDateTime(date + \" \" + time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Change date array into LocalDate."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param dateAndTime String array consist of date as element"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return LocalDate"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static LocalDate changeDate(String[] dateAndTime) throws NumberFormatException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert (dateAndTime.length \u003d\u003d 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String date \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tryParseLocalDate(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parse a string into Command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * If the first letter is not recognised, throws InvalidFirstDukeException."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param fullCommand String"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws InvalidFirstDukeException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidFirstDukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] commandArr \u003d fullCommand.split(\" \"); // split input into string array"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert (commandArr.length \u003e 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        switch (commandArr[0]) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.EXIT_DUKE, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.PRINT_ALL_TASKS, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.MARK_AS_DONE, commandArr);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.DELETE_TASK, commandArr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADD_TODO, commandArr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADD_DEADLINE, commandArr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADD_EVENT, commandArr);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.FIND_TASK, commandArr);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (commandArr[2].equals(\"date\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                command \u003d new Command(CommandType.SORT_BY_DATE, commandArr);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                command \u003d new Command(CommandType.SORT_BY_DESCRIPTION, commandArr);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidFirstDukeException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Testing the format of date and dateTime."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] tempDate \u003d {\"12/2020\"}; // try using date by simpledateformat instead of localDate"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] tempDateTime \u003d {\"24-12-2020\", \"18:00\"};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(Parser.changeDateAndTime(tempDateTime));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(Parser.changeDate(tempDate));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 146
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Storage takes in a file path and read the file to turn it into arraylist of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * It also saves arraylist of Tasks into a file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Storage constructor specifying a file path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Read the given file path and parse each line and added them into ArrayList of Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static ArrayList\u003cTask\u003e readFromFile(String filepath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Scanner s \u003d new Scanner(f, \"UTF-8\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.add(StorageParser.parse(input));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Start loading storage to read file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d readFromFile(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Save the arraylist of Tasks into a file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param taskArr"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void saveToFile(ArrayList\u003cTask\u003e taskArr) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assert (!filePath.isEmpty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File oldFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        oldFile.delete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(newFile, StandardCharsets.UTF_8, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (Task task : taskArr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fileWriter.write(task.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 73
    }
  },
  {
    "path": "src/main/java/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static boolean isDone(String symbol) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return symbol.equals(\"\\u2713\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static Deadline createDeadline(boolean isDone, String[] splitTask) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String organisedDescription \u003d splitTask[1].replaceAll(\" \\\\(by: \", \"|\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .replaceAll(\"\\\\)\", \"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] splitDescription \u003d organisedDescription.split(\"\\\\|\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(splitDescription[1], formatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new Deadline(isDone, splitDescription[0], localDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private static Event createEvent(boolean isDone, String[] splitTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String organisedDescription \u003d splitTask[1].replaceAll(\" \\\\(at: \", \"|\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .replaceAll(\"\\\\)\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] splitDescription \u003d organisedDescription.split(\"\\\\|\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDateTime localDateAndTime \u003d LocalDateTime.parse(splitDescription[1], formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return new Event(isDone, splitDescription[0], localDateAndTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Parse a line of String into Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param input String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static Task parse(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] splitTask \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String typeAndIsDone \u003d splitTask[0].replaceFirst(\"\\\\]\", \"|\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                .replaceAll(\"\\\\[\", \"\").replaceAll(\"\\\\]\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] typeAndIsDoneArr \u003d typeAndIsDone.split(\"\\\\|\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        boolean isDone \u003d isDone(typeAndIsDoneArr[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (typeAndIsDoneArr[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d new Todo(isDone, splitTask[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (typeAndIsDoneArr[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d createDeadline(isDone, splitTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (typeAndIsDoneArr[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d createEvent(isDone, splitTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(\"error in reading input\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Test parsing string into Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(StorageParser.parse(\"[T][✓] read book\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(StorageParser.parse(\"[D][✗] return book (by: Oct 15 2019, 12:00PM)\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 63
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Take each user input as Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Task implements DueDateTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Task Constructor specifying a description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Task Constructor specifying boolean isDone and description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param isDone boolean"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param description String"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return the status of the Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * If the task is done, return ✓; If the task is not done, return ✗."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String ✓ or ✗ symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Mark the Task as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return Task to String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public LocalDateTime getDueDateTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return LocalDateTime.MAX;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 70
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * TaskList stores an ArrayList of Task to be used by Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * TaskList constructor initializing empty ArrayList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * TaskList constructor specifying an ArrayList to be used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Sort TaskList by description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList sortByDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Collections.sort(tasks, new DescripComparator());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Sort TaskList by due date and time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList sortByDueDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Collections.sort(tasks, new DateComparator());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return the number of Tasks saved in TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return a task which occupies in the position of TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param pos int"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return Task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task getTask(int pos) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks.get(pos);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Remove a task which occupies in the position of TaskList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param pos int"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void removeTask(int pos) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.remove(pos);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Add a task into TaskList at the last position."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Test sorting"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tasksArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempDateTime1 \u003d {\"11-09-2020\", \"18:00\"};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempDateTime2 \u003d {\"11-09-2020\", \"10:00\"};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempDate1 \u003d {\"09/09/2020\"};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempDate2 \u003d {\"12/09/2020\"};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Deadline(\"return book\", LocalDate.now()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Deadline(\"return book\", Parser.changeDate(tempDate1)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Deadline(\"return book\", Parser.changeDate(tempDate2)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Event(\"dinner with family\", Parser.changeDateAndTime(tempDateTime1)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasksArrayList.add(new Event(\"dinner with friends\", Parser.changeDateAndTime(tempDateTime2)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        TaskList tasks \u003d new TaskList(tasksArrayList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.sortByDueDateTime();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(ui.printAllTask(tasks));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 102
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// Any task which does not need to specify any date and time"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Todo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " * Ui prints outputs to interact with users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Ui constructor to initialise scanner."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print statement when a task is added into TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String printAddedTask(Task task, int numTask) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + \"Now you have \" + String.valueOf(numTask) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print the task that is mark as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String markAsDone(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"\\u2713\" + task.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print the task that is being deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param task Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param numTaskLeft int"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String deleteTask(Task task, int numTaskLeft) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"Noted. I\u0027ve removed this task: \\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + \"Now you have \" + Integer.valueOf(numTaskLeft) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print all the tasks in the TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String printAllTask(TaskList tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        int numTask \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (numTask \u003c tasks.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            output \u003d output + Integer.valueOf(numTask + 1) + \".\" + tasks.getTask(numTask) + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            numTask++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print all the matching tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param tasks ArrayList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String printSearchedTask(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        int numTask \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            output \u003d \"There are no matching task in your list. :(\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            while (numTask \u003c tasks.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                output \u003d output + Integer.valueOf(numTask + 1) + \".\" + tasks.get(numTask) + \"\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                numTask++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Read the input from user and return it as a string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String temp \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            temp \u003d sc.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print the error in console and return error in string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @param error String"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String showError(String error) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Show a horizontal dashes."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String of line"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String line \u003d \"---------------------------------------------------\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Show loading error when loading storage."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String error \u003d \"error loading Duke\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Print welcome when the Duke is started."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * Return string bye and stop duke."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String closeDuke() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String bye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return bye;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 144
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                   prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 24
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(\"25-08-2020\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", localDate);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(\"[D][✘] return book (by: Aug 25 2020)\" , deadline.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 17
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task task \u003d new Task(true, \"read book\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(\"\\u2713\", task.getStatusIcon());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(\"\\u2713\", task.getStatusIcon());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        assertEquals(\"[✘] read book\", task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Command.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\CommandType.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeFileReader.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeFileWriter.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidDeadlineDescripDukeException.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidEventDescripDukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidFirstDukeException.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidTodoDescripDukeException.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Parser.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Storage.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\TaskList.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 18
    }
  }
]
