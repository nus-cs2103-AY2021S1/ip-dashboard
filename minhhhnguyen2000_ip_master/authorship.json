[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 15,
      "-": 46
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "11"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|read book|false"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|read book|true"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|return book /by June 6|false"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "D|return book|June 6|true"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "E|dinner|6 30|false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|cak|false"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|sleep|false"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "D|sleep|6|false"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "D|sleep|Oct 15 2019|false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "D|sle|23|false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "T|read book|false"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":init"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 3b19ba1790d6035a9e246f5d4ae627bf68778606"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 107,
      "-": 103
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Deadline \u003c- Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Init Deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Status in format [D][x] return book (by: 6 June)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"[D]\" + super.getStatus() + \" (by: \" + deadline + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * type of Task -\u003e D for deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * description to write to data file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return super.getDescription() + \"|\" + this.deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 41
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Duke the best chatbot hehe"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Init Duke"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks \u003d new TaskList(storage.readData());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Main"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Take in command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ui.sayHi();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Scanner myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            String cmd \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if(cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                ui.sayBye();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.equals(\"list\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                for(int i \u003d 1; i \u003c\u003d tasks.getSize(); ++i) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(i + \".\" + tasks.get(i - 1).getStatus());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 4 \u0026\u0026 cmd.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                int c \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                for(int i \u003d 5; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    c \u003d c * 10 + cmd.charAt(i) - \u00270\u0027;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                tasks.get(c - 1).done();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(tasks.get(c - 1).getStatus());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 4 \u0026\u0026 cmd.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    checkCmd(cmd, 4, \"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String getName \u003d cmd.substring(5);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    Todo tmp \u003d new Todo(getName);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"  \" + tmp.getStatus());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    tasks.add(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                catch (DukeException ex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 8 \u0026\u0026cmd.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    checkCmd(cmd, 8, \"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String getName \u003d parser.getNameBy(cmd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String getDeadline \u003d parser.getDeadlineBy(cmd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    getDeadline \u003d formatDate(getDeadline);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    Deadline tmp \u003d new Deadline(getName, getDeadline);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"  \" + tmp.getStatus());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    tasks.add(tmp);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                catch (DukeException ex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 5 \u0026\u0026cmd.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    checkCmd(cmd, 5, \"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String getName \u003d parser.getNameAt(cmd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String getTime \u003d parser.getDeadlineAt(cmd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    getTime \u003d formatDate(getTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    Event tmp \u003d new Event(getName, getTime);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"  \" + tmp.getStatus());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    tasks.add(tmp);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    //"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                catch (DukeException ex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 6 \u0026\u0026 cmd.substring(0, 6).equals(\"delete\")){"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                int c \u003d 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                for(int i \u003d 7; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    c \u003d c * 10 + cmd.charAt(i) - \u00270\u0027;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(tasks.get(c - 1).getStatus());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                tasks.remove(c - 1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else if(cmd.length() \u003e\u003d 4 \u0026\u0026 cmd.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                String tmp \u003d cmd.substring(5);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                for(int i \u003d 1; i \u003c\u003d tasks.getSize(); ++i) if(tasks.get(i - 1).description.contains(tmp)){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    System.out.println(i + \".\" + tasks.get(i - 1).getStatus());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            else System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            storage.updateDataFile(tasks.getArrayList());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * check if date is yyyy-mm-dd, then format to MMM d yyyy"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String formatDate(String str) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        LocalDate d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            d \u003d LocalDate.parse(str);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * check if the command is valid"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void checkCmd(String cmd, int len, String Ex) throws DukeException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        if(cmd.length() \u003d\u003d len) throw new DukeException(Ex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 261,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * handle error when using duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 9
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * Event \u003c- Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Init Event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * Status in format [E][x] return book (at: 6 June)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"[E]\" + super.getStatus() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * type of Task -\u003e E for Event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * description to write to data file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return super.getDescription() + \"|\" + this.time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 42
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 12
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * translate command -\u003e name and time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * get name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * by command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getNameBy(String cmd) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (cmd.charAt(i) \u003d\u003d \u0027/\u0027 \u0026\u0026 cmd.charAt(i + 1) \u003d\u003d \u0027b\u0027 \u0026\u0026 cmd.charAt(i + 2) \u003d\u003d \u0027y\u0027) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                return cmd.substring(9, i - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * get deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * by command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getDeadlineBy(String cmd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (cmd.charAt(i) \u003d\u003d \u0027/\u0027 \u0026\u0026 cmd.charAt(i + 1) \u003d\u003d \u0027b\u0027 \u0026\u0026 cmd.charAt(i + 2) \u003d\u003d \u0027y\u0027) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                return cmd.substring(i + 4);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * getname"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * at command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getNameAt(String cmd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (cmd.charAt(i) \u003d\u003d \u0027/\u0027 \u0026\u0026 cmd.charAt(i + 1) \u003d\u003d \u0027a\u0027 \u0026\u0026 cmd.charAt(i + 2) \u003d\u003d \u0027t\u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                return cmd.substring(6, i - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * get time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * at command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getDeadlineAt(String cmd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for (int i \u003d 0; i \u003c cmd.length(); ++i) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if (cmd.charAt(i) \u003d\u003d \u0027/\u0027 \u0026\u0026 cmd.charAt(i + 1) \u003d\u003d \u0027a\u0027 \u0026\u0026 cmd.charAt(i + 2) \u003d\u003d \u0027t\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                return cmd.substring(i + 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 62
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * store data file -\u003e load, save"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * read data from file data/duke.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static ArrayList\u003cTask\u003e readData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            File myObj \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            Scanner myReader \u003d new Scanner(myObj);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            if(myReader.hasNextInt()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                int n \u003d Integer.parseInt(myReader.nextLine());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d n; ++i) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    String str \u003d myReader.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    ArrayList\u003cString\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    arr.add(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    for(int j \u003d 0; j \u003c str.length(); ++j) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        if(str.charAt(j) \u003d\u003d \u0027|\u0027) { arr.add(\"\"); continue; }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        arr.set(arr.size() - 1, arr.get(arr.size() - 1) + str.charAt(j));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    if (arr.get(0).equals(\"T\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.add(new Todo(arr.get(1)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.get(i - 1).isDone \u003d arr.get(2).equals(\"true\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    } else if (arr.get(0).equals(\"D\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.add(new Deadline(arr.get(1), arr.get(2)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.get(i - 1).isDone \u003d arr.get(3).equals(\"true\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    } else if (arr.get(0).equals(\"E\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.add(new Event(arr.get(1), arr.get(2)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                        tasks.get(i - 1).isDone \u003d arr.get(3).equals(\"true\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                myReader.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * save to data file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static void updateDataFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            File myObj \u003d new File(\"data\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            myObj.mkdir();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            myObj \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            myObj.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(\"data/duke.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            myWriter.write(listToDataString(tasks));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * data format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public static String listToDataString(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        res +\u003d tasks.size() + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        for(int i \u003d 1; i \u003c\u003d tasks.size(); ++i) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "            res +\u003d tasks.get(i - 1).getType() + \"|\" + tasks.get(i - 1).getDescription() + \"|\" + tasks.get(i - 1).isDone + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 80
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getType() { return \"\"; }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 29
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public ArrayList\u003cTask\u003e getArrayList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return tasks.get(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.remove(i);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void add(Task tmp) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.add(tmp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 35
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"[T]\" + super.getStatus();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 20
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " * interact with user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * greet user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void sayHi() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     * bye user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void sayBye() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 31
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getArrayListTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.add(new Todo(\"1\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        tasks.add(new Todo(\"2\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        TaskList tmp \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(tmp.getArrayList().equals(tasks));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 18
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getTypeTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Todo todo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(todo.getType() \u003d\u003d \"T\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    public void getStatusTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        Todo todo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "        assert(todo.getStatus().substring(0, 2).equals(\"[T]\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "bye"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minhhhnguyen2000"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "minhhhnguyen2000": 1,
      "-": 20
    }
  }
]
