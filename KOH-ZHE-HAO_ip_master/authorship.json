[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 18,
      "-": 44
    }
  },
  {
    "path": "data/storageTest1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 1
    }
  },
  {
    "path": "data/storageTest2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "D | 0 | return book | 2/12/2019 1800"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "D | 1 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 1 |                asldjasljkd"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "E | 0 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 1 |              sleep"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 0 |     wow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 1 |  123"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "D | 0 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "D | 0 | book | 2/12/2019 1800"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 8
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents a DialogBox that will be displayed in the GUI"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param l the text to be displayed in the container"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param iv the image to be displayed in the container"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        iv.setClip(new Circle(60, 60, 60));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        displayPicture.setFitWidth(120.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        displayPicture.setFitHeight(120.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.setSpacing(20);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DialogBox userDialog \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userDialog.setStyle(\"-fx-background-color: #f1f3f8;\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userDialog.setPadding(new Insets(15, 10, 15, 0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        l.setFont(new Font(\"Cambria\", 15));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        l.setTextFill(Color.web(\"#e7305b\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        db.setStyle(\"-fx-background-color: #ddf3f5;\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        db.setPadding((new Insets(15, 0, 15, 10)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 67
    }
  },
  {
    "path": "src/main/java/duke/DialogBox2.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DialogBox2 extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private DialogBox2 (String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static DialogBox2 getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new DialogBox2(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static DialogBox2 getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        var db \u003d new DialogBox2(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jfif\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents a Duke object that servers as a tracking bot"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param filePath the path for the file which will be loaded into the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.loadData(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            ui.showErrorLoad(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            tasks.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Duke () {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Executes the programme provided that Duke has been initialized."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Following the convention for user input is crucial for an expected behavior."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Exception will be thrown upon undefined user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String fullCommand \u003d ui.readLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        stage.setMinWidth(700.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        mainLayout.setPrefSize(800.0, 600.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setPrefSize(685, 535);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userInput.setPrefWidth(625.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DialogBox.getDukeDialog(new Label(initialize()),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        new ImageView(duke))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            handleUserInput(stage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private String initialize() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.loadData(tasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return ui.showWelcome();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            tasks.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return ui.showWelcome() + ui.showErrorLoad(e.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private void handleUserInput(Stage stage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        );"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (dukeText.getText().equals(ui.showBye())) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            sendButton.setDisable(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            delay.setOnFinished(event -\u003e stage.close());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return c.execute(this.tasks, this.ui, this.storage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 213,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param args java command line arguments"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jfif\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Initializes the dialogContainer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DialogBox2.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                DialogBox2.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 57
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a command that will append a task to the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * The command must be in the format of todo/deadline/event + empty spaces +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * the description of the task (subject to the format requirement attached"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * to the task type)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Wrong format will trigger Exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected final String taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Instantiates a AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param taskType an indication of the task type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param description the detail information of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddCommand(String taskType, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.taskType \u003d taskType.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Appends the task to the TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param list a TaskList that contains all the tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param ui an object used to interact with users"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param storage an object used for retrieving data from or write data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *                into a specific txt file on the hard disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if the user input does not follow the convention"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            switch (this.taskType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"todo\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                current \u003d new ToDo(this.description.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"deadline\": {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                int byIndex \u003d this.description.indexOf(\" /by \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                if (byIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    throw new DukeException(\"Keyword \\\" /by \\\" not found, note the white space!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                assert byIndex \u003e 1 : \"there is no task\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String deadline \u003d this.description.substring(byIndex + 4).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String description \u003d this.description.substring(0, byIndex).trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                current \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"event\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                int atIndex \u003d this.description.indexOf(\" /at \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                if (atIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    throw new DukeException(\"Keyword \\\" /at \\\" not found, note the white space!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                assert atIndex \u003e 1 : \"there is no task\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String deadline \u003d this.description.substring(atIndex + 4).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String description \u003d this.description.substring(0, atIndex).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                current \u003d new Event(description, deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                throw new DukeException(\"I don\u0027t understand you at all...\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assert current !\u003d null : \"The task pending to add is null\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            list.add(current);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.appendTxt(current);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return ui.showAdd(current, list);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Invalid date and time content detected!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Invalid date and time format detected!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 102
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @ Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Indicates a termination of the program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return a false boolean value to break the loop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 22
    }
  },
  {
    "path": "src/main/java/duke/command/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CheckCommand(String detail) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.target \u003d detail.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AtomicInteger count \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Predicate\u003cTask\u003e checkDate \u003d x -\u003e x.getDate().equals(this.target);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Function\u003cTask, String\u003e taskString \u003d x -\u003e ui.showTask(count.getAndIncrement(), x);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        BinaryOperator\u003cString\u003e accumulator \u003d (x, y) -\u003e (x + \"\\n\" + y);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String output \u003d list.getList().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                      .filter(checkDate)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                      .map(taskString)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                      .reduce(accumulator)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                      .orElse(\"empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return output.equals(\"empty\") ? ui.showNothingFound() : ui.showCheck() + \"\\n\" + output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 41
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a general Command that is abstract."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Concrete Commands will inherit from this class and take advantage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * of polymorphism at run time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public abstract String execute(TaskList list, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Initializes a DeleteCommand instance"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param number index of the task to be deleted"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if the task does not exist in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DeleteCommand(String number) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.index \u003d Integer.parseInt(number) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Sorry, I can\u0027t seem to find the task...\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Task task \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assert index \u003e\u003d 0 : \"Index out of bound\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            list.delete(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.generateTxt(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return ui.showDelete(task, list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Sorry, I can\u0027t seem to find the task...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents a DoneCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param number the index of the task to be marked done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if the task does not exist in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DoneCommand(String number) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.index \u003d Integer.parseInt(number) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Sorry, I can\u0027t seem to find the task...\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Task task \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assert index \u003e\u003d 0 : \"Index out of bound\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            storage.generateTxt(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return ui.showDone(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Sorry, I can\u0027t seem to find the task...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 42
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public FindCommand(String detail) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.target \u003d detail.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AtomicInteger count \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Predicate\u003cTask\u003e checkDate \u003d x -\u003e x.getName().contains(this.target);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Function\u003cTask, String\u003e taskString \u003d x -\u003e ui.showTask(count.getAndIncrement(), x);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        BinaryOperator\u003cString\u003e accumulator \u003d (x, y) -\u003e (x + \"\\n\" + y);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String output \u003d list.getList().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .filter(checkDate)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .map(taskString)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .reduce(accumulator)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .orElse(\"empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return output.equals(\"empty\") ? ui.showNothingFound() : ui.showFind() + \"\\n\" + output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String start \u003d ui.showList() + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AtomicInteger count \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Function\u003cTask, String\u003e taskString \u003d x -\u003e ui.showTask(count.getAndIncrement(), x);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        BinaryOperator\u003cString\u003e accumulator \u003d (x, y) -\u003e (x + \"\\n\" + y);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return list.getList().stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                             .map(taskString)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                             .reduce(start, accumulator);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 29
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/FileErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FileErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public FileErrorException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(\"Sorry, I can\u0027t create duke.txt for you :( \");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/FolderErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class FolderErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public FolderErrorException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(\"Sorry, I can\u0027t create data folder for you :( \");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.CheckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts user input to its associated type of Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return specific type of Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if user input does not follow convention"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String[] process \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String first \u003d process[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            String second \u003d process[1].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            switch (first) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"done\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return new DoneCommand(second);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"delete\": {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return new DeleteCommand(second);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"check\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return new CheckCommand(second);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            case \"find\": {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return new FindCommand(second);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                return new AddCommand(first, second);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Only one word detected. Remember to add whitespace\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    + \" between information or enter a valid one word command!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 65
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.FileErrorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.FolderErrorException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents an object that is responsible for retrieving data from and writing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * to the file on hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Unsuccessful attempt will trigger Exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected File data;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * If the folder or target file is not found according to the given path,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * it will attempt to create these documents along the way."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param filePath the path that leads to the target file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if unsuccessful attempt to create these documents"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Storage (String filePath) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String folder \u003d filePath.split(\"/\")[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String file \u003d filePath.split(\"/\")[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        java.nio.file.Path dataFolder \u003d java.nio.file.Paths.get(dir, folder);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!java.nio.file.Files.exists(dataFolder)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            if (!new File(dataFolder.toString()).mkdir()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                throw new FolderErrorException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assert dataFolder !\u003d null : \"Folder not found!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        java.nio.file.Path fileLocation \u003d java.nio.file.Paths"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .get(dataFolder.toString(), file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!java.nio.file.Files.exists(fileLocation)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                if (!fileLocation.toFile().createNewFile()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    throw new FileErrorException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                throw new FolderErrorException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assert fileLocation !\u003d null : \"file not found!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.data \u003d new File(fileLocation.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Overwrites everything in the target file on hard disk according to the TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param list a collection of all tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if attempt is unsuccessful"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void generateTxt (TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.data);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            List\u003cTask\u003e tasks \u003d list.getList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                fw.write(task.convertTxt() + System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Unsuccessful txt file update\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Appends the String representation of the task to the last row of the target"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * file on the hard disk."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param task a specific task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if attempt is unsuccessful"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void appendTxt (Task task) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.data, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fw.write(task.convertTxt() + System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"Unsuccessful txt file update\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Loads data from the hard disk to the app."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param list an empty list ready to be filled with tasks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws DukeException if the data from the file is corrupted or can\u0027t find the file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void loadData(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Scanner s \u003d new Scanner(this.data);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String event \u003d s.nextLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String[] component \u003d event.split(\"\\\\|\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                if (component.length \u003e 4) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    throw new DukeException(\"Corrupted data detected! Loading terminated!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                assert component.length \u003c\u003d 4 : \"Corrupted file data\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                switch (component[0].trim()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                case \"T\": {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    Task current \u003d new ToDo(component[2]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    int state \u003d Integer.parseInt(component[1].trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    if (state \u003d\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        current.markAsDone();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    list.add(current);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                case \"D\": {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    Deadline current \u003d new Deadline(component[2].trim(), component[3].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    int state \u003d Integer.parseInt(component[1].trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    if (state \u003d\u003d 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        current.markAsDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    list.add(current);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                case \"E\": {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    Event current \u003d new Event(component[2].trim(), component[3].trim());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    int state \u003d Integer.parseInt(component[1].trim());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    if (state \u003d\u003d 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        current.markAsDone();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    list.add(current);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    throw new DukeException(\"Corrupted data detected! Loading terminated!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new DukeException(\"I can\u0027t seem to find your file...\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 155
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " *  Represents a specific type of Task that has a deadline as additional information."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " *  Following the convention for String input is crucial for successful instantiation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents a Deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param description information for the task itself"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param by information for the deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.by \u003d by.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String[] timeComponent \u003d by.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.date \u003d LocalDate.parse(format(timeComponent[0].trim()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String hour \u003d timeComponent[1].substring(0, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String minute \u003d timeComponent[1].substring(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.time \u003d LocalTime.of(Integer.parseInt(hour),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                Integer.parseInt(minute));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts the user input into a format that can be used for instantiating"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * a java.time.LocalDate object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return String representation of user input in certain format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private String format(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String[] component \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (component[0].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            component[0] \u003d \"0\" + component[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return component[2] + \"-\" + component[1] + \"-\" + component[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns a String representation of the deadline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return String representation of the Data and Time attached to this task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .ofPattern(\"MMM d yyyy\")) + \" \" + time + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.by.split(\" \")[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns the data being written on hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return String representation of the text for storing in txt.file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String convertTxt() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"D | \" + (this.status ? \"1\" : \"0\") + \" | \" + name + \" | \" + by;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a type of Task that has a specific date and time of occurrence."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Similar to Deadline Class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents a Event task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param description information for the task itself"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param at information for the time and date of occurrence"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String[] timeComponent \u003d at.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.date \u003d LocalDate.parse(format(timeComponent[0].trim()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String hour \u003d timeComponent[1].substring(0, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String minute \u003d timeComponent[1].substring(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.time \u003d LocalTime.of(Integer.parseInt(hour),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                Integer.parseInt(minute));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private String format(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String[] component \u003d input.split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (component[0].length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            component[0] \u003d \"0\" + component[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return component[2] + \"-\" + component[1] + \"-\" + component[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .ofPattern(\"MMM d yyyy\")) + \" \" + time + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.at.split(\" \")[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String convertTxt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"E | \" + (this.status ? \"1\" : \"0\") + \" | \" + name + \" | \" + at;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a general task that has a name and status of completion."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * More specific task will inherit from this class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected boolean status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents the most basic task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param name the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"[\" + (status ? \"\\u2713\" : \"\\u2718\") + \"] \" + this.name.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.name.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public abstract String convertTxt();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 40
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents probably the simplest type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String convertTxt() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"T | \" + (this.status ? \"1\" : \"0\") + \" | \" + name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 26
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a collection of all kinds of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    protected List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void delete(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.list.remove(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void empty() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.list.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents an object that is responsible for user interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * This includes reading user input and displaying the correspondent output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String lineBreak \u003d \"   ____________________________\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String logo \u003d \" ____        _\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Hello from\\n\" + logo + \"\\nHey, I\u0027m Emilia \\u2764 !\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showError(String errorMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showErrorLoad(String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return errorMessage + \"\\n\" + \"Initialize an empty TaskList!\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        System.out.println(lineBreak);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return sc.nextLine().trim().toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Welcome back \\u2764 !\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Please take a look at the tasks:\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showTask(int count, Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return count + \". \" + task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showDone(Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Understood, I\u0027ve marked this task as done:\\n\" + task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents the text message to be displayed upon a DeleteCommand."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param task the task being deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return confirm message for delete command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showDelete(Task task, TaskList list) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Understood, I\u0027ve deleted this task\\n\" + task + \"\\n\" + \"You have \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + list.getSize() + \" tasks in your list now!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showCheck() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Hey! I have printed out the tasks that match the date:\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Represents the text message to be displayed upon a AddCommand."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param current task being added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @return confirm message for AddCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showAdd(Task current, TaskList list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Understood! I\u0027ve added this task:\\n\" + current + \"\\n You have \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + list.getSize() + \" tasks in your list now!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showFind() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Hey! I have printed out the tasks that match the name:\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String showNothingFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \"Hmm, I didn\u0027t find anything that match your input\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 95
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 19
    }
  },
  {
    "path": "src/test/java/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public StorageStub(String path) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.data \u003d new File(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void generateTxt(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DoneCommand temp \u003d new DoneCommand(\"10\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            temp.execute(list, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assertEquals(\"Sorry, I can\u0027t seem to find the task...\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void execute_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        DoneCommand temp \u003d new DoneCommand(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Task test \u003d new ToDo(\"Sample\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        list.add(test);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        StorageStub storage \u003d new StorageStub(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        temp.execute(list, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(true, test.isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 56
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.CheckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void parse_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Command test \u003d Parser.parse(\"check date and time\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(true, test instanceof CheckCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Command test \u003d Parser.parse(\"onlyOneWord\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assertEquals(\"Only one word detected. Remember to add whitespace \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    + \"between information or enter a valid one word command!\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 28
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public StorageStub(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.data \u003d new File(path);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void loadData_invalidFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        StorageStub temp \u003d new StorageStub(\"no where to be found\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            temp.loadData(new TaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assertEquals(\"I can\u0027t seem to find your file...\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void loadData_invalidDataFromTxt_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        StorageStub temp \u003d new StorageStub(\"C:\\\\Users\\\\linco\\\\Desktop\\\\2103T IP\\\\data\\\\storageTest1.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            temp.loadData(new TaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            assertEquals(\"Corrupted data detected! Loading terminated!\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void loadData_validData_success() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        StorageStub temp \u003d new StorageStub(\"C:\\\\Users\\\\linco\\\\Desktop\\\\2103T IP\\\\data\\\\storageTest2.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        temp.loadData(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(list.getList().get(0).toString(), \"[D][\\u2718] return book (by: Dec 2 2019 18:00)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 50
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 1 |        read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 0 |  buy milk"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "T | 0 | buy milk"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "todo      buy milk"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "event                  project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "deadline where is my by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "event go to sleep/at 8pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "why are you so cute ?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "bye"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 23
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 3,
      "-": 20
    }
  }
]
