[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 18,
      "-": 44
    }
  },
  {
    "path": "data/tasklist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "D!@#0!@#dinosaur!@#2020-12-12!@#2030!@#HIGH"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": "E!@#1!@#party concert!@#2020-12-19!@#2300-0000!@#NONE"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "T!@#0!@#treasure hunting!@#LOW"
      }
    ],
    "authorContributionMap": {
      "amylzting": 3
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Duke class implements a Duke chat-bot, called Dino,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * with functionalities to keep track of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Constructs Duke object, initialised with String file path variable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * that will be used by Storage to load task data stored in hard disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * when Duke starts up, or when writing to file due to changes in task data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param filePath String of file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            this.tasks \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Parses user input and executes command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If the command is invalid, DukeException is caught."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        boolean isBye \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        while (!isBye \u0026\u0026 scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                c.execute(storage, tasks, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                isBye \u003d c.isBye();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Initialises Duke with the file record of task history, and runs Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param args an array of command-line arguments for the application"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        new Duke(\"./data/tasklist.txt\").run();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Get the response from Dino given the user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input The command input user types in."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return The response from duke command agent."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return c.executeToString(storage, tasks, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 85,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The DukeAction enum represents the action"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * that Duke will do based on user input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public enum DukeAction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    MARK_DONE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    SET_PRIORITY"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 15
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The DukeException class implements a DukeException, exception thrown"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * when errors occur in the Duke chat-bot."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Instantiates a DukeException that shows error that occurred."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param message String message showed describing the error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 19
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Duke duke \u003d new Duke(\"./data/tasklist.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            stage.setTitle(\" DINO \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private final Image dinoImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            .getResourceAsStream(\"/images/dino.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Initialises the main window where the GUI of Dino is displayed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String logo \u003d \" ____\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"|  _ \\\\ _ _____  ___\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"| | | | |  _  |/   \\\\\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"| |_| | | | | | |_| |\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"|____/|_|_| |_|\\\\___/\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String greeting \u003d \"Rawr! I\u0027m Dino \u003e\u003c\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nGet started on your task list by entering a task!\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo see how to format your task or other commands, input \u0027format\u0027.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo stop Dino, input \u0027bye\u0027.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\n________________________________________\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                DialogBox.getDukeDialog(greeting, dinoImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * containing Dino\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                DialogBox.getDukeDialog(response, dinoImage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            new Timer().schedule(new TimerTask() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                public void run () {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    handleExit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }, 1000);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 91
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.FormatCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.MarkDoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.command.PriorityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Parser class parses user input into"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * commands to be executed by the Command class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns Command corresponding to the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * user input argument when Duke is run."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param userInput String of user\u0027s input command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return Command command for Dino to execute."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If user input command is invalid command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] inputWords \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (userInput.equals(\"format\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new FormatCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (inputWords[0].equals(\"done\") \u0026\u0026 inputWords.length \u003d\u003d 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 inputWords[1].matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that user input is in the format \"done X\" where X is a numeric"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new MarkDoneCommand(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (inputWords[0].equals(\"delete\") \u0026\u0026 inputWords.length \u003d\u003d 2"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 inputWords[1].matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that user input is in the format \"delete X\" where X is a numeric"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (inputWords[0].equals(\"find\") \u0026\u0026 inputWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that user input is in format \"find \u003ckey word\u003e\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (inputWords[0].equals(\"todo\") || inputWords[0].equals(\"deadline\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                || inputWords[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // Dino adds task to list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else if (checkInputForPriority(userInput)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that user input is in format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // \"priority \u003cword\u003e X\", where X is a numeric"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new PriorityCommand(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Invalid command entered! Please enter a valid command.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Checks the user input format to see if it matches a command to set"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * priority of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input user input command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return boolean true if input format is correct"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static boolean checkInputForPriority(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] inputWords \u003d input.split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (inputWords[0].equals(\"priority\") \u0026\u0026 inputWords[2].matches(\"[0-9]+\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u0026\u0026 inputWords.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String priority \u003d inputWords[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            switch (priority) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"high\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"mid\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 87
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The AddCommand class implements a AddCommand command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * executable to add a task to the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public AddCommand(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes adding of task in TaskList and shows success/error information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where adding of task is written in hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the adding action."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.addTask(storage, this.input));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string success/error information after execution of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * adding of task in TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where adding of task is written in hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the adding action."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String success/error information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.addTask(storage, this.input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 55
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The ByeCommand class implements a ByeCommand command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * executable to show user a closing message when Dino exits."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.isBye \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Shows closing message to user before Dino closes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task actions are done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows closing message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns closing string to user before Dino closes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task actions are done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows closing message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String closing message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Rawr. Hope to see you again soon! \u003e\u003c\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 45
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Command class implements methods that all"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Commands use to execute for user request."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected boolean isBye \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return this.isBye;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes action done to task in TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task actions are done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows relevant messages to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public abstract void execute(Storage storage, TaskList taskList, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public abstract String executeToString(Storage storage, TaskList taskList, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "amylzting": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The DeleteCommand class implements a DeleteCommand command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * executable to delete a task from the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes deletion of task in TaskList and shows success/error information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where deletion of task is written in hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the deletion action."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.deleteTask(storage, this.input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string success/error information after execution of"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * deleting of task in TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where deleting of task is written in hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the deleting action."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String success/error information"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.deleteTask(storage, this.input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 56
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The FindCommand class implements a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * FindCommand command executable to find a task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * based on a keyword, from the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes finding of task in TaskList that matches keyword from user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * and shows success/error information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where finding of task that matches is done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the finding action."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.findTask(this.input));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string success/error information after execution of"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * finding of task in TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where finding of task that matches is done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the finding action."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String success/error information"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.findTask(this.input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 57
    }
  },
  {
    "path": "src/main/java/duke/command/FormatCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The FormatCommand class implements a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * FormatCommand command executable to list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * out all the formats in which user can follow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * to input commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class FormatCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public FormatCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Shows format that users can follow to input commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task actions are done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows format that users can follow to input commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        ui.showFormat();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of format that users can follow to input commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data of tasks in hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task actions are done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows format that users can follow to input commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String of input format information"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Formats for the three task types Todo, Deadline and Event,\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" are shown below.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Todo: \u0027todo \u003ctask description\u003e\u0027\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" (e.g. todo visit new theme park)\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Deadline: \u0027deadline \u003ctask description\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" /by \u003cyyyy-mm-dd hhmm\u003e\u0027 (e.g. deadline submit report /by 2019-11-10 1500)\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Event: \u0027event \u003ctask description\u003e\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" /at \u003cyyyy-mm-dd hhmm-hhmm\u003e\u0027 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"(e.g. event team project meeting /at 2019-10-02 1400-1500)\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nAdditional Information:\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo mark a task as done, input \u0027done \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo delete a task from your list, input \u0027delete \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo find a task in your list, input \u0027find \u003ckeyword\u003e\u0027.\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo set the priority of task to high/mid/low, \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"input \u0027priority \u003chigh/mid/low\u003e \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo close Dino, enter \u0027bye\u0027.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The ListCommand class implements a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * ListCommand command executable to list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * out all the tasks in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes listing of task in TaskList and shows error information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data in hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task list is printed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows error message from the action."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.printList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of success/error information from execution of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * printing of task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage data in hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task list is printed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows error message from the action."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String string of success/error information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.printList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 55
    }
  },
  {
    "path": "src/main/java/duke/command/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The MarkDoneCommand class implements a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * MarkDoneCommand command executable to mark"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * a task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public MarkDoneCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes marking done of task in TaskList and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * shows success/error information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where marking done of task is written in hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is marked done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the mark done action."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.markDone(storage, this.input));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string success/error information after execution of"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * marking done of task in TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where marking done of task is written in hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is marked done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the marking done action."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String success/error information"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.markDone(storage, this.input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 57
    }
  },
  {
    "path": "src/main/java/duke/command/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The PriorityCommand class implements a PriorityCommand command executable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * to set the priority of a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public PriorityCommand(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Executes marking done of task in TaskList and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * shows success/error information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where marking done of task is written in hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is marked done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the mark done action."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void execute(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showSuccess(taskList.setTaskPriority(storage, this.input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string success/error information after execution of"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * marking done of task in TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage where marking done of task is written in hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskList TaskList where task is marked done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param ui Ui that shows success/error messages from the marking done action."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String success/error information"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String executeToString(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return taskList.setTaskPriority(storage, this.input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 56
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeAction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Storage class implements a storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * with functionalities to load data from the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * storage and write data to storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String dirpath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Initialises a storage object that stores any updates to the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * list of tasks in the hard disk and retrieves task information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * from the hard disk when Duke starts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param filepath string file path of the file where Duke stores"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *                 task information"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.dirpath \u003d filepath.substring(0, 6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns the list of tasks stored in the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return List list of Task stored in hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If could not load task information from hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public List\u003cTask\u003e loadData() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        //read Duke\u0027s data file and load tasks into tasks list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            File dir \u003d new File(this.dirpath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            File taskFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (dir.mkdir()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // new directory created"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                System.out.println(\"Welcome. Dino has created a new directory \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"to store your data.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                if (taskFile.createNewFile()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    // new file created"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    System.out.println(\"Dino has successfully \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                            + \"created a new file to store your task list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    // file creation failed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    System.out.println(\"Dino could not create a new file to store your task list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else if (taskFile.createNewFile()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // directory already exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // new file created"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                System.out.println(\"Welcome. Dino has successfully created \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"a new file to store your task list.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // directory and file already exist"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // load data from file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Scanner scan \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                loadDataFromFile(tasks, scan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                System.out.println(\"Welcome back. Dino has successfully loaded your task data.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Dino could not load your task data.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Loads all the tasks from the file read by scanner, into the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param tasks task list to update"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param scan scanner that reads file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If task type is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void loadDataFromFile(List\u003cTask\u003e tasks, Scanner scan) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        while (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String taskString \u003d scan.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (!taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String[] taskSplit \u003d taskString.split(\"!@#\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String taskType \u003d taskSplit[0];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    loadTodoTask(taskSplit, tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    loadDeadlineTask(taskSplit, tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    loadEventTask(taskSplit, tasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    throw new DukeException(\"Invalid task type.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Add todo task from file to task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskSplit task string in file split by regex !@#"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void loadTodoTask(String[] taskSplit, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDone \u003d taskSplit[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDesc \u003d taskSplit[2];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Todo todo \u003d new Todo(taskDesc);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String priority \u003d taskSplit[3];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            todo.setPriority(Priority.HIGH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"MID\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            todo.setPriority(Priority.MID);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            todo.setPriority(Priority.LOW);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Add deadline task from file to task list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskSplit task string in file split by regex !@#"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void loadDeadlineTask(String[] taskSplit, List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDone \u003d taskSplit[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDesc \u003d taskSplit[2];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDeadline \u003d taskSplit[3] + \" \" + taskSplit[4];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Deadline deadline \u003d Deadline.createDeadline(taskDesc, taskDeadline);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String priority \u003d taskSplit[5];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            deadline.setPriority(Priority.HIGH);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"MID\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            deadline.setPriority(Priority.MID);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            deadline.setPriority(Priority.LOW);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Add event task from file to task list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskSplit task string in file split by regex !@#"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param tasks task list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void loadEventTask(String[] taskSplit, List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDone \u003d taskSplit[1];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDesc \u003d taskSplit[2];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskDateTime \u003d taskSplit[3] + \" \" + taskSplit[4];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Event event \u003d Event.createEvent(taskDesc, taskDateTime);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String priority \u003d taskSplit[5];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            event.setPriority(Priority.HIGH);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"MID\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            event.setPriority(Priority.MID);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            event.setPriority(Priority.LOW);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Writes action done to task into hard disk."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If action is ADD, Dino adds task to hard disk."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If action is DELETE, Dino deletes task from hard disk."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If action is MARK_DONE, Dino marks the specific task in hard disk as done."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param task Task to be acted upon."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param action DukeAction action done to task."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If Dino could not write to hard disk."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void writeToFile(Task task, DukeAction action) throws DukeException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            File inputFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            File tempFile \u003d new File(\"./data/myTempFile.txt\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(this.filepath));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(tempFile));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            switch (action) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                FileWriter fw \u003d new FileWriter(this.filepath, true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                fw.write(task.storedTaskString() + \"\\n\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                System.out.println(\"Success!\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                deleteTaskFromFile(task, reader, writer);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                deleteAndReplaceFile(inputFile, tempFile);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case MARK_DONE:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                markTaskDoneInFile(task, reader, writer);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                deleteAndReplaceFile(inputFile, tempFile);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case SET_PRIORITY:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                setTaskPriorityInFile(task, reader, writer);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                deleteAndReplaceFile(inputFile, tempFile);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Not a valid action.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Dino could not write task data to hard disk.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Deletes task from the file."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param task task to be deleted"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param reader reader to read file"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param writer writer to write to file"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws IOException If I/O operation interrupted."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void deleteTaskFromFile(Task task, BufferedReader reader, BufferedWriter writer)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String lineToRemove \u003d task.storedTaskString();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (!currentLine.equals(lineToRemove)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.write(currentLine);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Marks task in file as done."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param task task to be marked done"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param reader reader to read file"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param writer writer to write to file"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws IOException If I/O operation interrupted."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void markTaskDoneInFile(Task task, BufferedReader reader, BufferedWriter writer)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String lineToMarkDone \u003d task.storedTaskString();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String currentL;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        while ((currentL \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (!currentL.equals(lineToMarkDone)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.write(currentL);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String taskType \u003d currentL.substring(0, 4);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                String taskDesc \u003d currentL.substring(5);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.write(taskType + \"1\" + taskDesc);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Sets priority of task in file."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param task Task to set priority"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param reader reader to read file"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param writer writer to write to file"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws IOException If I/O operation interrupted."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If priority is not valid."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void setTaskPriorityInFile(Task task, BufferedReader reader, BufferedWriter writer)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throws IOException, DukeException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Priority priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String currentTask \u003d task.storedTaskString();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String taskToSetPriority;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            taskToSetPriority \u003d currentTask.substring(0, currentTask.length() - 7);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case MID:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            taskToSetPriority \u003d currentTask.substring(0, currentTask.length() - 6);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Something went wrong in setting priority to task in file.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String currentL;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        while ((currentL \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (!currentL.contains(taskToSetPriority)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.write(currentL);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                writer.write(task.storedTaskString());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Deletes input file and renames temporary file as the input file."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param inputFile file to be deleted"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param tempFile file to be renamed"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If input file could not be deleted,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * or temporary file could not be renamed."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void deleteAndReplaceFile(File inputFile, File tempFile) throws DukeException {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (inputFile.delete()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // original file successfully deleted"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (tempFile.renameTo(inputFile)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // temporary file successfully renamed to original file"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                System.out.println(\"Success!\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Dino could not write task data to hard disk.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Dino could not write task data to hard disk.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 391
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Deadline class implements a Deadline task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * with task description and deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String userInputDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String userInputTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Instantiates a Deadline task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param description string description of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param userInputDate string date of task in yyyy-mm-dd format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param userInputTime string time of task in hhmm (24-hour) format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param date LocalDate parsed date of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param time String time of task in 12-hour format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Deadline(String description, String userInputDate, String userInputTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                     LocalDate date, String time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.userInputDate \u003d userInputDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.userInputTime \u003d userInputTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns Deadline task created from the input description and date and time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input is in correct format for creation of Deadline,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * method adds task to the task list creates the Deadline task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param description String description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param by String deadline date and time of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return Deadline event task created from the description and date and time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If String at contains invalid format of date or time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Deadline createDeadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] dateAndTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String userInputDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String userInputTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(userInputDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String time \u003d timeFormat(userInputTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new Deadline(description, userInputDate, userInputTime, date, time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DateTimeParseException | DukeException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns String time formatted from 24hour format to 12hour format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input is in correct 24hour format, method converts this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * 24hour time format to 12hour time format (eg. 1800 converts to 6.00pm)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param time String time in 24hour (eg. hhmm) format that user has input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String time converted from 24hour format to 12hour format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If String time contains invalid format of time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static String timeFormat(String time) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int min \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            StringBuilder formattedTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (hour \u003e\u003d 12 \u0026\u0026 hour \u003c 24 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(hour - 12).append(\".\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"pm\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else if (hour \u003e 0 \u0026\u0026 hour \u003c 12 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(hour).append(\".\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"am\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else if (hour \u003d\u003d 0 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(\"12\").append(\".\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"am\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                assert (hour \u003e 24 || hour \u003c 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                assert (min \u003e 60 || min \u003c 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return formattedTime.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!priority.equals(Priority.NONE)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \", \" + this.time + \") \" + \"\u003c\" + this.priority + \"\u003e\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \", \" + this.time + \")\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of this task to be stored in the hard disk."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String task description to be stored in hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String storedTaskString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"D\" + \"!@#\" + super.storedTaskString()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"!@#\" + this.userInputDate + \"!@#\" + this.userInputTime + \"!@#\" + this.priority;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 135
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Event class implements a Event task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * with task description and date/time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String userInputDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String userInputTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Instantiates an Event task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param description string description of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param userInputDate string date of task in yyyy-mm-dd format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param userInputTime string time of task in hhmm (24-hour) format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param date LocalDate parsed date of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param time String time of task in 12-hour format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private Event(String description, String userInputDate, String userInputTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                  LocalDate date, String time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.userInputDate \u003d userInputDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.userInputTime \u003d userInputTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns Event created from the input description and date and time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input is in correct format for creation of Event,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * method adds task to the task list creates the Event task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param description String description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param at String date and time of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return Event event task created from the description and date and time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If String at contains invalid format of date or time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public static Event createEvent(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] dateAndTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String userInputDate \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String userInputTime \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(userInputDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String[] startAndEndTime \u003d userInputTime.split(\"-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String time \u003d timeFormat(startAndEndTime[0]) + \" - \" + timeFormat(startAndEndTime[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return new Event(description, userInputDate, userInputTime, date, time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (DateTimeParseException | DukeException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns String time formatted from 24hour-24hour format to 12hour-12hour format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input is in correct 24hour-24hour format, method converts this"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * 24hour time format to 12hour-12hour time format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * (eg. 1800-2100 converts to 6.00pm - 9.00pm)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param time String time in 24hour-24hour (eg. hhmm-hhmm) format that user has input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String time converted from 24hour-24hour format to 12hour-12hour format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If String time contains invalid format of time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    private static String timeFormat(String time) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int min \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            StringBuilder formattedTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (hour \u003e\u003d 12 \u0026\u0026 hour \u003c 24 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(hour - 12).append(\".\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"pm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else if (hour \u003e 0 \u0026\u0026 hour \u003c 12 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(hour).append(\".\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"am\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else if (hour \u003d\u003d 0 \u0026\u0026 min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                formattedTime.append(\"12\").append(\".\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        .append(String.format(\"%02d\", min)).append(\"am\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                assert (hour \u003e 24 || hour \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                assert (min \u003e 60 || min \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return formattedTime.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!priority.equals(Priority.NONE)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \", \" + this.time + \") \" + \"\u003c\" + this.priority + \"\u003e\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \", \" + this.time + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of this task to be stored in the hard disk."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String task description to be stored in hard disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String storedTaskString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"E\" + \"!@#\" + super.storedTaskString()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"!@#\" + this.userInputDate + \"!@#\" + this.userInputTime + \"!@#\" + this.priority;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 137
    }
  },
  {
    "path": "src/main/java/duke/tasks/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    MID,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    NONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 13
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Task class implements a Task with task description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * Task status can be done or not done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Initialises a Task object with the String taskName which describes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * the task. Task objects include Todo, Deadline and Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param taskName string description of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.priority \u003d Priority.NONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return 1 or 0 symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Sets the priority of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param priority Priority ranking of the task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + taskName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of this task to be stored in the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String task description to be stored in hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String storedTaskString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return this.getStatusIcon() + \"!@#\" + taskName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 61
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeAction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The TaskList class implements a task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * with functionalities to update the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    protected List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of list of Task in the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String of tasks in task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If there is no task in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String printList() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (this.taskList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // Dino lists out all items in list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            result.append(\"Dino lists your tasks:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                result.append(\"\\n\").append(index).append(\". \").append(this.taskList.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            result.append(\"\\nTo mark off a task after completion\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \", input \u0027done \u003ctask number\u003e\u0027.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not find any items in your task list.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nGet started by entering a task. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Formats for a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string specifying successful deletion of task from task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If the task number to delete is valid, removes task from task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * and writes this action to the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to delete task from hard disk."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input that describes task to delete."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String string specifying successful deletion of task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If task number is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String deleteTask(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskNumber \u003c\u003d this.taskList.size() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // task number is valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // Dino deletes task from list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Task toDelete \u003d this.taskList.get(taskIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            this.taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            storage.writeToFile(toDelete, DukeAction.DELETE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"Rawr! Dino has deleted \" + \"Task \" + taskNumber"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \" from your list:\\n\" + toDelete"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nNumber of tasks in list: \" + this.taskList.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            assert (taskNumber \u003e taskList.size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Task \" + taskNumber + \" is not in your list of tasks!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string specifying successful adding of task to task list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input is in correct format for creation of Todo, Deadline or"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Event, method adds task to the task list, and writes this action"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * to the hard disk."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to add task to hard disk."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input that describes task to add."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String string specifying successful deletion of task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If invalid format for task creation is input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String addTask(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] inputWords \u003d input.split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String successStatement;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            switch (inputWords[0]) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                successStatement \u003d addTodoToListAndStorage(storage, input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                successStatement \u003d addDeadlineToListAndStorage(storage, input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                successStatement \u003d addEventToListAndStorage(storage, input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                // when input is not a deadline, event or todo"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return successStatement;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // invalid task format entered"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of Todo task that is added to list and storage."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to add task to hard disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input describing the task to add."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String of Todo task that is added to list and storage."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If failed to write task to storage."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String addTodoToListAndStorage(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String task \u003d input.substring(5);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Todo todo \u003d new Todo(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        this.taskList.add(todo);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        storage.writeToFile(todo, DukeAction.ADD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"Dino has added to your list of tasks:\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + todo"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nNumber of tasks in list: \" + this.taskList.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of Deadline task that is added to list and storage."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to add task to hard disk."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input describing the task to add."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return  String of Deadline task that is added to list and storage."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If failed to write task to storage."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String addDeadlineToListAndStorage(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] taskBy \u003d input.substring(9).split(\" /by\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskBy.length \u003d\u003d 2 \u0026\u0026 !taskBy[0].equals(\"\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that input has task description and date/time"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // task deadline taken as string after first \u0027/by\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Deadline deadline \u003d Deadline.createDeadline(taskBy[0], taskBy[1].substring(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            this.taskList.add(deadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            storage.writeToFile(deadline, DukeAction.ADD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"Dino has added to your list of tasks:\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + deadline"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nNumber of tasks in list: \" + this.taskList.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of Event task that is added to list and storage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to add task to hard disk."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input describing the task to add."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String of Event task that is added to list and storage."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException If failed to write task to storage."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String addEventToListAndStorage(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] eventAt \u003d input.substring(6).split(\" /at\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (eventAt.length \u003d\u003d 2 \u0026\u0026 !eventAt[0].equals(\"\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // condition checks that input has task description and date/time"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // task deadline taken as string after first \u0027/at\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Event event \u003d Event.createEvent(eventAt[0], eventAt[1].substring(1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            this.taskList.add(event);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            storage.writeToFile(event, DukeAction.ADD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"Dino has added to your list of tasks:\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + event"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nNumber of tasks in list: \" + this.taskList.size();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! Dino could not add your task. \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Make sure your format is correct.\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"\\nFormats to input a task can be found by entering \u0027format\u0027.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string specifying successful marking done of task in task list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * If input task number is valid, method marks the task as done,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * and writes this action to the hard disk."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param storage Storage used to write to mark done for task in hard disk."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input that describes task to mark as done."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String string specifying successful marking done of task."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If invalid task number is input."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String markDone(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(input.split(\" \")[1]);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskNumber \u003c\u003d this.taskList.size() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // task number is valid"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // Dino marks task as done"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Task doneTask \u003d this.taskList.get(taskIndex);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            storage.writeToFile(doneTask, DukeAction.MARK_DONE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            doneTask.markAsDone();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"Great! Dino has marked \" + \"Task \" + taskNumber"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \" as done:\\n\" + doneTask;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            assert (taskNumber \u003e taskList.size());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Task \" + taskNumber + \" is not in your list of tasks!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string specifying successful finding of tasks that"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * matches the user input keyword."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param input String of input keyword."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String string specifying"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * successful search of matching tasks"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @throws DukeException  If there are no matching tasks."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String findTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] inputWords \u003d input.split(\" \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String keyWord \u003d inputWords[1];"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        result.append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        int matchingTasks \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            String taskString \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            if (taskString.contains(keyWord)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                result.append(\"\\n\").append(taskString);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                matchingTasks++;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (matchingTasks \u003e 0) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            assert (matchingTasks \u003d\u003d 0);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Rawr! \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \"Dino could not find any matching tasks in your list.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String setTaskPriority(Storage storage, String input) throws DukeException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String[] inputWords \u003d input.split(\" \");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String priority \u003d inputWords[1];"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(inputWords[2]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (taskNumber \u003c\u003d this.taskList.size() \u0026\u0026 taskNumber \u003e 0) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            // task number is valid"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            int taskIndex \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Task taskToSetPriority \u003d this.taskList.get(taskIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            switch (priority) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"high\":"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                taskToSetPriority.setPriority(Priority.HIGH);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"mid\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                taskToSetPriority.setPriority(Priority.MID);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                taskToSetPriority.setPriority(Priority.LOW);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                throw new DukeException(\"Rawr! Please enter either\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                        + \"high/mid/low for priority status.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            storage.writeToFile(taskToSetPriority, DukeAction.SET_PRIORITY);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"Great! Dino has set \" + taskToSetPriority.priority.name()"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \" priority for \" + \"Task \" + taskNumber"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                    + \" :\\n\" + taskToSetPriority;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            assert (taskNumber \u003e taskList.size());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            throw new DukeException(\"Task \" + taskNumber + \" is not in your list of tasks!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 295
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Todo class implements a Todo task with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * task description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Instantiates a Todo task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param description String description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        if (!priority.equals(Priority.NONE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[T]\" + super.toString() + \" \u003c\" + this.priority + \"\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Returns string of this task to be stored in the hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @return String task description to be stored in hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public String storedTaskString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        return \"T\" + \"!@#\" + super.storedTaskString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"!@#\" + this.priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 39
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * The Ui class handles interactions with user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @author Amy Lim Zhi Ting"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints a line for separation between commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints message that greets user when Dino starts up."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String logo \u003d \" ____\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"|  _ \\\\ _ _____  ___\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"| | | | |  _  |/   \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"| |_| | | | | | |_| |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"|____/|_|_| |_|\\\\___/\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(\"Rawr! I\u0027m Dino \u003e\u003c\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nGet started on your task list by entering a task!\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo see how to format your task or other commands, input \u0027format\u0027.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo stop Dino, input \u0027bye\u0027.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\n____________________________________________________________\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints closing message for user when Dino exits."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        // Dino says bye"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(\"Rawr. Hope to see you again soon! \u003e\u003c\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints formatting information for user to refer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * when inputting command for Dino to execute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void showFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(\"Formats for the three task types Todo, Deadline and Event,\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" are shown below.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Todo: \u0027todo \u003ctask description\u003e\u0027\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" (e.g. todo visit new theme park)\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Deadline: \u0027deadline \u003ctask description\u003e\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" /by \u003cyyyy-mm-dd hhmm\u003e\u0027 (e.g. deadline submit report /by 2019-11-10 1500)\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Event: \u0027event \u003ctask description\u003e\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \" /at \u003cyyyy-mm-dd hhmm-hhmm\u003e\u0027 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"(e.g. event team project meeting /at 2019-10-02 1400-1500)\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nAdditional Information:\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo mark a task as done, input \u0027done \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo delete a task from your list, input \u0027delete \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo find a task in your list, input \u0027find \u003ckeyword\u003e\u0027.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo set the priority of task to high/mid/low, \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"input \u0027priority \u003chigh/mid/low\u003e \u003ctask number\u003e\u0027.\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"\\nTo close Dino, enter \u0027bye\u0027.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints given error message to tell user error has occurred."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param message String of error message"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * Prints given success message to tell user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * that command has been successfully executed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     * @param message String of success message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amylzting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void showSuccess(String message) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 86
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"15.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \u003cFont name\u003d\"Lucida Sans Typewriter Regular\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "amylzting": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #393939;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"424.0\" style\u003d\"-fx-background-color: #FFC77D;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \u003cFont name\u003d\"Lucida Sans Typewriter Regular\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"424.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #4C4E5F;\" text\u003d\"Send\" textFill\u003d\"#ffc77d\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \u003cFont name\u003d\"Lucida Sans Typewriter Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #F5AFAF;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "amylzting": 26
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void createEvent_wrongDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String errorMessage \u003d \"Rawr! Dino could not add your task. Make sure your format is correct.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                + \"Formats to input a task can be found by entering \u0027format\u0027.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception e \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Event.createEvent(\"travel to japan\", \"2020-13-12 1800-2400\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(errorMessage, e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Event.createEvent(\"travel to south\", \"2020-12-121800-2200\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(errorMessage, ex.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception exception \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Deadline.createDeadline(\"travel to east\", \"wrong date /at time format\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(exception.getMessage().contains(errorMessage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void createDeadline_wrongDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        String errorMessage \u003d \"Rawr! Dino could not add your task. Make sure your format is correct.\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                \"Formats to input a task can be found by entering \u0027format\u0027.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception e \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Deadline.createDeadline(\"travel to japan\", \"2020-13-12 1800-2400\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(e.getMessage().contains(errorMessage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Deadline.createDeadline(\"travel to japan\", \"wrong\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(ex.getMessage().contains(errorMessage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        Exception exception \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amylzting"
        },
        "content": "            Deadline.createDeadline(\"travel to japan\", \"wrong date /by time format\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertTrue(exception.getMessage().contains(errorMessage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 56
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testDateTimeFormat() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(\"[D][0] homework (by: Dec 12 2020, 6.00pm)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Deadline.createDeadline(\"homework\", \"2020-12-12 1800\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testStoredStringFormat() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(\"D!@#0!@#homework!@#2020-12-12!@#1800!@#NONE\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Deadline.createDeadline(\"homework\", \"2020-12-12 1800\").storedTaskString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 24
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    public void testDateTimeFormat() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "        assertEquals(\"[E][0] concert at California (at: Jun 12 2020, 11.00pm - 12.00am)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "                Event.createEvent(\"concert at California\", \"2020-06-12 2300-0000\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amylzting": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amylzting"
        },
        "content": "format"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amylzting"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amylzting"
        },
        "content": "todo swimming in sea"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline swimming /by 2020-05-27 1430"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amylzting"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event swimming /at 2021-03-20 1500-1600"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": "todo racing car"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amylzting"
        },
        "content": "done 88"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline eat by 2pm"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event party at 4pm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline eat /by 10am /by june"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event travel to japan /at 10 June /at 2pm /at airport"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event travel to japan /at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event /at 2pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline /by 2pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amylzting"
        },
        "content": "todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amylzting"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amylzting"
        },
        "content": "event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amylzting"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amylzting"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amylzting"
        },
        "content": "find car"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amylzting"
        },
        "content": "chasing elephants"
      }
    ],
    "authorContributionMap": {
      "amylzting": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amylzting"
        },
        "content": "echo Batch to delete file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amylzting"
        },
        "content": "del .\\data\\tasklist.txt /f /q"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amylzting"
        },
        "content": "echo Done!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amylzting"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amylzting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amylzting"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amylzting"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "amylzting": 10,
      "-": 19
    }
  }
]
