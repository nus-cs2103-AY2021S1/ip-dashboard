[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 21,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "D | ✓ | do work | 2011-01-01T12:30"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "T | ✗ | watch show"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "T | ✓ | eat dinner"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "D | ✓ | return book | 2020-01-01T12:30"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "E | ✗ | project meeting | 2020-02-02T14:30"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 5
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a bye/exit command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return ui.format(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 14
    }
  },
  {
    "path": "src/main/java/CachedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a cached task to be added."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class CachedTask {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Task cachedTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the cached task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param cachedTask the task stored."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param command the command to undo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param index the index of the task stored."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public CachedTask(Task cachedTask, String command, int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.cachedTask \u003d cachedTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the cached task stored."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Cached task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task getCachedTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return cachedTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the command to undo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation of the command to undo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the index of cached task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Index of cached task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public int getIndexOfCachedTask() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 44
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a specific command for duke to take in."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Executes the specific command given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskList tasklist containing all tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param ui user interace to print."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param storage data stored backend."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation of command to be printed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, DukeStorage storage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Checks if duke should stop taking in commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return true if the BYE command is inputted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public abstract boolean isCompleted();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 19
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the different command types in the enum class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    BYE, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND, UNDO, UNIDENTIFIED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a deadline to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details deadline details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param by date and time to be completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid date or time is provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Deadline(String details, String by) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method for constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param dateTime date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            by \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the string representation of the deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 50
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a deadline command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the deadline command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details and time for deadline to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DeadlineCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the deadline description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the deadline details, second chunk is by when"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedDeadline \u003d afterCommand.split(\"/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Format of deadline recording: deadline keyword\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \", deadline instructions, forward slash, by keyword with a colon, specific date + time)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. deadline return book /by 2020-01-01 12:30\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedDeadline[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String by \u003d splittedDeadline[1].split(\"by\", 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Task newDeadline \u003d new Deadline(details, by);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.addTask(newDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.addTask(newDeadline, taskList.getTasksSize(), false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 48
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand task id to be deleted"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DeleteCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d taskList.getTasksSize() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Please enter a valid task no!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task deletedTask \u003d taskList.get(taskNo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        taskList.delete(taskNo, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return ui.displayDeletedTask(deletedTask, taskList.getTasksSize(), false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Gets the user dialog to be displayed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param text input/command by user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param img user image."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return DialogBox to set user text and image."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Gets the Duke dialog to be displayed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param text command message by Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param img Duke image."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return DialogBox to set Duke text and image."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 71
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a done/ticked command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the done command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand task id to be ticked off"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DoneCommand(String afterCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs a valid number"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(afterCommand) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskNo \u003e\u003d taskList.getTasksSize() || taskNo \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Please enter a valid task no!\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (taskList.get(taskNo).isTaskCompleted()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Task is already completed!\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        taskList.markTaskCompleted(taskNo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return ui.displayCompletedTask(taskList.get(taskNo));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 36
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the main Duke software."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private DukeStorage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the Duke software."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Loads the tasklist with the file content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        storage \u003d new DukeStorage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        openDukeFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method to check for and open Duke data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void openDukeFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // try to open the duke file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.reloadStorage(taskList.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Duke data do not exist!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ui.format(\"Its a duke exception!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the ui associated with Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Ui associated with Duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string representation of the response generated by user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param input user command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation of response."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            saveData(taskList, storage); // save the data before execution/exit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (c.isCompleted()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Main driver code for running main."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (!isCompleted) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                saveData(taskList, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                isCompleted \u003d c.isCompleted();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ui.getScanner().close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method to save the data in the file upon every Command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskList tasklist to store tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param storage storage of tasks backend."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void saveData(TaskList taskList, DukeStorage storage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            storage.saveToStorage(taskList.getTasks());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error in saving!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 104,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a specific exception for Duke-related errors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 8
    }
  },
  {
    "path": "src/main/java/DukeInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the interpreter used to encode and decode tasks for the storage."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeInterpreter {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Encodes the task and returns a string to be stored in the duke.txt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be encoded."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation for storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static String encode(Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assert task !\u003d null : \"There should be a task to encode!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char type \u003d taskString.charAt(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char symbol \u003d taskString.charAt(4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] rest \u003d taskString.substring(7).split(\"\\\\(\", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d rest[0].trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extraDetails \u003d \"\"; // extra info for deadline/event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (rest.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extraDetails \u003d deadline.getDateTime().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                extraDetails \u003d event.getDateTime().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return encodeHelper(type, symbol, details, extraDetails);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static String encodeHelper(char type, char symbol, String details, String extra) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return type + \" | \" + symbol + \" | \" + details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + (extra.equals(\"\") ? \"\" : \" | \" + extra);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Decodes the string representation and returns the Task to be added to tasklist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param code string representation of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Task to be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time is provided."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static Task decode(String code) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assert code !\u003d null : \"There should be a task to decode!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        char taskType \u003d code.charAt(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedWords \u003d code.split(\"\\\\|\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d splittedWords[1].trim().equals(\"✓\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedWords[2].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String extraDetails \u003d null; // extra info for deadline/event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // since the tostring has a \u0027T\u0027 char inside"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String dateTime \u003d splittedWords[3].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String date \u003d dateTime.substring(0, 10);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String time \u003d dateTime.substring(11, 16);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            extraDetails \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeToDo(details, isCompleted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeDeadline(details, isCompleted, extraDetails);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return decodeEvent(details, isCompleted, extraDetails);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static ToDo decodeToDo(String details, boolean isCompleted) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        ToDo toDo \u003d new ToDo(details);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            toDo.markTaskAsCompleted();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Deadline decodeDeadline(String details, boolean isCompleted,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                           String extraDetails) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Deadline deadline \u003d new Deadline(details, extraDetails);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            deadline.markTaskAsCompleted();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static Event decodeEvent(String details, boolean isCompleted,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                     String extraDetails) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Event event \u003d new Event(details, extraDetails);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            event.markTaskAsCompleted();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 96
    }
  },
  {
    "path": "src/main/java/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the storage for tasks in the Duke software."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param filePath savepath of file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public DukeStorage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        createStorage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Initialises the tasklist using the current storage in the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void createStorage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage is ready to use :-)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                System.out.println(\"Duke storage already exists, good to go!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Decodes and load all the tasks in the file into the tasklist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasklist to store tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws FileNotFoundException If file does not exist in the proper folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time is given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void reloadStorage(List\u003cTask\u003e tasks) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // decode and add the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            tasks.add(DukeInterpreter.decode(line));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Encodes and save all the tasks from the tasklist into the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasklist to store tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws IOException If an input/output operation fails."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void saveToStorage(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            writer.write(DukeInterpreter.encode(task) + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 70
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents an event to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private static final String dateFormat \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for an event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details event details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param at date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid date or time is provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Event(String details, String at) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        validateDateTime(at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Helper method for constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param dateTime date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If invalid date/time given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void validateDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            at \u003d LocalDateTime.parse(dateTime, df);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a valid date\u0026time in this format: yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string representation of the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 50
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents an event command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the event command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details and time of the event to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public EventCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the event description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // first chunk is the event details, second chunk is at where"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedEvent \u003d afterCommand.split((\"/\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // teach the user the format for the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Format of event recording: event keyword\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \", event instructions, forward slash, at keyword with a colon, specific date + time)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    + \"\\n e.g. project meeting /at 2020-01-02 14:30\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String details \u003d splittedEvent[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String at \u003d splittedEvent[1].split(\"at\", 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Task newEvent \u003d new Event(details, at);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.addTask(newEvent, taskList.getTasksSize(), false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 48
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a find/search command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the find command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand search keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public FindCommand(String afterCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Please enter the keyword!\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String keyword \u003d afterCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // collate the tasks with the keyword (using streams and lambda)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tempList.addAll(taskList.getTasks().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .filter(task -\u003e task.getDetails().contains(keyword))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // display those tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return ui.displayTasksWithCommand(tempList, \"find\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 40
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a list command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return ui.displayTasksWithCommand(taskList.getTasks(), \"list\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 14
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Starts the GUI for the Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param stage platform for GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            stage.setTitle(\"DUKE PROGRAM\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 34
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Initialises duke and sends a greeting message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param duke duke program"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        greetUser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private void greetUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                DialogBox.getDukeDialog(duke.getUi().greet(), dukeImage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                DialogBox.getUserDialog(\"user: \" + input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 59
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the system used to parse user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a specific Command to tackle and parse user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param input user\u0027s command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Specific Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @throws DukeException If an invalid command is provided."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    // main driver function for duke to tackle and parse commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        assert input !\u003d null : \"There should be an input!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String[] splittedWords \u003d input.split(\"\\\\s\", 2); // splits string based on whitespace"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String command \u003d splittedWords[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String afterCommand \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (splittedWords.length \u003e 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            afterCommand \u003d splittedWords[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CommandType commandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d CommandType.valueOf(command.toUpperCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            commandType \u003d CommandType.UNIDENTIFIED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // handle all different commands using switch and enum instead; organised the methods"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // to make the code look neater"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DoneCommand(afterCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new ToDoCommand(afterCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DeadlineCommand(afterCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new EventCommand(afterCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new DeleteCommand(afterCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new FindCommand(afterCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return new UndoCommand(afterCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case UNIDENTIFIED:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // if a bad command is thrown at Duke"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Please enter a command I understand!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            // should not exist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            throw new DukeException(\"Invalid!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 58
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a task to be completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details task details."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task(String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns true if task is completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return True if task is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isTaskCompleted() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * To indicate that the task is completed (with a tick symbol)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markTaskAsCompleted() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * To indicate that the task is uncompleted (with a cross symbol)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markTaskAsUncompleted() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the details of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.details;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the string representation of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[\" + (isCompleted ? \"✓\" : \"✗\") + \"] \" + details;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 54
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a tasklist to store all the tasks and cached tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Stack\u003cCachedTask\u003e cachedTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Initialise the tasklist with an arraylist. Initialise new cache stacks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        cachedTasks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Adds a task to the tasklist. Pushes added task to cached tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        cachedTasks.push(new CachedTask(task, \"add\", getTasksSize() - 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the size of the tasklist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Size of tasklist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public int getTasksSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the size of the cached tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Size of cached tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public int getCachedTasksSize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return cachedTasks.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Gets a specific task from the list based on the index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Specific task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Task get(int taskIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the last cached task by popping it from the stack."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Most recently cached task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public CachedTask getLastCachedTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return cachedTasks.pop();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the tasks stored in the tasklist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return ArrayList inside tasklist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Removes the task from the list based on the index. Pushes deleted task to cached tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param shouldAllowUndo true if undo command is used to delete"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void delete(int taskIndex, boolean shouldAllowUndo) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task removedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (shouldAllowUndo) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            cachedTasks.push(new CachedTask(removedTask, \"delete\", taskIndex));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Indicate task as completed in the tasklist. Pushes done task to cached tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex index of task in tasklist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void markTaskCompleted(int taskIndex) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task taskToMark \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        taskToMark.markTaskAsCompleted();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        cachedTasks.push(new CachedTask(taskToMark, \"done\", taskIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Indicate task as uncompleted in the tasklist as part of undo command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param taskIndex"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void unmarkTask(int taskIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.get(taskIndex).markTaskAsUncompleted();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Retrieves the deleted task from cached tasks upon undo command call."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param index index of deleted task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task deleted task to be recovered."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void recoverTask(int index, Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        tasks.add(index, task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 108
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a todo task to be completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param details todo details."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public ToDo(String details) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string representation of the todo task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 21
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents a toDo command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Constructor for the todo command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param afterCommand details of todo command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public ToDoCommand(String afterCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // needs an after command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                    \"Please do not leave the todo description empty!\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            Task newToDo \u003d new ToDo(afterCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.addTask(newToDo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.addTask(newToDo, taskList.getTasksSize(), false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 32
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents the user interface to deal with interactions with the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private final String line \u003d \"----------------------\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Obtains input from the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Provide a format to all responses by Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param input response to be given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Duke response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String format(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return \"Duke: \" + input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Greets the user with an opening message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a greeting string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format(\"Hello! I\u0027m Duke!\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns a string pattern for displaying duke exception messages."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param ex DukeException."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string representation of a duke exception."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String throwDukeException(DukeException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format(ex.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Prints message upon the ADD or UNDO Command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param size current number of tasks in tasklist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param shouldUndo true if undo command was called."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string message when a task is added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String addTask(Task task, int size, boolean shouldUndo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format((shouldUndo ? \"\\nUNDO EXECUTED:\\n\" : \"Got it.\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"I\u0027ve \" + (shouldUndo ? \"recovered\" : \"added\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \" this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Prints completed task upon DONE Command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task completed task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string message when a task is done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String displayCompletedTask(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Prints incomplete task upon UNDO Command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task incomplete task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string message when a task is unmarked."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String displayIncompleteTask(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format(\"\\nUNDO EXECUTED:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \"I have unmarked this task:\\n\" + task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Prints deleted task upon DELETE or UNDO Command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param task task to be deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param size current number of tasks in tasklist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param shouldUndo true if undo command was called."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string message when a task is deleted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String displayDeletedTask(Task task, int size, boolean shouldUndo) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format((shouldUndo ? \"\\nUNDO EXECUTED:\\n\" : \"Noted. \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"I\u0027ve removed this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            + \"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns/Prints tasks according to LIST/FIND Command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @param tasks tasks to be printed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Returns a string message of all the tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String displayTasksWithCommand(List\u003cTask\u003e tasks, String command) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int len \u003d tasks.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (len \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(\"No tasks!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return format(sb.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        sb.append(\"Here are the\" + (command.equals(\"find\") ? \" matching \" : \" \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                + \"tasks in your list:\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            sb.append(i + 1 + \".\" + tasks.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return format(sb.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * Returns the scanner used in the UI."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     * @return Scanner."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public Scanner getScanner() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return this.sc;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 123
    }
  },
  {
    "path": "src/main/java/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " * Represents an undo command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    private String afterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public UndoCommand(String afterCommand) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        this.afterCommand \u003d afterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // undo command should not have an after command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (afterCommand !\u003d null) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"Please call the undo comamnd properly!\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        // undo command cannot be executed when nothing has been updated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int cachedSize \u003d taskList.getCachedTasksSize();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        if (cachedSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.throwDukeException(new DukeException(\"No commands to undo!\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        CachedTask cachedTask \u003d taskList.getLastCachedTask();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task taskToUndo \u003d cachedTask.getCachedTask();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String commandToUndo \u003d cachedTask.getCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        int cachedTaskIndex \u003d cachedTask.getIndexOfCachedTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        switch (commandToUndo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.delete(cachedTaskIndex, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.displayDeletedTask(taskToUndo, cachedTaskIndex, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.recoverTask(cachedTaskIndex, taskToUndo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.addTask(taskToUndo, taskList.getTasksSize(), true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            taskList.unmarkTask(cachedTaskIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return ui.displayIncompleteTask(taskToUndo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            return \"This is not possible!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 48
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003cInsets left\u003d\"12.0\" right\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003cFont name\u003d\"Kristen ITC\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003cFont name\u003d\"Kristen ITC\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003cFont name\u003d\"Kristen ITC\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: blue;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-image: url(\u0027/images/sunset.jpg\u0027);\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 26
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"Task class: Test for new todo created\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void todoTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task todo \u003d new ToDo(\"snooze\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Assertions.assertEquals(\"[T][✗] snooze\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"Task class: Test for checking off events as done\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void doneTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task todo \u003d new ToDo(\"sleep\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        todo.markTaskAsCompleted();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Assertions.assertEquals(\"[T][✓] sleep\", todo.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"DukeInterpreter class: Test for encoding deadlines/events\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void encodeTest() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task task \u003d new Deadline(\"meeting\", \"2011-10-10 12:30\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String encodedTask \u003d DukeInterpreter.encode(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Assertions.assertEquals(\"D | ✗ | meeting | 2011-10-10T12:30\", encodedTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"DukeInterpreter class: Test for decoding deadlines/events\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void decodeTest() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        String storedEvent \u003d \"E | ✓ | project meeting | 2011-12-12T08:55\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Task event \u003d DukeInterpreter.decode(storedEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Assertions.assertEquals(\"[E][✓] project meeting (at: Dec 12 2011 08:55)\", event.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "m0nggh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    @DisplayName(\"ByeCommand Class: Test exit command\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    public void exitTest() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        boolean isCompleted \u003d Parser.parse(\"bye\").isCompleted();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "        Assertions.assertEquals(true, isCompleted);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "todo wake up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline do project /by Thursday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "deadline watch lecture /by Friday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event hangout with friends /at Sun 1-6pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "event watch drama /at Sun 7-9pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "m0nggh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "m0nggh": 1,
      "-": 20
    }
  }
]
