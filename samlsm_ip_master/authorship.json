[
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Duke duke \u003d Duke.createDuke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                duke.run();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            System.err.println(ui.printFormat(\"Unable to create bot!\\n\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 22
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Represents a bot that helps to manage task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Each \u003ccode\u003eDuke\u003c/code\u003e object has its own respective database."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Duke(Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eDuke\u003c/code\u003e object with the corresponding user database."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * If database fails to create or load, null is returned."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param filePath FilePath of database"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return \u003ccode\u003eDuke\u003c/code\u003e object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Duke createDuke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Storage storage \u003d Storage.createStorage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new Duke(storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.fileCreationError(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Runs the whole program by taking in input commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Terminates only when an \u003cCode\u003eExitCommand\u003c/Code\u003e is given."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        while (!isExit \u0026\u0026 input.hasNextLine()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String commandMessage \u003d input.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Command c \u003d Parser.parse(commandMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                c.execute(commandMessage, storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (c instanceof ExitCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    input.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 57,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Thrown to indicate that a method call has resulted in an error and command is unable to complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Constructs an \u003ccode\u003eDukeException\u003c/code\u003e with the specified detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the detail message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * The \u003ccode\u003eParser\u003c/code\u003e reads a command from user and perform various checks to determine the next action."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static String ignoreCase \u003d \"(?i)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static String wildcard \u003d \"(.*)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eCommandState\u003c/code\u003e is an enum representing all possible command direction from user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    enum CommandState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        LIST, DONE, BYE, TODO, DEADLINE, EVENT, DELETE, CHECK, FIND"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Obtain an instance of \u003ccode\u003eCommand\u003c/code\u003e from a text string input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003cp\u003eThe string must represent a valid command input in the correct format of \"command taskDetails\".\u003c/p\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command the text to parse"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the command desired by user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the command is unidentifiable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + CommandState.BYE.name() + wildcard)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.LIST.name() + wildcard)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.DONE.name() + wildcard)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.CHECK.name() + wildcard)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new CheckCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.DELETE.name() + wildcard)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.FIND.name() + wildcard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Task t \u003d checkAction(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new AddCommand(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Obtain an instance of \u003ccode\u003eTask\u003c/code\u003e from a text string input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command the task command to be parse"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the \u003ccode\u003eTask\u003c/code\u003e to be acted on"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if task command is unidentifiable"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Task checkAction(String command) throws DukeException{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + CommandState.DEADLINE.name() + wildcard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Deadline.createTask(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.EVENT.name() + wildcard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Event.createTask(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.TODO.name() + wildcard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d Todo.createTask(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String errMessage \u003d ui.printFormat(\" I\u0027m sorry but i do not know what you want to do. *woof*\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 73
    }
  },
  {
    "path": "src/main/java/duke/ParserStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ParserStub {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static String ignoreCase \u003d \"(?i)\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static String wildcard \u003d \"(.*)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    enum CommandState {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        TODO, DEADLINE, EVENT, DELETE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + Parser.CommandState.BYE.name())) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.LIST.name())) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.DONE.name() + wildcard)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.CHECK.name() + wildcard)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new CheckCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.DELETE.name() + \"(.*)\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + Parser.CommandState.FIND.name() + \"(.*)\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String t \u003d checkAction(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new AddCommand(Todo.createTask(\"todo buy books\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String checkAction(String command) throws DukeException{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (command.matches(ignoreCase + CommandState.DEADLINE.name() + wildcard)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Deadline\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.EVENT.name() + wildcard)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Event\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.TODO.name() + wildcard)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Todo\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (command.matches(ignoreCase + CommandState.DELETE.name() + wildcard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            s \u003d \"Delete\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String errMessage \u003d ui.printFormat(\" I\u0027m sorry but i do not know what you want to do. *woof*\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 52
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Storage for Tasks. A \u003ccode\u003eStorage\u003c/code\u003e represents a system that manages the storage and retrieval of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTask\u003c/code\u003e from a file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Storage(TaskList taskList, File file) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eStorage\u003c/code\u003e system containing a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a new file at the given directory if the file does not exists. Else, retrieves all tasks from the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * given file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param filePath FilePath representing the location of the file where all \u003ccode\u003eTask\u003c/code\u003e are saved"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return \u003ccode\u003eStorage\u003c/code\u003e object with all previous \u003ccode\u003eTask\u003c/code\u003e saved, if applicable"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if file cannot be created/ retrieved"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Storage createStorage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage \u003d \"Woof woof... I can\u0027t seem to create a file to store your tasks...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \"Your tasks would be forgotten at this rate...\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] pathNames \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String dirName \u003d pathNames[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String fileName \u003d pathNames[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String home \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Path currDir \u003d Paths.get(home).getParent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "//            Path currDir \u003d Paths.get(home);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Path targetPath \u003d Paths.get(currDir.toString(), filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            File directory \u003d new File(Paths.get(currDir.toString(), dirName).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            boolean isDirCreated;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            boolean isFileCreated;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (!java.nio.file.Files.exists(targetPath)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (directory.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isDirCreated \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File file \u003d new File(Paths.get(currDir.toString(), dirName, fileName).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File dir \u003d new File(Paths.get(currDir.toString(), dirName).toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isDirCreated \u003d dir.mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    File file \u003d new File(Paths.get(currDir.toString(), dirName, fileName).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (isDirCreated \u0026\u0026 isFileCreated) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    ui.fileCreationSuccess();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    return new Storage(new TaskList(), new File(targetPath.toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.welcome();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return new Storage(new TaskList(), new File(targetPath.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (InvalidPathException | DukeException | IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Loads all \u003ccode\u003eTask\u003c/code\u003e saved in file into the \u003ccode\u003eTaskList\u003c/code\u003e, if applicable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003ccode\u003eTask\u003c/code\u003e cannot be retrieved due \u003ccode\u003eFileNotFound\u003c/code\u003e exception"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void load() throws DukeException{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                taskList.checkTask(s.nextLine());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Saves the given \u003ccode\u003eTask\u003c/code\u003e to file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task Task to be added to file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003ccode\u003eTask\u003c/code\u003e fails to save"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void save(Task task) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int total \u003d total();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.write(task.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.addSuccess(task.toString(), total);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.accessFileFailure());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes the given \u003ccode\u003eTask\u003c/code\u003e from file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command Command containing index of \u003ccode\u003eTask\u003c/code\u003e to be deleted from file"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003ccode\u003eTask\u003c/code\u003e fails to delete due to invalid index or"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eFileNotFound\u003c/code\u003e exception"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void delete(String command) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int ind \u003d Integer.parseInt(command.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Task t \u003d taskList.deleteTask(ind);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            updateFile();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.deleteSuccess(t.toString(), total());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.noSuchTask());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.wrongDeleteInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks a given \u003ccode\u003eTask\u003c/code\u003e as done and update this \u003ccode\u003eTask\u003c/code\u003e in the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ind Index of \u003ccode\u003eTask\u003c/code\u003e to be updated"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if \u003cTask\u003eTask\u003c/Task\u003e fails to update due to invalid index or"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eFileNotFound\u003c/code\u003e exception"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markDone(int ind) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            taskList.markDone(ind);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            updateFile();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.noSuchTask());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Updates all \u003ccode\u003eTask\u003c/code\u003e in the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to access file"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void updateFile() throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e listOfTask \u003d taskList.getList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            for (Task task : listOfTask) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(task.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                fileWriter.write(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.accessFileFailure());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints all the \u003ccode\u003eTask\u003c/code\u003e in a given File."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void printAll() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (total() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.noTask();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.listHeader();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            list.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                int ind \u003d list.indexOf(task) + 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.listBody(ind, task.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            });"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.line();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through all \u003ccode\u003eTask\u003c/code\u003e in the file and prints all \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * on the specified date. Date input must be in the form of YYYY/MM/DD."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date Date required"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if date input is of the wrong format"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void checkDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String[] inputDate \u003d date.trim().split(\"/\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            LocalDate dateFormat \u003d LocalDate.parse(formatDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e sameDates \u003d taskList.checkDate(dateFormat);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (sameDates.isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.noSameDate();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.sameDateHeader(dateFormat);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                for (Task t : sameDates) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    ui.listBody(sameDates.indexOf(t) + 1, t.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.line();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.inputCorrectCheckDateFormat());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the total number of \u003ccode\u003eTask\u003c/code\u003e in a file."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return total number of \u003ccode\u003eTask\u003c/code\u003e in a file"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public int total() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return taskList.total();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through all \u003ccode\u003eTask\u003c/code\u003e in the file and prints all \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * containing the specified string."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param keyword keyword to be searched"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if command input contains no keywords"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void findRelevantTask(String keyword) throws DukeException{"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String searchName \u003d keyword.substring(keyword.indexOf(\"find\") + 5).trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            List\u003cTask\u003e results \u003d taskList.searchTask(searchName.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (results.isEmpty()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.noRelevantTask();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.relevantTaskHeader();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                for (Task t : results) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    ui.listBody(results.indexOf(t) + 1, t.toString());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ui.line();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(ui.searchFail());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 259
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains the list of \u003ccode\u003eTask\u003c/code\u003e object. \u003ccode\u003eTaskList\u003c/code\u003e saves all existing \u003ccode\u003eTask\u003c/code\u003e in a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * list and contains functionalities that supports the addition and deletion of individual \u003ccode\u003eTask\u003c/code\u003e in the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final List\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Converts the given string to \u003ccode\u003eTask\u003c/code\u003e object and adds it to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task Task in string format to be converted and added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void checkTask(String task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String taskType \u003d task.substring(0, 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String status \u003d task.substring(3,6);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isDone \u003d status.equals(\"[\" + \"\\u2713\" + \"]\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (taskType.equals(\"[T]\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d new Todo(task.substring(7), isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else if (taskType.equals(\"[D]\")){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d task.lastIndexOf(\"(FINISH by: \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d new Deadline(task.substring(7, indOfTime),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    task.substring(indOfTime + 11, task.lastIndexOf(\")\")).trim(), isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d task.lastIndexOf(\"(APPEAR at: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            t \u003d new Event(task.substring(7, indOfTime),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    task.substring(indOfTime + 11, task.lastIndexOf(\")\")).trim(), isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Adds the specified \u003ccode\u003eTask\u003c/code\u003e into the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes the \u003ccode\u003eTask\u003c/code\u003e at the specified index in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e to be deleted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e deleted from the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws IndexOutOfBoundsException if an invalid index is given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Task deleteTask(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t \u003d listOfTask.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the list containing all \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return Returns the list containing all \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return listOfTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the total number of \u003ccode\u003eTask\u003c/code\u003e in the list at this point in time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return Returns the total number \u003ccode\u003eTask\u003c/code\u003e in the list at this point in time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public int total() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return listOfTask.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks the specified \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index Index of \u003ccode\u003eTask\u003c/code\u003e in list to be marked as completed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws IndexOutOfBoundsException if invalid index is given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        listOfTask.get(index).markAsDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through the whole list of \u003ccode\u003eTask\u003c/code\u003e and returns a list containing all \u003ccode\u003eTask\u003c/code\u003e on"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * the specified date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date Date to be checked"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a list containing all \u003ccode\u003eTask\u003c/code\u003e on that day."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e checkDate(LocalDate date) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e sameDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Task t : listOfTask) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (t.compareDate(date)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                sameDates.add(t);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return sameDates;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Iterates through the whole list of \u003ccode\u003eTask\u003c/code\u003e and returns a list containing all \u003ccode\u003eTask\u003c/code\u003e with"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * the specified keyword."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param keywords to be searched"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a list containing all \u003ccode\u003eTask\u003c/code\u003e with the keyword."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public List\u003cTask\u003e searchTask(String ... keywords) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cTask\u003e validTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Task t : listOfTask) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            for (String keyword : keywords) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                if (t.toString().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    validTask.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return validTask;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 131
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eUi\u003c/code\u003e deals with all the interactions with the user. A \u003ccode\u003eUi\u003c/code\u003e object contains all the methods"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * required to print out messages to users, specifically, it specifies a format of print in the \u003ccode\u003eprint\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * method that takes in a \u003ccode\u003eString\u003c/code\u003e object and prints the string in the desired format to users."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String lines \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void print (String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(lines + message + lines);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void printErr (String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.err.println(lines + message + lines);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String printFormat (String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return lines + message + lines;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void fileCreationError(String s) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        printErr(s);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that a new file has been successfully created."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void fileCreationSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d \" Woof! I am Yuki your assigned Task Manager!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                +\" I have just created a new file to store all your tasks!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                +\" So... What is my first assignment? *Woof woof*\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to welcome users back."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d \" Hello! I\u0027m Yuki *Woof*\\n What can I do for you? *Woof woof*\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a farewell message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void goodBye(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d \" Bye. Hope to see you again soon! *Woof woof*\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format specifying the total number of \u003ccode\u003eTask\u003c/code\u003e in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param i the number of \u003ccode\u003eTask\u003c/code\u003e in a list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format specifying the total number of \u003ccode\u003eTask\u003c/code\u003e in the list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String displayTotal(int i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \" Now you have \" + i + \" tasks in the list. Keep going!!\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format specifying that the system has failed to access a file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format specifying that the system has failed to access a file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String accessFileFailure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return printFormat(\" Unable to access file... *woof*\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format specifying that a particular \u003ccode\u003eTask\u003c/code\u003e that user is trying to access does not"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * exists in the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format specifying that a particular \u003ccode\u003eTask\u003c/code\u003e that user is trying to access does not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * exists in the file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String noSuchTask() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return printFormat(\" *Woof!* This task does not exist!\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format specifying that a particular \u003ccode\u003eTask\u003c/code\u003e command is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format specifying that a particular \u003ccode\u003eTask\u003c/code\u003e command is invalid"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String wrongDeleteInput() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return printFormat(\" *Woof!* Please enter an integer value! I can\u0027t really read...\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that a \u003ccode\u003eTask\u003c/code\u003e has been deleted successfully."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task \u003ccode\u003eTask\u003c/code\u003e object in string format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param i total number of \u003ccode\u003eTask\u003c/code\u003e in the list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteSuccess(String task, int i) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" *WOOF* I have removed:\\n   \" + task + \"\\n\" + displayTotal(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that a \u003ccode\u003eTask\u003c/code\u003e has been added successfully."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task \u003ccode\u003eTask\u003c/code\u003e object in string format"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param i total number of \u003ccode\u003eTask\u003c/code\u003e in the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void addSuccess(String task, int i) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" *WOOF* I have added:\\n   \" + task + \"\\n\" + displayTotal(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that they have no \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void noTask() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" You have no task to complete! *WOOF*\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints the header for listing all \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void listHeader() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.print(lines);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(\" Here are the tasks in your list *Woof*:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints the given \u003ccode\u003eTask\u003c/code\u003e out in specified format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ind Index of \u003ccode\u003eTask\u003c/code\u003e in the list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param task \u003cTask\u003eTask\u003c/Task\u003e object in string format"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void listBody(int ind, String task) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(\"   \" + ind + \".\" + task);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints out the divider"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void line() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform users that they have no \u003ccode\u003eTask\u003c/code\u003e on the specified date."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void noSameDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" You have no task on this day! Have a good break! *Woof*\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints the header before listing the list of \u003ccode\u003eTask\u003c/code\u003e on a specified date."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified date"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void sameDateHeader(LocalDate date) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.print(lines);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(\" Here is the list of ongoing tasks on \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(date) + \":\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format informing user to input date in the correct format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format informing user to input date in the correct format"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String inputCorrectCheckDateFormat() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": "       return printFormat(\" Please enter date in YYYY/MM/DD format! *Woof woof*\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that the \u003ccode\u003eTask\u003c/code\u003e is marked as done."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param description Description of \u003ccode\u003eTask\u003c/code\u003e marked as done"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markDoneSuccess(String description) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" Good Job!!! You cleared this task:\\n\" + description);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform user that the \u003ccode\u003eTask\u003c/code\u003e has already been marked as done."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markDoneRepeat() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" You have already completed this task! *Woof woof*\\n\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a print format reminding users to input keywords together with the command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a print format reminding users to input keywords together with the command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String searchFail() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return printFormat(\" Please enter a keyword that you wish to search for...\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" Or you can just enter *list* to see all your task! *Woof woof!*\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints a message to inform users that there is no \u003ccode\u003eTask\u003c/code\u003e with the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * specified keywords."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void noRelevantTask() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        print(\" I can\u0027t seem to find any task with this keyword! *woof*\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Prints the header before listing the list of \u003ccode\u003eTask\u003c/code\u003e with the specified"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * keywords."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void relevantTaskHeader() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.print(lines);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        System.out.println(\" Here is the list of matching tasks in your storage:\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 218
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eAddCommand\u003c/code\u003e executes a command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * to add a specific task as specified by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Task t;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public AddCommand(Task t) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to add the specified task as requested by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to add the specified task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.save(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eAddCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eAddCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eAddCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 44
    }
  },
  {
    "path": "src/main/java/duke/command/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eCheckCommand\u003c/code\u003e runs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a search in the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e occurring on this"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * specific date as specified by user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class CheckCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to run a search on the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * occurring on this specific date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to execute search"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.checkDate(command.substring(5));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eCheckCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eCheckCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eCheckCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof CheckCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 40
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eCommand\u003c/code\u003e interface provides a \u003ccode\u003eexecute\u003c/code\u003e method to execute the specified command. To"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * implement this interface, it is necessary to provide a definition for the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes this \u003ccode\u003eCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if command fails to execute"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    void execute(String command, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eDeleteCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to delete a specific task as specified by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to delete the specified task as requested by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to delete the specified task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.delete(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eDeleteCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eDeleteCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eDeleteCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof DeleteCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 38
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eDoneCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to specify a specific \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to mark a specified task as completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to mark the specified task as completed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int taskInd \u003d Integer.parseInt(command.substring(5));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.markDone(taskInd - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eDoneCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eDoneCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eDoneCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof DoneCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eExitCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to close the \u003ccode\u003eScanner\u003c/code\u003e object and terminate program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to close \u003ccode\u003eScanner\u003c/code\u003e object and terminate program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ui.goodBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eExitCommand\u003c/code\u003e to the specified object. The result is true if and only if the argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * is not null and is an object that represents the same instance as this object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eExitCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eExitCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof ExitCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 36
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eFindCommand\u003c/code\u003e runs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a search in the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e with specific"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * keywords specified by user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindCommand implements Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    String taskSearch;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindCommand(String taskSearch) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.taskSearch \u003d taskSearch.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to run a search on the list of \u003ccode\u003eTask\u003c/code\u003e for \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * with specific keywords."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if system fails to execute search"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.findRelevantTask(taskSearch);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eFindCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eFindCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eFindCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof FindCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Implements the \u003ccode\u003eCommand\u003c/code\u003e interface. \u003ccode\u003eListCommand\u003c/code\u003e executes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a command to list all \u003ccode\u003eTask\u003c/code\u003e stored in database."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Executes a command to list all \u003ccode\u003eTask\u003c/code\u003e stored in database.."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param command String representation of the command to be executed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param storage Storage of this \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param ui Ui containing all prints for user interactions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute(String command, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        storage.printAll();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compares this \u003ccode\u003eListCommand\u003c/code\u003e to the specified object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * The result is true if and only if the argument is not null and is an object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * that represents the same instance as this object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param o Object to compare this \u003ccode\u003eListCommand\u003c/code\u003e against"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return true if the given object is an instance of this \u003ccode\u003eListCommand\u003c/code\u003e, false otherwise"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else return o instanceof ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eDeadline\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents the a \u003ccode\u003eTask\u003c/code\u003e with a deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * for completion."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    LocalDate toDoBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Deadline(String description, LocalDate toDoBy, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d toDoBy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Deadline(String description, LocalDate toDoBy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d toDoBy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Deadline(String description, String toDoBy, Boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] scheduledTime \u003d toDoBy.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toDoBy \u003d LocalDate.of(Integer.parseInt(scheduledTime[2]),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Month.valueOf(scheduledTime[1].trim().toUpperCase()).getValue(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Integer.parseInt(scheduledTime[0]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (scheduledTime.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.time \u003d LocalTime.parse(scheduledTime[3].trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eDeadline/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e object must be in the form of \"Deadline description /by YYYY/MM/DD\" or"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \"Event description /by YYYY/MM/DD HH:MM\"."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create an \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return an \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Deadline createTask(String message) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage1 \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage2 \u003d \" Oops!! You gonna forget what this is about if you\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage3 \u003d \" Oops!! You did not state when you wanna finish this by...\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \" Are you planning to procrastinate? *woof*\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String messageLowerCase \u003d message.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d messageLowerCase.indexOf(\"/by\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(9, indOfTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String deadline \u003d message.substring(indOfTime + 3).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank() \u0026\u0026 deadline.isBlank()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }else if (deadline.isBlank()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (description.isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String[] splitDeadline \u003d deadline.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] inputDate \u003d splitDeadline[0].trim().split(\"/\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(formatDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    if (splitDeadline.length !\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        LocalTime time \u003d LocalTime.parse(splitDeadline[1].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        return new Deadline(description, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String errMessage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            Task.ui.printFormat(\" Please input deadline in following format:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                                    + \"   YYYY/MM/DD HH:MM!\\n\" + \" *Woof woof*\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String exMessage \u003d Task.ui.printFormat(errMessage1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eDeadline\u003c/code\u003e task with the specified date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eDeadline\u003c/code\u003e task is same as the specified date. Else,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * otherwise."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return toDoBy.compareTo(date) \u003d\u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eDeadline\u003c/code\u003e object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eDeadline\u003c/code\u003e object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String s \u003d \"[D]\" + super.toString() + \" (FINISH by: \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(toDoBy);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return s + \" \" + time.toString() + \")\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 128
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eEvent\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents a \u003ccode\u003eTask\u003c/code\u003e with a specified"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * duration."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    LocalDate schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    LocalTime startTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    LocalTime endTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Event(String description, LocalDate schedule, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Event(String description, String schedule, Boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] scheduledTime \u003d schedule.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.schedule \u003d LocalDate.of(Integer.parseInt(scheduledTime[2]),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Month.valueOf(scheduledTime[1].trim().toUpperCase()).getValue(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Integer.parseInt(scheduledTime[0]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] times \u003d scheduledTime[3].split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.startTime \u003d LocalTime.parse(times[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.endTime \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eEvent\u003c/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e object must be in the form of \"Event description /by YYYY/MM/DD HH:MM-HH:MM\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create an \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return an \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Event createTask(String message) throws DukeException{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage1 \u003d \" Oops!! You missed out some vital information/keyword... *woof*\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage2 \u003d \" Oops!! Are you planning to ghost the event?\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \" You didnt state the time of this event... *woof*\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage3 \u003d \" Oops!! You gonna forget what this is about if you\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \" dont give me a description... *woof*\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String messageLowerCase \u003d message.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            int indOfTime \u003d messageLowerCase.indexOf(\"/at\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(6, indOfTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String at \u003d message.substring(indOfTime + 3).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank() \u0026\u0026 at.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (at.isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else if (description.isBlank()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String[] splitEventTime \u003d at.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] inputDate \u003d splitEventTime[0].split(\"/\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String formatDate \u003d inputDate[0] + \"-\" + inputDate[1] + \"-\" + inputDate[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalDate date \u003d LocalDate.parse(formatDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String[] times \u003d splitEventTime[1].trim().split(\"-\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalTime startTime \u003d LocalTime.parse(times[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    LocalTime endTime \u003d LocalTime.parse(times[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    return new Event(description, date, startTime, endTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String errMessage \u003d Task.ui.printFormat(\" Please input event time in the following format:\\n \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                            + \"   YYYY/MM/DD HH:MM-HH:MM!\\n\" + \" *Woof woof*\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    throw new DukeException(errMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String exMessage \u003d Task.ui.printFormat(errMessage1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eEvent\u003c/code\u003e task with the specified date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eEvent\u003c/code\u003e task is same as the specified date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Else, otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return schedule.compareTo(date) \u003d\u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eEvent\u003c/code\u003e object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[E]\" + super.toString() + \" (APPEAR at: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(schedule)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + \" \" + startTime + \"-\" + endTime + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 115
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTask\u003c/code\u003e object represents a task containing a description. It contains a boolean \u003ccode\u003eisDone\u003c/code\u003e to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * state whether a particular task has been completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    protected final static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Task(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.description \u003d message.stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Task(String message, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.description \u003d message.stripLeading().stripTrailing();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the status icon of this \u003ccode\u003eTask\u003c/code\u003e depending on whether or not it has been completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return the status icon of this \u003ccode\u003eTask\u003c/code\u003e depending on whether or not it has been completed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Marks this \u003ccode\u003eTask\u003c/code\u003e as completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.markDoneSuccess(\"   [\" + this.getStatusIcon() + \"] \" + this.description + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ui.markDoneRepeat();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Compare the date of this \u003ccode\u003eTask\u003c/code\u003e with the specified date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param date the specified Date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return returns true if the date of this \u003ccode\u003eTask\u003c/code\u003e is same as the specified date. Else, otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean compareDate(LocalDate date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * \u003ccode\u003eTodo\u003c/code\u003e class extends the \u003ccode\u003eTask\u003c/code\u003e class. Represents the most basic form of a \u003ccode\u003eTask\u003c/code\u003e,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * consisting of only a description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Todo(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a \u003ccode\u003eTodo\u003c/code\u003e object if input format is correct. Specifically, the input format of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * \u003ccode\u003eTodo\u003c/code\u003e object must be in the form of \"todo description\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param message the command to create a \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws DukeException if the input format is wrong or contains missing details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Todo createTask(String message) throws DukeException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String errMessage \u003d \" Oops!! You forgot to tell me what this task is about... *woof*\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String description \u003d message.substring(5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                String exMessage \u003d Task.ui.printFormat(errMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return new Todo(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String exMessage \u003d Task.ui.printFormat(errMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new DukeException(exMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a string representation of this \u003ccode\u003eTodo\u003c/code\u003e object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @return a string representation of this \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 53
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_nonActionCommands_Success() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] commands \u003d new String[]{\"Bye\", \"list\", \"DoNe\", \"CheCK\", \"Delete\", \"fiNd\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Command[] expected \u003d new Command[]{new ExitCommand(), new ListCommand(), new DoneCommand(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new CheckCommand(), new DeleteCommand(), new FindCommand(\"s\")};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cCommand\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (String s : commands) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            response.add(Parser.parse(s));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int ind \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isSame \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Command r : response) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (!r.equals(expected[ind])) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                isSame \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            ind++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(isSame);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_invalidCommands_Failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Parser.parse(\"deaLine\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" I\u0027m sorry but i do not know what you want to do. *woof*\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"DeadLine\", \"Event\", \"ToDo\"})"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void checkActionTest_ActionCommands_Success(String s) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(ParserStub.checkAction(s).equalsIgnoreCase(s));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"DeadLine\", \"Event\", \"ToDo\"})"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_ActionAddCommands_Success(String s) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new AddCommand(Todo.createTask(\"todo buy books\")), ParserStub.parse(s));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @ValueSource(strings \u003d {\"Delete\"})"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseTest_ActionDeleteCommands_Success(String s) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new DeleteCommand(), ParserStub.parse(s));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 68
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_withoutTime_Success() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"DeAdLine project /by 2019/02/20\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_withTime_Success() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"DeAdLine tutorial /by 2019/02/20 12:00\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] tutorial (FINISH by: 20 February 2019 12:00)\", d.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_Failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  /by 2019/02/20 12:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You gonna forget what this is about if you\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" dont give me a description... *woof*\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDateTime_Failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  project /by \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You did not state when you wanna finish this by...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Are you planning to procrastinate? *woof*\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_keyWord_Failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"deadLine  project by 2019/02/20 16:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You missed out some vital information/keyword... *woof*\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_wrongDateTimeFormat_Failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Deadline.createTask(\"DeAdLine project /by 20/02/2019 1800\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Please input deadline in following format:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \"   YYYY/MM/DD HH:MM!\\n\" + \" *Woof woof*\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✘] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d new Deadline(\"project\", \"20 February 2019\", true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[D][✓] project (FINISH by: 20 February 2019)\", d.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_sameDate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d new Deadline(\"project\", \"20 February 2019\", true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(d.compareDate(LocalDate.parse(\"2019-02-20\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_diffDate() throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(d.compareDate(LocalDate.parse(\"2019-02-21\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samlsm": 112
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_Success() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT meeting /at      2019/02/20 16:00-18:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✘] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_Failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT  /at      2019/02/20 16:00-18:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You gonna forget what this is about if you\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" dont give me a description... *woof*\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDateTime_Failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting /at  \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! Are you planning to ghost the event?\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" You didnt state the time of this event... *woof*\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_keyWord_Failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting  \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You missed out some vital information/keyword... *woof*\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_wrongDateTimeFormat_Failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Event.createTask(\"EVENT meeting /at 2019-02-20 1600-1800 \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Please input event time in the following format:\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \"    YYYY/MM/DD HH:MM-HH:MM!\\n\" + \" *Woof woof*\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT       meeting /at 2019/02/20    16:00-18:00 \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✘] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d new Event(\"meeting\", \"20 February 2019 16:00-18:00\", true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[E][✓] meeting (APPEAR at: 20 February 2019 16:00-18:00)\", e.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_sameDate() throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Event e \u003d Event.createTask(\"EVENT meeting /at 2019/02/20 16:00-18:00 \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(e.compareDate(LocalDate.parse(\"2019-02-20\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void compareDateTest_diffDate() throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Deadline d \u003d Deadline.createTask(\"deadLine        project      /by  2019/02/20\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(d.compareDate(LocalDate.parse(\"2019-02-21\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 105
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void getStatusIconTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tDone \u003d new Task(\"buy books\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task tNotDone \u003d new Task(\"buy books\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"\\u2713\", tDone.getStatusIcon());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"\\u2718\", tNotDone.getStatusIcon());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void markAsDoneTest_Success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Task t \u003d new Task(\"buy books\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[✘] buy books\", t.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[✓] buy books\", t.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 25
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_Success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo Buy Books\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"Buy Books\", t.description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTask_missingDescription_Failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            Todo.createTask(\"toDo  \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String err \u003d \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \" Oops!! You forgot to tell me what this task is about... *woof*\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    + \".~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            assertEquals(err, e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void task_checkFormatPrint() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo        BuY BooKs        \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"BuY BooKs\", t.description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void toStringTest() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d Todo.createTask(\"toDo        BuY BooKs        \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[T][✘] BuY BooKs\", t.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void createTaskWithDoneTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Todo t \u003d new Todo(\"buy bread\", true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(\"[T][✓] buy bread\", t.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "liSt"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "todo buy Books"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLine        complete project     /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLIne /by 2019/02/21"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLine"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "DEADLINE complete project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLine complete project /by 2019/02/21"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLine complete project /by 21/20/2019"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deadLine complete tutorial /by 2019/02/20 12:00"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Event      tutorial           /at"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Event /at 2019/02/20 12:00-18:00"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "EVENT meeting /at      2019/20/02 16:00-18:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "EVENT meeting /at      2019/02/20 16:00-18:00"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "deaLine complete chapter 1 /by 2019/01/20"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "delete 8"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "CheCk 2019/02/20"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "CheCk 2019/20/20"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "CheCk 2019/20"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Check 2019/02/22"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "find"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "find books"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "todo buy boOks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "todo read books"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "find    books"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "find book"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "find book   meeting"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "samlsm": 38
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "if ! ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "#java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "samlsm": 7,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/Main.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/TaskList.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Storage.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Parser.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Ui.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/ParserStub.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/task/Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/CheckCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "../src/main/java/duke/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "samlsm": 20
    }
  }
]
