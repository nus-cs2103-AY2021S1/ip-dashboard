[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"}"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0316059":19,"-":44}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"T | 1 |  abc"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"T | 1 |  return book"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"D | 1 |  meeting  | 2020-01-01 1600"}],"authorContributionMap":{"e0316059":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"This is a simple user guide to Duke, a personal chat-bot to manage your task-list."},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":" There are three types of tasks in Duke: `Todo` `Deadline` and `Event` "},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"All tasks have features **command** and **isDone** (indicating whether this task is completed or not)."},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"    - `Deadline` and `Event` have an additional feature **time**."},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    - Tasks can added, deleted, and marked as done."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"### `todo COMMAND` - Adds a task that is to be done."},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"Duke will add a task of type ToDo into your list."},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"`todo read book`"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":" [T][✘]read book"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":" Now you have 1 tasks in the list.`"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"### `event COMMAND /at DATETIME` - Adds a task that is to be done in a certain date and time."},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"Duke will add a task of type Event into your list."},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"`event meeting /at 2020-01-01 1600`"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"[E][✘]meeting(by: Jan 1 2020 16:00)"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"Now you have 2 tasks in the list.`"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"### `deadline COMMAND /by DATETIME` - Adds a task that is to be done by a certain date and time."},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"Duke will add a task of type Deadline into your list."},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"`event return book /by 2000-01-01 1600`"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"`Got it. I\u0027ve added this task:"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"[D][✘]return book(by: Jan 1 2000 16:00)"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"Now you have 3 tasks in the list.`"},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"### `done INDEX` - Marks task as done."},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"Duke will mark the task indicate by INDEX as done and update the field in your task list."},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"`done 1`"},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"`Nice! I\u0027ve marked this task as done:"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":" [T][✓]read book`"},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"### `delete INDEX` - Deletes a task from the list."},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"Duke will delete the task indicate by INDEX and update your task list."},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"`delete 2`"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"`Noted. I\u0027ve removed this task:"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":" [E][✘]meeting(by: Jan 1 2020 16:00)`"},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"### `list` - Views your current list of tasks."},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":"Duke will show the detailed list of your current tasks."},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"`list`"},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"`[T][✓]read book"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":" [D][✘]return book(by: Jan 1 2000 16:00)`"},{"lineNumber":94,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":95,"author":{"gitId":"e0316059"},"content":"### `stats` - Views the statistics of your task list."},{"lineNumber":96,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":97,"author":{"gitId":"e0316059"},"content":"Duke will show the total number of tasks, the number of task of each type, and the number of completed tasks in your list."},{"lineNumber":98,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":99,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":100,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":101,"author":{"gitId":"e0316059"},"content":"`stats`"},{"lineNumber":102,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":103,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":104,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":105,"author":{"gitId":"e0316059"},"content":"`You have 2 tasks in total, including 0 events, 1 deadlines, and 1 todos."},{"lineNumber":106,"author":{"gitId":"e0316059"},"content":" You have completed 1 tasks.`"},{"lineNumber":107,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":108,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":109,"author":{"gitId":"e0316059"},"content":"### `find KEYWORD` - Finds tasks that matches the given keyword."},{"lineNumber":110,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":111,"author":{"gitId":"e0316059"},"content":"Duke will show all tasks whose command includes the given KEYWORD."},{"lineNumber":112,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":113,"author":{"gitId":"e0316059"},"content":"Example of usage: "},{"lineNumber":114,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":115,"author":{"gitId":"e0316059"},"content":"`find read`"},{"lineNumber":116,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":117,"author":{"gitId":"e0316059"},"content":"Expected outcome:"},{"lineNumber":118,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":119,"author":{"gitId":"e0316059"},"content":"`Here are the matching tasks in your list:"},{"lineNumber":120,"author":{"gitId":"e0316059"},"content":"1.[T][✓]read book`"},{"lineNumber":121,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":122,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":123,"author":{"gitId":"e0316059"},"content":"### `bye` - Exits Duke."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"e0316059"},"content":"Duke will close the dialogue box and exit."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"e0316059"},"content":"`bye`"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"e0316059"},"content":"`Bye. Hope to see you again soon!`"}],"authorContributionMap":{"e0316059":121,"-":12}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" * Represents a \u003ccode\u003eDeadline\u003c/code\u003e object characterized by a \u003ccode\u003ecommand\u003c/code\u003e and a \u003ccode\u003etime\u003c/code\u003e."},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"     * The time of a deadline."},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    private LocalDateTime time;"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eDeadline\u003c/code\u003e with the given \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    public Deadline(String command, LocalDateTime time) {"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"        super(command);"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"        this.time \u003d time;"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"     * Returns the time of a deadline."},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"     * @return the time of this deadline."},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"        return this.time;"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"     * Returns a string representation of a deadline."},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"     * @return the string representation of this deadline."},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"        return \"[D]\" + super.toString() + \"(by: \""},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"                + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":38}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":" * Represents a Duke robot that deals with multiple tasks."},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"     * The \u003ccode\u003eStorage\u003c/code\u003e used in Duke."},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    private Storage storage;"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"     * The list of tasks."},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"     * The user interface."},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"     * The \u003ccode\u003eParser\u003c/code\u003e used in Duke."},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    private Parser parser;"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eDuke\u003c/code\u003e with the given \u003ccode\u003efilePath\u003c/code\u003e."},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    public Duke(String filePath) {"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"            this.tasks \u003d new TaskList(storage.load());"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"            System.out.println(ui.showLoadingError());"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eDuke\u003c/code\u003e."},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"    public Duke() {"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"        this.storage \u003d new Storage(\"data\");"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"            this.tasks \u003d new TaskList(storage.load());"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"            System.out.println(ui.showLoadingError());"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"     * Runs Duke."},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"    public void run() {"},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"        this.parser \u003d new Parser(ui, tasks, storage);"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"        parser.run();"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"     * Runs Duke with the given filePath."},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":"        new Duke().run();"},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"     * Generates a response to user input."},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"     * @param input the user command."},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"     * @return a response message to user."},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"    public String getResponse(String input) {"},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"        this.parser \u003d new Parser(ui, tasks, storage);"},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"        String response \u003d \"\";"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"            response \u003d parser.handleCommand(input);"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":"        } catch (DukeException e) {"},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"            response \u003d ui.showCommandError(e);"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"        return response;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0316059":78,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":" * Represents exceptions that may happen while running Duke."},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"     * The type of DukeException caught."},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"    private String type;"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eDukeException\u003c/code\u003e with the given \u003ccode\u003etype\u003c/code\u003e."},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    public DukeException (String type) {"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"     * Returns the type of a DukeException."},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"     * @return the type of this exception."},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    public String getType() {"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"        return this.type;"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":24}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" * Represents an \u003ccode\u003eEvent\u003c/code\u003e object characterized by a \u003ccode\u003ecommand\u003c/code\u003e and a \u003ccode\u003etime\u003c/code\u003e."},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"     * The time of an event."},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    private LocalDateTime time;"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eEvent\u003c/code\u003e with the given \u003ccode\u003ecommand\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    public Event(String command, LocalDateTime time) {"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"        super(command);"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"        this.time \u003d time;"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"     * Returns the time of an event."},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"     * @return the time of this event."},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"        return this.time;"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"     * Returns a string representation of an event."},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"     * @return the string representation of this event."},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"        return \"[E]\" + super.toString() + \"(at: \""},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"                + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":38}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    private Ui ui;"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"     * Initializes Gui and greets to the user."},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog("},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"                ui.printLogo() + ui.greet(), dukeImage));"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":55}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":" * Represents a Parser. The Parser class deals with making sense of the user command and running the command."},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"     * The user interface."},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    private static Ui ui;"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"     * The list of task."},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    private static TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"     * The storage object used."},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"    private static Storage storage;"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eParser\u003c/code\u003e with the given \u003ccode\u003eUi\u003c/code\u003e, \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e."},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    public Parser(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d ui;"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"        this.storage \u003d storage;"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"     * Greets and runs the user command line by line."},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"    public static void run() {"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"        String greetingwords;"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"        greetingwords \u003d ui.printLogo();"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"        greetingwords +\u003d ui.greet();"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"        System.out.println(greetingwords);"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"        while (scanner.hasNextLine()) {"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"            String command \u003d scanner.nextLine();"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"                System.out.println(handleCommand(command));"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"            } catch (DukeException e) {"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"                System.out.println(ui.showCommandError(e));"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"     * Deals with the user command."},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"     * @param command the command given by user."},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"     * @throws DukeException when the instruction has an invalid task type,"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"     * or the task type is specified but content is empty."},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"    public static String handleCommand(String command) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"        String result;"},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"            result \u003d ui.exit();"},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"            result \u003d ui.printList(tasks.getTasks());"},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"done\")) {"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":"            int index \u003d Integer.parseInt(command.split(\" \")[1]);"},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"            result \u003d tasks.done(index);"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":"            storage.record(tasks.getTasks());"},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"delete\")) {"},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"            result \u003d tasks.delete(Integer.parseInt(command.split(\" \")[1]));"},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"            storage.record(tasks.getTasks());"},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"find\")) {"},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":"            String keyword \u003d command.replace(\"find \", \"\");"},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"            result \u003d tasks.find(keyword);"},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"todo\")) {"},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"            String taskcommand \u003d command.replace(\"todo\", \"\");"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":"            if (!taskcommand.equals(\"\")) {"},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"                result \u003d tasks.add(new ToDo(taskcommand));"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"                throw new DukeException(\"EmptyToDo\");"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"            storage.record(tasks.getTasks());"},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"deadline\")) {"},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"            String taskcommand \u003d command.split(\"/\")[0].replace(\"deadline\", \"\");"},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":"            if (!taskcommand.equals(\"\")) {"},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":"                String time \u003d command.split(\"/\")[1].replace(\"by \", \"\");"},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"                result \u003d tasks.add(new Deadline(taskcommand, LocalDateTime.parse(time, formatter)));"},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":"            } else {"},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"                throw new DukeException(\"EmptyDeadline\");"},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"            storage.record(tasks.getTasks());"},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":"        } else if (command.split(\" \")[0].equals(\"event\")) {"},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"            String taskcommand \u003d command.split(\"/\")[0].replace(\"event\", \"\");"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":"            if (!taskcommand.equals(\"\")) {"},{"lineNumber":94,"author":{"gitId":"e0316059"},"content":"                String time \u003d command.split(\"/\")[1].replace(\"at \", \"\");"},{"lineNumber":95,"author":{"gitId":"e0316059"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":96,"author":{"gitId":"e0316059"},"content":"                result \u003d tasks.add(new Deadline(taskcommand, LocalDateTime.parse(time, formatter)));"},{"lineNumber":97,"author":{"gitId":"e0316059"},"content":"            } else {"},{"lineNumber":98,"author":{"gitId":"e0316059"},"content":"                throw new DukeException(\"EmptyEvent\");"},{"lineNumber":99,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"e0316059"},"content":"            storage.record(tasks.getTasks());"},{"lineNumber":101,"author":{"gitId":"e0316059"},"content":"        } else if (command.equals(\"stats\")) {"},{"lineNumber":102,"author":{"gitId":"e0316059"},"content":"            result \u003d ui.printStats(tasks);"},{"lineNumber":103,"author":{"gitId":"e0316059"},"content":"        } else {"},{"lineNumber":104,"author":{"gitId":"e0316059"},"content":"            throw new DukeException(\"invalid\");"},{"lineNumber":105,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":107,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":108}},{"path":"src/main/java/Statistics.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":" * Represents the task statistics."},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"public class Statistics {"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"    private int numberOfTasks;"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"    private int numberOfEvents;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    private int numberOfDeadlines;"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"    private int numberOfTodos;"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    private int numberOfCompletedTasks;"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"     * Creates a Statistics object."},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"     * Initially all statistics are set to zero."},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    public Statistics() {"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"        this.numberOfTasks \u003d 0;"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"        this.numberOfEvents \u003d 0;"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"        this.numberOfDeadlines \u003d 0;"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"        this.numberOfTodos \u003d 0;"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"        this.numberOfCompletedTasks \u003d 0;"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"     * Records a new event."},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"    public void eventIncrement() {"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"        numberOfTasks++;"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"        numberOfEvents++;"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"     * Records a new deadline."},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"    public void deadlineIncrement() {"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"        numberOfTasks++;"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"        numberOfDeadlines++;"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"     * Records a new todo."},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"    public void todoIncrement() {"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"        numberOfTasks++;"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"        numberOfTodos++;"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"     * Records a new completed task."},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"    public void completeTask() {"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"        numberOfCompletedTasks++;"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"     * Gets the total number of tasks."},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"     * @return number of tasks."},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"    public int getNumberOfTasks() {"},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"        return numberOfTasks;"},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"     * Gets the total number of events."},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":"     * @return number of events."},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":"    public int getNumberOfEvents() {"},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"        return numberOfEvents;"},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":"     * Gets the total number of todos."},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"     * @return number of todos."},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"    public int getNumberOfTodos() {"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":"        return numberOfTodos;"},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"     * Gets the total number of deadlines."},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"     * @return number of deadlines."},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"    public int getNumberOfDeadlines() {"},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":"        return numberOfDeadlines;"},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":"     * Gets the total number of completed tasks."},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"     * @return number of CompletedTasks."},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"    public int getNumberOfCompletedTasks() {"},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":"        return numberOfCompletedTasks;"},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":93}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":" * Represents a Storage. The Storage class deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"     * The filePath of package."},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    private static String filePath;"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"     * The user interface."},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    private static Ui ui;"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eStorage\u003c/code\u003e with the given \u003ccode\u003efilepath\u003c/code\u003e."},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"    public Storage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"        initiateFile();"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"     * Initiates the file."},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"     **/"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    private void initiateFile() {"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"            if (Files.notExists(Paths.get(filePath))) {"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"                Files.createDirectory(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"            if (Files.notExists(Paths.get(filePath + \"/Duke.txt\"))) {"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"                Files.createFile(Paths.get(filePath + \"/Duke.txt\"));"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"     * Loads tasks from the file."},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"     * @return the task list."},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"     * @throws FileNotFoundException when the filePath is invalid."},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"    public static ArrayList\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"        File file \u003d new File(filePath + \"/Duke.txt\");"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"            String[] data \u003d sc.nextLine().split(\" \\\\| \");"},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"            if (data[0].equals(\"T\")) {"},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"                ToDo todo \u003d new ToDo(data[2]);"},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"                tasks.add(todo);"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":"                if (data[1].equals(\"1\")) {"},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"                    todo.setDone();"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"            } else if (data[0].equals(\"D\")) {"},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"                LocalDateTime time \u003d LocalDateTime.parse(data[3], formatter);"},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"                Deadline deadline \u003d new Deadline(data[2], time);"},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":"                tasks.add(deadline);"},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"                if (data[1].equals(\"1\")) {"},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"                    deadline.setDone();"},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":"            } else if (data[0].equals(\"E\")) {"},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":"                LocalDateTime time \u003d LocalDateTime.parse(data[3], formatter);"},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"                Event event \u003d new Event(data[2], time);"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"                tasks.add(event);"},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"                if (data[1].equals(\"1\")) {"},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":"                    event.setDone();"},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":"        return tasks;"},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":"     * Saves tasks to the file."},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"     * @throws IOException ioexception."},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath + \"/Duke.txt\");"},{"lineNumber":94,"author":{"gitId":"e0316059"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":95,"author":{"gitId":"e0316059"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":96,"author":{"gitId":"e0316059"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":97,"author":{"gitId":"e0316059"},"content":"                String text \u003d \"T | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand();"},{"lineNumber":98,"author":{"gitId":"e0316059"},"content":"                fileWriter.write(text + System.lineSeparator());"},{"lineNumber":99,"author":{"gitId":"e0316059"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":100,"author":{"gitId":"e0316059"},"content":"                String text \u003d \"D | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand() + \" | \""},{"lineNumber":101,"author":{"gitId":"e0316059"},"content":"                        + ((Deadline) task).getTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"},{"lineNumber":102,"author":{"gitId":"e0316059"},"content":"                fileWriter.write(text + System.lineSeparator());"},{"lineNumber":103,"author":{"gitId":"e0316059"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":104,"author":{"gitId":"e0316059"},"content":"                String text \u003d \"E | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand() + \" | \""},{"lineNumber":105,"author":{"gitId":"e0316059"},"content":"                        + ((Event) task).getTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"},{"lineNumber":106,"author":{"gitId":"e0316059"},"content":"                fileWriter.write(text + System.lineSeparator());"},{"lineNumber":107,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"e0316059"},"content":"        fileWriter.close();"},{"lineNumber":110,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":112,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"e0316059"},"content":"     * Tries to record the changes tasks to the file."},{"lineNumber":114,"author":{"gitId":"e0316059"},"content":"     * @param tasks the list of task to be written to file."},{"lineNumber":115,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"e0316059"},"content":"    public static void record(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":117,"author":{"gitId":"e0316059"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"e0316059"},"content":"            writeToFile(tasks);"},{"lineNumber":119,"author":{"gitId":"e0316059"},"content":"        } catch (IOException e) {"},{"lineNumber":120,"author":{"gitId":"e0316059"},"content":"            System.out.println(ui.showIoException(e));"},{"lineNumber":121,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":123}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":" * Represents a \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"     * The command of a task."},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"    protected String command;"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"     * Indicates whether the task is done or not."},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eTask\u003c/code\u003e with the given \u003ccode\u003ecommand\u003c/code\u003e."},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"     * Initially the task is not done."},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    public Task(String command) {"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"        this.command \u003d command;"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"     * Returns the command of a task."},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"     * @return the command of this task."},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    public String getCommand() {"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"        return this.command;"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"     * Returns the status of a task."},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"     * @return true if this task is done, false if this task is not done yet."},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"    public boolean getStatus() {"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"        return this.isDone;"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"     * Sets this task as done."},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"    public void setDone() {"},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"        this.isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"     * Returns a string representation of a task."},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"     * @return the string representation of this task."},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"        if (isDone) {"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"            return \"[\\u2713]\" + this.command;"},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"            return \"[\\u2718]\" + this.command;"},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":58}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":" * Represents the task list that stores all current tasks."},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"     * The list of task."},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"     * The user interface."},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    private static Ui ui;"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e with the given arraylist that contains tasks."},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"     * Creates an empty \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    public TaskList() {"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"     * Returns the task list."},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":"     * @return list of this TaskList."},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"        return this.tasks;"},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"     * Adds a \u003ccode\u003etask\u003c/code\u003e to this \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":"     * @param task The task to be added."},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"    public static String add(Task task) {"},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"        tasks.add(task);"},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"        return ui.add(task, tasks);"},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"     * Marks a task in this list as done."},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"     * @param n Index of the task that is done."},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":"    public static String done(int n) {"},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"        assert tasks.size() \u003e 0;"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"        tasks.get(n - 1).setDone();"},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"        return ui.done(n, tasks);"},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"     * Deletes a task in this list."},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"     * @param n Index of the task to be deleted."},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"    public static String delete(int n) {"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":"        assert tasks.size() \u003e 0;"},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"        String result;"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":"        result \u003d ui.delete(n, tasks);"},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"        tasks.remove(n - 1);"},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"        result +\u003d \"\\n\" + ui.count(tasks);"},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"     * Finds tasks that matches the given keyword."},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"     * @param keyword The given keyword."},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"    public String find(String keyword) {"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":"        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"        for (Task task: tasks) {"},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"            if (task.getCommand().contains(keyword)) {"},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"                results.add(task);"},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":"        return ui.findKeyword(results);"},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"    public int getNumTask() {"},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":"        return tasks.size();"},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"    public int getNumTodo() {"},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":"        int result \u003d 0;"},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"        for (Task task: tasks) {"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":94,"author":{"gitId":"e0316059"},"content":"                result++;"},{"lineNumber":95,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":100,"author":{"gitId":"e0316059"},"content":"    public int getNumEvent() {"},{"lineNumber":101,"author":{"gitId":"e0316059"},"content":"        int result \u003d 0;"},{"lineNumber":102,"author":{"gitId":"e0316059"},"content":"        for (Task task: tasks) {"},{"lineNumber":103,"author":{"gitId":"e0316059"},"content":"            if (task instanceof Event) {"},{"lineNumber":104,"author":{"gitId":"e0316059"},"content":"                result++;"},{"lineNumber":105,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":108,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":110,"author":{"gitId":"e0316059"},"content":"    public int getNumDeadline() {"},{"lineNumber":111,"author":{"gitId":"e0316059"},"content":"        int result \u003d 0;"},{"lineNumber":112,"author":{"gitId":"e0316059"},"content":"        for (Task task: tasks) {"},{"lineNumber":113,"author":{"gitId":"e0316059"},"content":"            if (task instanceof Deadline) {"},{"lineNumber":114,"author":{"gitId":"e0316059"},"content":"                result++;"},{"lineNumber":115,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":118,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":120,"author":{"gitId":"e0316059"},"content":"    public int getNumCompleted() {"},{"lineNumber":121,"author":{"gitId":"e0316059"},"content":"        int result \u003d 0;"},{"lineNumber":122,"author":{"gitId":"e0316059"},"content":"        for (Task task: tasks) {"},{"lineNumber":123,"author":{"gitId":"e0316059"},"content":"            if (task.getStatus()) {"},{"lineNumber":124,"author":{"gitId":"e0316059"},"content":"                result++;"},{"lineNumber":125,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":128,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":129}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":" * Represents a \u003ccode\u003eToDo\u003c/code\u003e object characterized by a \u003ccode\u003ecommand\u003c/code\u003e."},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"     * Creates a new \u003ccode\u003eToDo\u003c/code\u003e with the given \u003ccode\u003ecommand\u003c/code\u003e."},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    public ToDo(String command) {"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"        super(command);"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"     * Returns a string representation of a todo."},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     * @return the string representation of this todo."},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":21}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":" * Represents the user interface. This Ui class outputs messages and interacts with the user."},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"     * Creates a new Ui."},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    public Ui() { }"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"     * Prints the logo of Duke."},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"     * @return the logo of Duke."},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"    public static String printLogo() {"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"        return logo;"},{"lineNumber":25,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":27,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0316059"},"content":"     * Greets to the user."},{"lineNumber":29,"author":{"gitId":"e0316059"},"content":"     * @return the greeting message."},{"lineNumber":30,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0316059"},"content":"    public static String greet() {"},{"lineNumber":32,"author":{"gitId":"e0316059"},"content":"        return \"Hello! I\u0027m Duke\\n What can I do for you?\";"},{"lineNumber":33,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":35,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0316059"},"content":"     * Farewell to the user."},{"lineNumber":37,"author":{"gitId":"e0316059"},"content":"     * @return the farewell message."},{"lineNumber":38,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0316059"},"content":"    public static String exit() {"},{"lineNumber":40,"author":{"gitId":"e0316059"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":41,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":43,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"e0316059"},"content":"     * Prints the message of adding a task for the user."},{"lineNumber":45,"author":{"gitId":"e0316059"},"content":"     * @param task the task to be added."},{"lineNumber":46,"author":{"gitId":"e0316059"},"content":"     * @param tasks the list where the task to be added in."},{"lineNumber":47,"author":{"gitId":"e0316059"},"content":"     * @return add command message."},{"lineNumber":48,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"e0316059"},"content":"    public static String add(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":50,"author":{"gitId":"e0316059"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task.toString()"},{"lineNumber":51,"author":{"gitId":"e0316059"},"content":"                + \"\\n Now you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":52,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":54,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"e0316059"},"content":"     * Prints the message of marking a task as done."},{"lineNumber":56,"author":{"gitId":"e0316059"},"content":"     * @param n the index of the task to be marked as done."},{"lineNumber":57,"author":{"gitId":"e0316059"},"content":"     * @param tasks the list where the task is stored in."},{"lineNumber":58,"author":{"gitId":"e0316059"},"content":"     * @return done command message."},{"lineNumber":59,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"e0316059"},"content":"    public static String done(int n, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":61,"author":{"gitId":"e0316059"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":62,"author":{"gitId":"e0316059"},"content":"                + tasks.get(n - 1).toString();"},{"lineNumber":63,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":65,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"e0316059"},"content":"     * Prints the message of deleting a task."},{"lineNumber":67,"author":{"gitId":"e0316059"},"content":"     * @param n the index of the task to be deleted."},{"lineNumber":68,"author":{"gitId":"e0316059"},"content":"     * @param tasks the list where the task to be deleted from."},{"lineNumber":69,"author":{"gitId":"e0316059"},"content":"     * @return delete command message."},{"lineNumber":70,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"e0316059"},"content":"    public static String delete(int n, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":72,"author":{"gitId":"e0316059"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":73,"author":{"gitId":"e0316059"},"content":"                + tasks.get(n - 1).toString();"},{"lineNumber":74,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":76,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"e0316059"},"content":"     * Prints the message of counting the number of total tasks."},{"lineNumber":78,"author":{"gitId":"e0316059"},"content":"     * @param tasks the list of tasks to be counted."},{"lineNumber":79,"author":{"gitId":"e0316059"},"content":"     * @return count command message."},{"lineNumber":80,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"e0316059"},"content":"    public static String count(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":82,"author":{"gitId":"e0316059"},"content":"        return \"Now you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":83,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":85,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"e0316059"},"content":"     * Prints the list of tasks."},{"lineNumber":87,"author":{"gitId":"e0316059"},"content":"     * @param tasks The list of tasks to be printed."},{"lineNumber":88,"author":{"gitId":"e0316059"},"content":"     * @return the list of tasks."},{"lineNumber":89,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"e0316059"},"content":"    public static String printList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":91,"author":{"gitId":"e0316059"},"content":"        String result \u003d \"\";"},{"lineNumber":92,"author":{"gitId":"e0316059"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":93,"author":{"gitId":"e0316059"},"content":"            if (tasks.get(i) !\u003d null) {"},{"lineNumber":94,"author":{"gitId":"e0316059"},"content":"                result +\u003d (i + 1) + \". \" + tasks.get(i).toString() + \"\\n\";"},{"lineNumber":95,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":100,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"e0316059"},"content":"     * Prints the result of tasks that matches the given keyword for the user."},{"lineNumber":102,"author":{"gitId":"e0316059"},"content":"     * @param results The list of matching tasks."},{"lineNumber":103,"author":{"gitId":"e0316059"},"content":"     * @return the result of searching keyword."},{"lineNumber":104,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"e0316059"},"content":"    public String findKeyword(ArrayList\u003cTask\u003e results) {"},{"lineNumber":106,"author":{"gitId":"e0316059"},"content":"        String result \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":107,"author":{"gitId":"e0316059"},"content":"        for (int i \u003d 0; i \u003c results.size(); i++) {"},{"lineNumber":108,"author":{"gitId":"e0316059"},"content":"            if (results.get(i) !\u003d null) {"},{"lineNumber":109,"author":{"gitId":"e0316059"},"content":"                result +\u003d (i + 1) + \". \" + results.get(i).toString() + \"\\n\";"},{"lineNumber":110,"author":{"gitId":"e0316059"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":113,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":115,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"e0316059"},"content":"     * Shows command error for the user while catching duke exceptions."},{"lineNumber":117,"author":{"gitId":"e0316059"},"content":"     * @param e the duke exception caught."},{"lineNumber":118,"author":{"gitId":"e0316059"},"content":"     * @return command error message."},{"lineNumber":119,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"e0316059"},"content":"    public static String showCommandError(DukeException e) {"},{"lineNumber":121,"author":{"gitId":"e0316059"},"content":"        assert e.getType() !\u003d null;"},{"lineNumber":122,"author":{"gitId":"e0316059"},"content":"        String result \u003d \"\";"},{"lineNumber":123,"author":{"gitId":"e0316059"},"content":"        if (e.getType().equals(\"EmptyToDo\")) {"},{"lineNumber":124,"author":{"gitId":"e0316059"},"content":"            result \u003d \"OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":125,"author":{"gitId":"e0316059"},"content":"        } else if (e.getType().equals(\"EmptyDeadline\")) {"},{"lineNumber":126,"author":{"gitId":"e0316059"},"content":"            result \u003d \"OOPS!!! The description of a deadline cannot be empty.\";"},{"lineNumber":127,"author":{"gitId":"e0316059"},"content":"        } else if (e.getType().equals(\"EmptyEvent\")) {"},{"lineNumber":128,"author":{"gitId":"e0316059"},"content":"            result \u003d \"OOPS!!! The description of a event cannot be empty.\";"},{"lineNumber":129,"author":{"gitId":"e0316059"},"content":"        } else if (e.getType().equals(\"invalid\")) {"},{"lineNumber":130,"author":{"gitId":"e0316059"},"content":"            result \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":131,"author":{"gitId":"e0316059"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"e0316059"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":134,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":136,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"e0316059"},"content":"     * Shows loading error for the user while files are not found."},{"lineNumber":138,"author":{"gitId":"e0316059"},"content":"     * @return loading error message."},{"lineNumber":139,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"e0316059"},"content":"    public static String showLoadingError() {"},{"lineNumber":141,"author":{"gitId":"e0316059"},"content":"        return \"File not found\";"},{"lineNumber":142,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":144,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"e0316059"},"content":"     * Shows error for the user while catching IOExceptions."},{"lineNumber":146,"author":{"gitId":"e0316059"},"content":"     * @param e the io exception caught."},{"lineNumber":147,"author":{"gitId":"e0316059"},"content":"     * @return ioexception error message."},{"lineNumber":148,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"e0316059"},"content":"    public static String showIoException(IOException e) {"},{"lineNumber":150,"author":{"gitId":"e0316059"},"content":"        return \"Oops! \" + e.getMessage();"},{"lineNumber":151,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":153,"author":{"gitId":"e0316059"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"e0316059"},"content":"     * Prints statistics for the user."},{"lineNumber":155,"author":{"gitId":"e0316059"},"content":"     * @param tasks The task list."},{"lineNumber":156,"author":{"gitId":"e0316059"},"content":"     * @return task statistics."},{"lineNumber":157,"author":{"gitId":"e0316059"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"e0316059"},"content":"    public static String printStats(TaskList tasks) {"},{"lineNumber":159,"author":{"gitId":"e0316059"},"content":"        int numberOfTasks \u003d tasks.getNumTask();"},{"lineNumber":160,"author":{"gitId":"e0316059"},"content":"        int numberOfEvents \u003d tasks.getNumEvent();"},{"lineNumber":161,"author":{"gitId":"e0316059"},"content":"        int numberOfDeadlines \u003d tasks.getNumDeadline();"},{"lineNumber":162,"author":{"gitId":"e0316059"},"content":"        int numberOfTodos \u003d tasks.getNumTodo();"},{"lineNumber":163,"author":{"gitId":"e0316059"},"content":"        int numberOfCompletedTasks \u003d tasks.getNumCompleted();"},{"lineNumber":164,"author":{"gitId":"e0316059"},"content":"        String result \u003d new StringBuilder()"},{"lineNumber":165,"author":{"gitId":"e0316059"},"content":"                .append(\"You have \").append(numberOfTasks).append(\" tasks in total, including \")"},{"lineNumber":166,"author":{"gitId":"e0316059"},"content":"                .append(numberOfEvents).append(\" events, \")"},{"lineNumber":167,"author":{"gitId":"e0316059"},"content":"                .append(numberOfDeadlines).append(\" deadlines, and \")"},{"lineNumber":168,"author":{"gitId":"e0316059"},"content":"                .append(numberOfTodos).append(\" todos.\\n\")"},{"lineNumber":169,"author":{"gitId":"e0316059"},"content":"                .append(\"You have completed \").append(numberOfCompletedTasks).append(\" tasks.\\n\")"},{"lineNumber":170,"author":{"gitId":"e0316059"},"content":"                .toString();"},{"lineNumber":171,"author":{"gitId":"e0316059"},"content":"        return result;"},{"lineNumber":172,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":173}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"e0316059":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"e0316059":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    public void dummyTest(){"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":10}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"public class EventTest {"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    public void testEventToString(){"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"        Event event \u003d new Event(\"meeting\", LocalDateTime.parse(\"2000-01-01 2359\", formatter));"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"        assertEquals(\"[E][\\u2718]meeting(at: Jan 1 2000 23:59)\", event.toString());"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"e0316059"},"content":"    public void testSetDone(){"},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"        Event event \u003d new Event(\"return book\", LocalDateTime.parse(\"2000-01-01 2359\", formatter));"},{"lineNumber":20,"author":{"gitId":"e0316059"},"content":"        assertEquals(false, event.getStatus());"},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"        event.setDone();"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"        assertEquals(true, event.getStatus());"},{"lineNumber":23,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":24}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":""},{"lineNumber":5,"author":{"gitId":"e0316059"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"    public void testToString() {"},{"lineNumber":8,"author":{"gitId":"e0316059"},"content":"        Task task \u003d new Task(\"return book\");"},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"        assertEquals(\"[\\u2718]return book\", task.toString());"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"e0316059"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"    public void testGetCommand() {"},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"        Task task \u003d new Task(\"return book\");"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"        assertEquals(\"return book\", task.getCommand());"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"}"}],"authorContributionMap":{"e0316059":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"e0316059"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"event meeting /at 1200"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"bye"}],"authorContributionMap":{"e0316059":4}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"e0316059"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0316059"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"e0316059"},"content":"if not exist C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin mkdir C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0316059"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"e0316059"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0316059"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"e0316059"},"content":"javac  -cp C:\\Users\\e0316059\\Desktop\\cs2103 ip\\src\\main\\java -Xlint:none -d C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin C:\\Users\\e0316059\\Desktop\\cs2103 ip\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"e0316059"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"e0316059"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"e0316059"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"e0316059"},"content":")"},{"lineNumber":16,"author":{"gitId":"e0316059"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"e0316059"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"e0316059"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"e0316059"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"e0316059"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"e0316059":16,"-":6}}]
