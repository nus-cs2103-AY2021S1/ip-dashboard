[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The main class for the project. Initialises the Duke class and runs it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a Duke object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        storage \u003d new Storage(\"data/data.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tasks \u003d new TaskList(storage.processStorage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Runs the Duke programme."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ui.displayMessage(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ui.newLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 54,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The Parser class parses and processes user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the appropriate {@link Command} to execute next."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param fullCommand A String read from user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The corresponding {@link Command} for the input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws DukeException Exception when parsing the input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        fullCommand \u003d fullCommand.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String[] fullCommandArray \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        fullCommand \u003d fullCommand.strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (fullCommand.equals(CommandType.BYE.getType())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.LIST.getType())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.PENDING.getType())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new PendingCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.COMPLETED.getType())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new CompletedCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.SHOW.getType())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The show command requires a date in yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.FIND.getType())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The find command requires keyword.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.DELETE.getType())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidCommandException(\"☹ OOPS!!! The delete command requires the index of a task.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommand.equals(CommandType.DONE.getType())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidCommandException(\"☹ OOPS!!! The done command requires the index of a task.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.LIST.getType())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The list command does not take any additional argument(s).\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.BYE.getType())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The bye command does not take any additional argument(s).\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.PENDING.getType())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The pending command does not take any additional argument(s).\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.COMPLETED.getType())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new InvalidArgumentException(\"☹ OOPS!!! The completed command does not take any additional argument(s).\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.SHOW.getType())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(fullCommandArray[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return new ShowCommand(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidArgumentException(\"☹ OOPS!!! The show command requires a date in yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.DONE.getType())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new DoneCommand(Integer.parseInt(fullCommandArray[1]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.DELETE.getType())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(fullCommandArray[1]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else if (fullCommandArray[0].equals(CommandType.FIND.getType())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return new FindCommand(fullCommandArray[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String type \u003d fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String temp \u003d fullCommand.strip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (temp.equals(TaskType.TODO.getType()) || temp.equals(TaskType.DEADLINE.getType()) || temp.equals(TaskType.EVENT.getType())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidArgumentException(\"☹ OOPS!!! The description of \" + (temp.equals(TaskType.EVENT.getType()) ? \"an \" : \"a \") + temp + \" cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } else if (temp.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidTaskTypeException(\"☹ OOPS!!! The type of a task cannot be empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (type \u003d\u003d null || (!type.equals(TaskType.TODO.getType()) \u0026\u0026 !type.equals(TaskType.DEADLINE.getType()) \u0026\u0026 !type.equals(TaskType.EVENT.getType()))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidTaskTypeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String details \u003d fullCommand.substring(type.length());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (type.equals(TaskType.TODO.getType())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                ToDo t \u003d new ToDo(details.strip());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return new AddCommand(t);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } else if (type.equals(TaskType.DEADLINE.getType())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                String[] detailsArray \u003d details.split(\"/by\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                if (detailsArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    throw new InvalidArgumentException(\"☹ OOPS!!! Please specify a due date for the deadline.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                LocalDate date;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    date \u003d LocalDate.parse(detailsArray[1].strip());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    throw new InvalidArgumentException(\"☹ OOPS!!! Please enter a date in yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Deadline d \u003d new Deadline(detailsArray[0].strip(), date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return new AddCommand(d);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                String[] detailsArray \u003d details.split(\"/at\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                if (detailsArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    throw new InvalidArgumentException(\"☹ OOPS!!! Please specify a date for the event.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                LocalDate date;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    date \u003d LocalDate.parse(detailsArray[1].strip());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    throw new InvalidArgumentException(\"☹ OOPS!!! Please enter a date in yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                Event e \u003d new Event(detailsArray[0].strip(), date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                return new AddCommand(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 108
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The Storage class handles the read and write of data from and to the local disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Data file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final String FILE_PATH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a Storage object with a file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param path File path to read from and write to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Storage(String path) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FILE_PATH \u003d path;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            File f \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                if (f.getParentFile().mkdirs() \u0026\u0026 f.createNewFile()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                    System.out.println(\"\\tStorage space for you tasks has been initialized successfully.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            System.out.println(\"Oops! Something went wrong when loading your tasks from storage.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Reads saved data from the storage file and returns a list of {@link Task}s."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A list of {@link Task}s."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws IOException Exception when reading from storage file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    List\u003cTask\u003e processStorage() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        File f \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String[] dataArray \u003d data.split(\" \\\\| \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            switch (dataArray[1]) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                list.add(new ToDo(dataArray[3], dataArray[2]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                list.add(new Event(dataArray[3], LocalDate.parse(dataArray[4]), dataArray[2]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                list.add(new Deadline(dataArray[3], LocalDate.parse(dataArray[4]), dataArray[2]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new IOException(\"Invalid data\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Writes a list of {@link Task}s to the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param list A list of {@link Task}s."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws IOException Exception when writing to storage file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void writeData(List\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        FileWriter fw \u003d new FileWriter(FILE_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            toWrite +\u003d (t.encode() + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fw.write(toWrite);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 89
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The Ui class handles the I/O of the programme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Scanner s;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates an Ui object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Displays a message in between two horizontal lines."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param message A String to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void displayMessage(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println(\"\\t \" + message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Displays the logo of Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void showLogo() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String logo \u003d \"\\t██████╗ ██╗   ██╗██╗  ██╗███████╗\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t██╔══██╗██║   ██║██║ ██╔╝██╔════╝\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t██║  ██║██║   ██║█████╔╝ █████╗  \\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t██║  ██║██║   ██║██╔═██╗ ██╔══╝  \\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t██████╔╝╚██████╔╝██║  ██╗███████╗\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println(\"\\tHello boss! This is\\n\\n\" + logo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Displays the welcome message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void showWelcome() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        showLogo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println(\"\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println(\"\\t_____________________________________________________\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void showLine() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println(\"\\t_____________________________________________________\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Prints a new empty line."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void newLine() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Displays the exiting message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        displayMessage(\"Bye. Hope to see you again soon\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Reads in a line and returns it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The next line read from the terminal."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 76
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.StorageAccessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents a {@link Command} that will add a {@link Task} to the {@link TaskList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The Task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new AddCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param task The {@link Task} to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides execute in {@link Command}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Executes the command to add the {@link Task} and save it to storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws DukeException Exception when writing data to storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output +\u003d (\"\\t \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output +\u003d (\"\\t Now you have \" + tasks.getSize() + (tasks.getSize() \u003e 1 ? \" tasks\" : \" task\") + \" in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.displayMessage(output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            storage.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new StorageAccessException(\"☹ OOPS!!! Something went wrong when saving the new task.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 50
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides execute in {@link Command}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Executes the command to print an exiting message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides isExit in {@link Command}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return true to indicate an exiting instruction."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the command that will be executed by Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @throws DukeException Exception when the execution encounters an error at any stage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a boolean to indicate if the Command is an exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return Boolean flag that is false by default."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 29
    }
  },
  {
    "path": "src/main/java/duke/command/CompletedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class CompletedCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.displayMessage(tasks.showCompletedTasks());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 13
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.StorageAccessException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Index of {@link Task} to be deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new DeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param index The index of the {@link Task} to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides execute in {@link Command}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Executes the command to delete the {@link Task} and save the changes to storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (index \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidArgumentException(\"☹ OOPS!!! The task index you give is not found.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String output \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output +\u003d (\"\\t \" + tasks.getTask(index) + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output +\u003d (\"\\t Now you have \" + (tasks.getSize() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            storage.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (InvalidArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            throw new StorageAccessException(\"☹ OOPS!!! Something went wrong when removing the task from storage.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Index of {@link Task} to be marked as completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new DoneCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param index The index of the {@link Task} to be marked as completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides execute in {@link Command}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Executes the command to mark the {@link Task} as completed and save the changes to storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            if (index \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                throw new InvalidArgumentException(\"☹ OOPS!!! The task index you give is not found.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            tasks.markDone(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            String msg \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            msg +\u003d (\"\\t \" + tasks.getTask(index));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(msg);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            storage.writeData(tasks.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 48
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.displayMessage(tasks.showMatchingTasks(keyword));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 19
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(\"No tasks on your agenda.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            ui.displayMessage(String.format(\"Here are the tasks in your agenda:\\n%s\", tasks.listTasks()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 16
    }
  },
  {
    "path": "src/main/java/duke/command/PendingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class PendingCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.displayMessage(tasks.showPendingTasks());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 13
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The date filter for the {@link Task}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new ShowCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param date The date to query for."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ShowCommand(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Lists all the {@link Task}s that happen on or due at a certain date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks The list of {@link Task}s."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param ui The Ui object that is used by Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param storage The Storage object of Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ui.displayMessage(tasks.showTasksOnDate(date));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 34
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the possible exceptions that can be thrown from the {@link duke.Duke} package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param errorMessage The detail error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the possible exceptions that can be thrown when the arguments of a command are invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new InvalidArgumentException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param errorMessage The detail error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the possible exceptions that can be thrown when the user input invalid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new InvalidCommandException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param errorMessage The detail error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the possible exceptions that can be thrown when the type of task in invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class InvalidTaskTypeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new InvalidTaskTypeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param errorMessage The detail error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public InvalidTaskTypeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageAccessException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents the possible exceptions that can be thrown when the programme fails to write to / read from storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class StorageAccessException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new StorageAccessException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param errorMessage The detail error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public StorageAccessException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 14
    }
  },
  {
    "path": "src/main/java/duke/task/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    SHOW(\"show\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    ADD(\"add\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    PENDING(\"pending\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    COMPLETED(\"completed\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Type of Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private CommandType(String type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of the {@link duke.command.Command} type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String of the {@link duke.command.Command} type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents a {@link Task} that has a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The date on which the {@link Task} is due."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Deadline object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The new Deadline is not completed by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param endDate The due date of the Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Deadline(String description, LocalDate endDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Deadline object based on completion status provided."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the Deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param endDate The due date of the Deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param completionStatus The completion status of the Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Deadline(String description, LocalDate endDate, String completionStatus) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description, completionStatus);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides getType method in {@link Task}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return Type of Deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides getDate method in {@link Task}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The date of the Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of a Deadline."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides toString in {@link Task}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String representation of a Deadline."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + endDate.format(DateTimeFormatter.ofPattern(\"MMMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents a {@link Task} that happens on a particular date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The date on which the Event is happening."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Event object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The new Event is not completed by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param date The date on which the Event is happening."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Event object based on completion status provided."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param date The date on which the Event is happening."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param completionStatus The completion status of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Event(String description, LocalDate date, String completionStatus) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description, completionStatus);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides getType method in {@link Task}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return Type of Event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides getDate method in {@link Task}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The date of the Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of the Event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides toString in {@link Task}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String representation of the Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The class that represents a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Keeps track of how many tasks have been created."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected static int numOfTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The description of the Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * A boolean value to indicate if the task is completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * The id of a Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Assigns its id to be the current number of Tasks + 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description fo the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.id \u003d numOfTasks++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new Task based on the completion status given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Assigns its id to be the current number of Tasks + 1."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param completionStatus The completion status of the Task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    Task(String description, String completionStatus) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.isCompleted \u003d completionStatus.equals(\"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.id \u003d numOfTasks++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a tick: \u003ccode\u003e✓\u003c/code\u003e if the Task is completed, else a cross \u003ccode\u003e✘\u003c/code\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return An icon to indicate whether the Task is completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return (isCompleted ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns if the Task is completed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return Boolean to indicate if the Task is completed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    boolean isTaskDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the type of the Task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The type of the Task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the date of the Task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The date of the Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    LocalDate getDate() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the id of the Task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The id of the Task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    int getId() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Marks the Task as completed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        isCompleted \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Encodes the Task to a String that will be saved in the storage."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String encoding of the Task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return (getId() + \" | \" + getType() + \" | \" + (isCompleted ? \"1\" : \"0\") + \" | \" + description + (getDate() !\u003d null ? (\" | \" + getDate()) : \"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public boolean includesKeyword(String keyword) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of the Task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String representation of the Task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 119
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * The TaskList class is a list of {@link Task}s."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * It supports the basic operations of manipulating tasks and answering queries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates an empty list of {@link Task}s."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a new TaskList with a provided list of {@link Task}s."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param tasks A list of {@link Task}s."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        list \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Adds a {@link Task} to the end of the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param task A task to be added to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Marks a {@link Task} at a certain index (starting from 1) as completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param index The index of the task to be marked as completed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.list.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a {@link Task} in the list based on the given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param index Index of the task in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The task at the provided index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return list.get(index - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the current number of {@link Task}s in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The current size of the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns the list of all the {@link Task}s in the current list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns all the {@link Task}s formatted properly."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A formatted String of all the {@link Task}s."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String listTasks() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c this.list.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(\"\\t \").append(i + 1).append(\".\").append(list.get(i)).append(i \u003d\u003d list.size() - 1 ? \"\" : \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns all the {@link Task}s that happen on or due at a specific date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param date The date to search for."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A formatted String of all the tasks that happen on or due at the provided date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String showTasksOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTask\u003e filtered \u003d list.stream().filter(task -\u003e task.getDate() !\u003d null \u0026\u0026 task.getDate().equals(date)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (filtered.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return \"There are no tasks happening on: \" + date.format(DateTimeFormatter.ofPattern(\"MMMM d yyyy\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output.append(\"Here are the tasks happening on: \").append(date).append(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c filtered.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(String.format(\"\\t %d. %s\" + (i \u003d\u003d filtered.size() - 1 ? \"\" : \"\\n\"), i + 1, filtered.get(i)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns all the {@link Task}s that have not been completed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A formatted String of all pending {@link Task}s."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String showPendingTasks() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTask\u003e pendingTasks \u003d list.stream().filter(task -\u003e !task.isTaskDone()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (pendingTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return \"Congratulations! You have completed all your tasks!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output.append(\"Here are the tasks that are pending: \\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c pendingTasks.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(String.format(\"\\t %d. %s\" + (i \u003d\u003d pendingTasks.size() - 1 ? \"\" : \"\\n\"), i + 1, pendingTasks.get(i)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns all the {@link Task}s that have been completed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A formatted String of all completed {@link Task}s."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String showCompletedTasks() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTask\u003e completedTasks \u003d list.stream().filter(Task::isTaskDone).collect(Collectors.toList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (completedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return \"☹ OOPS!!! You have not completed any task yet.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output.append(\"Here are the tasks that have been completed: \\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c completedTasks.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(String.format(\"\\t %d. %s\" + (i \u003d\u003d completedTasks.size() - 1 ? \"\" : \"\\n\"), i + 1, completedTasks.get(i)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns all the {@link Task}s that contains the keyword."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param keyword A String to search for."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A formatted String of {@link Task}s with description that includes this keyword."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String showMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d list.stream().filter(task -\u003e task.includesKeyword(keyword)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        if (matchingTasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            return \"There are no tasks containing keyword: \" + keyword;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        output.append(\"Here are the tasks containing keyword: \").append(keyword).append(\"\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            output.append(String.format(\"\\t %d. %s\" + (i \u003d\u003d matchingTasks.size() - 1 ? \"\" : \"\\n\"), i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Delete a {@link Task} at a given index."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param index The index of the {@link Task} to be deleted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.list.remove(index - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 172
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents all the possible types of a {@link Task}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    DEADLINE(\"deadline\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a TaskType object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param type Type of a {@link Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    private TaskType(String type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of the {@link Task} type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String of the {@link Task} type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 31
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " * Represents a {@link Task} that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a ToDo that is by default not completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the ToDo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Instantiates a ToDo based on completion Status."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param description The description of the ToDo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @param completionStatus The completion status of the ToDo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public ToDo(String description, String completionStatus) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        super(description, completionStatus);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides getType method in {@link Task}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return Type of ToDo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Returns a String representation of the ToDo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * Overrides toString in {@link Task}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     * @return A String representation of the ToDo."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 42
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseListCommand_lowercaseTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseListCommand_nonLowercaseTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseListCommand_invalidArgumentExceptionThrow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"list blah\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The list command does not take any additional argument(s).\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseByeCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseByeCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"bye blah\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The bye command does not take any additional argument(s).\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDoneCommandTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"done 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDoneCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"done\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The done command requires the index of a task.\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseShowCommandTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"show 2020-08-25\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof ShowCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseShowCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"show\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The show command requires a date in yyyy-mm-dd.\", e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeleteCommandTest() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"delete 1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeleteCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The delete command requires the index of a task.\", e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseTodoCommandTest() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"todo reading\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseTodoCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"todo\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseEventCommandTest() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"event reading /at 2020-08-24\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseEventCommand_invalidArgumentExceptionThrown1() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"event\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of an event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseEventCommand_invalidArgumentExceptionThrown2() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"event reading\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please specify a date for the event.\", e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseEventCommand_invalidArgumentExceptionThrown3() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"event reading /at\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please specify a date for the event.\", e.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeadlineCommandTest() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"deadline reading /by 2020-08-24\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeadlineCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeadlineCommand_invalidArgumentExceptionThrown2() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"deadline reading\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please specify a due date for the deadline.\", e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseDeadlineCommand_invalidArgumentExceptionThrown3() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"deadline reading /by\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please specify a due date for the deadline.\", e.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parsePendingCommandTest() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"pending\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof PendingCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parsePendingCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"pending 123\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The pending command does not take any additional argument(s).\", e.getMessage());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseCompletedCommandTest() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"completed\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertTrue(c instanceof CompletedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void parseCompletedCommand_invalidArgumentExceptionThrown() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            Command c \u003d Parser.parse(\"completed 123\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The completed command does not take any additional argument(s).\", e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 248
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void create_Deadline_correctly() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Deadline d \u003d new Deadline(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals( \"[D][✘] iP Week 3 (by: August 27 2020)\", d.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_incompleteDeadline_Test() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Deadline d \u003d new Deadline(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"D | 0 | iP Week 3 | 2020-08-27\", d.encode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_completedDeadline_Test() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Deadline d \u003d new Deadline(\"iP Week 3\", date, \"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"D | 1 | iP Week 3 | 2020-08-27\", d.encode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 28
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void create_Event_correctly() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event e \u003d new Event(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"[E][✘] iP Week 3 (at: August 27 2020)\", e.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_incompleteEvent_Test() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event e \u003d new Event(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"E | 0 | iP Week 3 | 2020-08-27\", e.encode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_completedToDo_Test() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event e \u003d new Event(\"iP Week 3\", date, \"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"E | 1 | iP Week 3 | 2020-08-27\", e.encode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 28
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void emptyTaskList_zeroSize() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void addTaskTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event event \u003d new Event(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(1, tasks.getSize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"[E][✘] iP Week 3 (at: August 27 2020)\", tasks.getTask(1).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void deleteTaskTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event event \u003d new Event(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.deleteTask(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void showTasksOnDateTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event event1 \u003d new Event(\"iP Week 3\", date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event event2 \u003d new Event(\"Reading\", date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        Event event3 \u003d new Event(\"Finals\", date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(event1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(event2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        tasks.addTask(event3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"\\t 1.[E][✘] iP Week 3 (at: August 27 2020)\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t 2.[E][✘] Reading (at: August 27 2020)\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "                \"\\t 3.[E][✘] Finals (at: August 27 2020)\\n\", tasks.showTasksOnDate(date));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 50
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_incompleteToDo_Test() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Reading\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals( \"T | 0 | Reading\", todo.encode());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    void encode_completedToDo_Test() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Reading\", \"1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "        assertEquals(\"T | 1 | Reading\", todo.encode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "deadline project 1 /by Thursday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "blah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "event project meeting /at 2020-08-24"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "deadline iP week 3 /by 2020-08-27"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "deadline reading /by 2020-08-27"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "show 2020-08-27"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "todo reading book"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "find reading"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "pending"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "completed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 27
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "# delete saved data from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "if [ -e \"./data/\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  rm -rf data/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "if"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "  )"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 12,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/Storage.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/Parser.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/Ui.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/TaskList.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/TaskType.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/CommandType.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/task/ToDo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/ByeCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/PendingCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/Command.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/AddCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/CompletedCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/command/ShowCommand.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/exception/InvalidTaskTypeException.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/exception/InvalidArgumentException.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/exception/InvalidCommandException.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/exception/StorageAccessException.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asthenosphere"
        },
        "content": "../src/main/java/duke/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "Asthenosphere": 26
    }
  }
]
