[
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Represents the type of commands Duke can do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Commands:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * INVALID - Unrecognized commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * EXIT - \u0027bye\u0027 that ends Duke\u0027s session."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * LIST - \u0027list\u0027 which lists Duke\u0027s recorded tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DONE - Helps mark task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DELETE - Indicates task to be removed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Types of task that can be made:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DEADLINE, EVENT, TO DO"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    INVALID, EXIT, LIST,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    DONE, DELETE, FIND,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 17
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deadline inherits from Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deadline is a Task that has an added characteristic of a dueDate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected LocalDate dueDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Deadline(String name, LocalDate details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.dueDate \u003d details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Deadline in String format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.dueDate.format(formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"D - \" + super.toSaveData() + \" - \" + this.dueDate + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDeadline() + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 37
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Duke\u0027s main class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Consists of a Storage, TaskList and Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Contains the program loop in run() method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Duke\u0027s Constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Initializes ui, storage and tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Loads in save file (if any)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param filePath  File path for save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFileContents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"... Oh! You\u0027re back!\\nEr, gimme a sec...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Runs Duke within a program loop."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * 1. Displays Greetings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * 2. Takes in user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * 3. Parse user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * 4. Respond to command in user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * 5. Return to 2 and loop"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * OR save and exit from program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Greet first"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ui.displayGreetings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Loop for program"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Read user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                String userInput \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Parse out the command from the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                Command cmd \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Use switch to process the commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                switch (cmd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case EXIT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printList(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.createTodo(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.createDeadline(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.createEvent(userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case INVALID:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Duke does not recognize the commands"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t recognize what you just entered...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.markTaskDone(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.deleteTask(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    ui.printOutputSymbol();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.searchForKeyword(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry I think I something went wrong...\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                ui.printError(e);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Always end off with a line breaker"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                ui.printLineBreaker();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Display farewells"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ui.displayFarewells();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Try to Save the data"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            storage.saveToFile(tasks.getTasks());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            ui.printError(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 114,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Duke\u0027s Custom Exception Class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Event inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Event is a Task that has an added characteristic of a duration."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Event(String name, String details) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.duration \u003d details;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns duration of the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Duration of the Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getEventDetails() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        //return this.duration.format(formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"E - \" + super.toSaveData() + \" - \" + this.duration + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getEventDetails() + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 37
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with making sense of the user command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Parses the provided user input into something Duke understands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param userInput String containing the user\u0027s input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return The command interpreted."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If input is invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check if it is a single word command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if(userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return Command.EXIT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return Command.LIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Process input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (instructions[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            /** Command for to do Tasks creation **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Add check for command details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If command has details, return command to add to do"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return Command.TODO;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            /** Command: \"deadline \u003ctaskName\u003e /by \u003cdeadline\u003e\" **/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Extract Details from command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                String[] details \u003d instructions[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if have valid deadline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (hasCmdDetails(details)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    checkDate(details[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DEADLINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            /** Command: \"deadline \u003ctaskName\u003e /at \u003cevent\u003e\" **/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Extract Details from command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                String[] details \u003d instructions[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if have valid event time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (hasCmdDetails(details)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.EVENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"done \u003ctask\u003e\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If valid \u003ctask\u003e, mark done"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Integer.parseInt(instructions[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Only add if task number is a valid number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DONE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid number...\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"delete \u003ctaskNumber\u003e\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If valid \u003ctaskNumber\u003e, remove from list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Integer.parseInt(instructions[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Only delete if task number is a valid number"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DELETE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    //System.out.println(\"Caught nfe\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid number...\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"find \u003ckeyword\u003e\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return Command.FIND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return Command.INVALID;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * If the position is unset, NaN is returned."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param cmd String array with the command sectioned out."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return True/False value of whether the command is complete."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If command has missing data."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static boolean hasCmdDetails(String[] cmd) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (cmd[1].equals(\"\") || cmd[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                /** Make sure command has follow up details **/"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if there is second word"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if second word is just whitespace"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If so, command has no details"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Check if there is even anything after command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Exception thrown if userInput.split() fails"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command has no details, throw exception"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Whoops! I think you forgot to finish your \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    + \"command. Sorry but I need it. D:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * If the position is unset, NaN is returned."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param dateString String that may be a LocalDate."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If dateString is not a LocalDate."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static void checkDate(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            LocalDate df \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Check if string can be recognized as a valid LocalDate"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If can\u0027t, print out error message"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Whoops! I think there is an error in your date.\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    \"\\nPlease Try Again!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 169
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Loads save file contents (if any)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://nus-cs2103-ay2021s1.github.io/website/book/cppToJava/misc/fileAccess/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Array list of Tasks deciphered from save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws FileNotFoundException  If no save file detected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Retrieved from https://nus-cs2103-ay2021s1.github.io/website/book/cppToJava/misc/fileAccess/ */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Initialize list to be returned"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        File data \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Scanner s \u003d new Scanner(data); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Read the data line"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String dataLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Split data line into components"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String[] taskDetails \u003d dataLine.split(\" - \", 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Depending on first letter, determine what task it is"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (taskDetails[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                Task t \u003d new Todo(taskDetails[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.markedDone(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                list.add(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else if (taskDetails[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Try to add Deadline based off file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Task t \u003d new Deadline(taskDetails[2], LocalDate.parse(taskDetails[3]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        t.markedDone(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    list.add(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch(Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    //If can\u0027t, throw Duke\u0027s exception"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Check if string can be recognized as a valid LocalDate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // If can\u0027t, print out error message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    System.out.println(\"Er, I found an error in the storage data.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    System.out.println(\"This line will be excluded from my task list:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + dataLine);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else if (taskDetails[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                Task t \u003d new Event(taskDetails[2], taskDetails[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.markedDone(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                list.add(t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Basic Error, if invalid task, print error message"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.print(\"Sorry I could not comprehend this: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.println(dataLine);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // End of Loop"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // return the final task list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Saves Duke\u0027s current data into a file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param list ArrayList of Tasks Duke currently has."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If Duke is unable to save into file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IOException If unable to create or write into specified file path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void saveToFile(ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Create file if there is none"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            createFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Empties file if there is one"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            clearTheFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"☹️Sorry, something went wrong and I couldn\u0027t save my data... \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Try to write into save file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                writeToFile(list.get(i).toSaveData());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.print(\"Something happened and this failed to be saved: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.println(list.get(i));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://nus-cs2103-ay2021s1.github.io/website/book/cppToJava/misc/fileAccess/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param textToAdd String of text to append to save file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IOException If unable to write to file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Empties last save file of content."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://stackoverflow.com/questions/29878237/"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *     java-how-to-clear-a-text-file-without-deleting-it/42282671"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IOException  If cannot empty file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void clearTheFile() throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FileWriter fwOb \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        PrintWriter pwOb \u003d new PrintWriter(fwOb, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        pwOb.flush();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        pwOb.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fwOb.close();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates file directory (if not already existing)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates new save file (if not already existing)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Make directory if it doesn\u0027t already exists"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        dir.mkdir();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // create a File for the given file path"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        new File(filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 151
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Parent Class for all Tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Task contains a name describing the task and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * a isDone boolean that indicates whether"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * the task is completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Variables"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param name  Name of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns status of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Task Status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Set Task status to specified value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param status  Status to set Task to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Lateral location."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void markedDone(boolean status) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns name of the Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Lateral location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns details of the Task in a format loadable by Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return String in proper format for Duke\u0027s save file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"1 - \" + this.name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"0 - \" + this.name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name and status"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"[✓] \" + this.name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"[✗] \" + this.name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 76
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * e.g., it has operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Note: limit storage to 100 items **/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructors."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.tasks \u003d list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns list of Tasks Duke knows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Task List."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a to-do task into TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The to-do command and its details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void createTodo(String command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Todo(instructions[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"added: \" + t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"There is now \" + tasks.size() + \" tasks in the list!\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a deadline task into TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The deadline command and its details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void createDeadline(String command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] details \u003d instructions[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Deadline(details[0], LocalDate.parse(details[1]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"added: \" + t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"There is now \" + tasks.size() + \" tasks in the list!\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a Event task into TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The event command and its details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void createEvent(String command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] details \u003d instructions[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"added: \" + t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"There is now \" + tasks.size() + \" tasks in the list!\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Identifies a specific task and mark it as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The done command and its details."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void markTaskDone(String command) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            t.markedDone(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"Congratulations! I\u0027ve helped you mark the task as done:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"    \" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid index...\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Identifies a specific task and deletes it from TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The delete command and its details."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deleteTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"Noted! I\u0027ve helped you remove the following task:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.print(\"    \" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"    Now, there is \" + tasks.size() + \" tasks in the list!\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid index...\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns whether the task list is empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return True if list is empty, False otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean isListEmpty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints out all of the tasks in the TaskList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void printAllTasks() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Prints all tasks in Duke\u0027s list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Enumerator"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.print((i+1) + \".\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Actual Task"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(tasks.get(i));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Searches through all of Duke\u0027s tasks and"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * print out tasks with given keyword"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The find command inputted by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If no tasks with keyword can be found."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void searchForKeyword(String command) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String keyword \u003d instructions[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Initialize an arraylist to store found tasks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e findings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Go through Duke\u0027s tasks"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            //Check each task for the keyword"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (tasks.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Add to findings"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                findings.add(tasks.get(i));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        //Check if list is empty"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (findings.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry I find can\u0027t any tasks related to \" + keyword + \".\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"Here are the relevant tasks!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Prints all tasks in findings"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            for (int i \u003d 0; i \u003c findings.size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Enumerator"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.print((i+1) + \".\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Actual Task"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.println(findings.get(i));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 176
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * To-do inherits from Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * To-do is similar to a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"T - \" + super.toSaveData() + \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 21
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with interactions with the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Constants **/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String outputBreaker \u003d \"\u003e\u003e\u003e \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String lineBreaker \u003d \"--.--.--.--.--.--.--.--.--.--.--.\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            \"--.--.--.--.--.--.--.--.--.--.--\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Text Images"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Other variable"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Using Scanner for reading inputs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints Duke\u0027s greetings to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void displayGreetings() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"\\nHello, I\u0027m Duke!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"What can I help you with today?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"\\n\" + lineBreaker);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Print\u0027s Duke\u0027s farewell to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void displayFarewells() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.print(outputBreaker);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"Bye! Hoped I helped!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"\\n\" + lineBreaker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Takes in input from user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return User input as a String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Read user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints Duke\u0027s symbols before response."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void printOutputSymbol() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.print(outputBreaker);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints a line."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void printLineBreaker() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(lineBreaker);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints error message for when Duke fails to load save file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(\"... Who? Never mind. Er-hmm.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints error messages from DukeException."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void printError(DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints all tasks within a TaskList (if any)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Else prints a list is empty message."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param list TaskList of Duke."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void printList(TaskList list) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.print(\"Here is what I have! ^^\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (list.isListEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Handles printing empty list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println(\"Whoops! I don\u0027t have anything of note yet...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            list.printAllTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 105
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void randomCommand_InvalidInput_GivenInput(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"something\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.INVALID) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"something\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void todoCommand_ValidInput_GivenInput(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"todo read book\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.TODO) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"todo read book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_ValidInput_GivenInput(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book /by 2020-06-06\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"deadline return book /by 2020-06-06\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_InvalidDate_ExceptionMessage(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book /by 2020/06/06\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Whoops! I think there is an error in your date.\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"\\nPlease Try Again!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_MissingDate_ExceptionMessage(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Whoops! I think you forgot to finish your \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                + \"command. Sorry but I need it. D:\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 77
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void markTaskDone_InvalidIndex_SuccessMessage(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e testTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        testTasks.add(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        TaskList tasktester \u003d new TaskList(testTasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasktester.markTaskDone(\"done 0\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Sorry, I don\u0027t think that\u0027s a valid index...\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "something"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rachel170": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    echo TEST FAILED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ")"
      }
    ],
    "authorContributionMap": {
      "rachel170": 6,
      "-": 20
    }
  }
]
